<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[git format-patch and git diff]]></title>
      <url>/2017/06/14/git-format-patch%E5%92%8Cgit-diff/</url>
      <content type="html"><![CDATA[<p>git中则提供了两种patch方案：</p>
<p>用git diff生成的标准patch，可以提供上述的patch命令使用。<br>用git format-patch生成的git专用patch。<br>两种patch的比较：</p>
<p>兼容性：很明显，git diff生成的patch兼容性强。如果你在修改的代码的官方版本库不是git管理的版本库，那么你必须使用git diff生成的patch才能让你的代码被项目的维护人接受。<br>除错功能：对于git diff生成的patch，你可以用git apply –check查看补丁是否能够干净顺利地应用到当前分支中；如果git format-patch生成的补丁不能打到当前分支，git am会给出提示，并协助你完成打补丁工作，你也可以使用git am -3进行三方合并，详细的做法可以参考git手册或者《Progit》。从这一点上看，两者除错功能都很强。<br>提交信息：由于git format-patch生成的补丁中含有这个补丁开发者的名字，因此在应用补丁时，这个名字会被记录进版本库，显然，这样做是恰当的。因此，目前使用git的开源社区往往建议大家使用git format-patch生成补丁。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[git merge 和 git rebase]]></title>
      <url>/2017/06/14/git-merge%E5%92%8Cgit-rebase/</url>
      <content type="html"><![CDATA[<p>git merge简要说明</p>
<ol>
<li>git merge会产生一次新的commit版本，并且此版本会有2个或者更多个父提交，可以通过HEAD^1，HEAD^2，HEAD^n方法来引用此提交的父提交。</li>
<li>git merge是非破坏性的(non-destructive)操作，没有负作用，并且被合并的这些分支都可以git push发布到remote公共仓库中。</li>
<li>由于每次合并会产生一次新的提交历史，如果主分支非常活跃，就会产生很多这种合并分支的提交历史，会对项目本身的提交历史产生污染。<br>git-rebase-test.sh测试脚本</li>
</ol>
<p>git rebase简要说明</p>
<ol>
<li>git rebase 会产生一个修改过的很干净的项目提交历史，例如在feature分支上git rebase master，会将feature分支上的提交添加到master分支的最顶端。</li>
<li>git rebase操作有负面效果，影响项目提交历史的安全性(safety)和可追溯性(traceability)。</li>
<li>git rebase -i master可以交互式压缩提交(squash)或者忽略指定提交。</li>
<li>git rebase使用黄金守则: NEVER USE IT ON PUBLIC BRANCHES.</li>
<li>不要将主分支rebase到特性分支上(don’t rebased master onto your feature branch: git rebase feature)。</li>
<li>其他开发者提交的新特性和修改(如patch)应该创建一个临时分支apply这些修改，再使用git merge合并修改到主分支上，而不是使用git rebase方式操作，因为rebase操作修改了提交历史，很难追溯哪些提交新增了这些特性和修改。</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[关于文件大小写]]></title>
      <url>/2017/06/14/%E5%85%B3%E4%BA%8E%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E5%86%99/</url>
      <content type="html"><![CDATA[<p>突然发现自己的电脑中，git对文件大小写是不敏感的，执行下面的命令吧</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 全局</div><div class="line">git config --global core.ignorecase false</div><div class="line"><span class="meta">#</span> 项目</div><div class="line">git config core.ignorecase false</div></pre></td></tr></table></figure>
<h2 id="修正文件大小写"><a href="#修正文件大小写" class="headerlink" title="修正文件大小写"></a>修正文件大小写</h2><p>受文件系统的影响，直接修改可能会行不通<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git mv filename FileName</div><div class="line"><span class="meta">#</span> fatal: destination exists</div></pre></td></tr></table></figure></p>
<p>方案1</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git mv filename filename_tmp</div><div class="line">git mv filename_tmp FileName</div></pre></td></tr></table></figure>
<p>方案2(awesome)</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git mv -f filename FileName</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[git本地化操作]]></title>
      <url>/2017/06/13/git%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>很多时候我们会有一些本地化的代码修改操作，却并不想污染到代码仓库，有如下技巧</p>
<p>.git/info/exclude文件中进行文件的跟踪忽略，效果同.gitignore</p>
<p>假定开发人员不会更改文件,此标志用于提高 not-changing 文件夹(如SDK)的性能。<br>git update-index –skip-worktree</p>
<p>用于命 GIT 不再染指特定文件,即便开发人员可能更改它<br>git update-index –assume-unchanged</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql配置远程访问]]></title>
      <url>/2017/06/13/mysql%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
      <content type="html"><![CDATA[<p>建立远程访问用户<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GRANT ALL PRIVILEGES ON *.* TO 'YOURUSER'@'%' IDENTIFIED BY 'YOURPASSWORD' WITH GRANT OPTION;</div><div class="line">FLUSH PRIVILEGES;</div><div class="line"></div><div class="line">#查看结果:</div><div class="line">SELECT * from information_schema.user_privileges where grantee like "'YOURUSER'%";</div></pre></td></tr></table></figure></p>
<p>配置my.cnf,通常是/etc/mysql/my.cnf，找到并注释掉下面语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bind-address = 127.0.0.1 # 或者改成 bind-address = 0.0.0.0</div><div class="line"></div><div class="line">skip-networking</div></pre></td></tr></table></figure>
<p>重启服务器</p>
<h3 id="Bonus-Tip-Revoke-Access"><a href="#Bonus-Tip-Revoke-Access" class="headerlink" title="Bonus-Tip: Revoke Access"></a>Bonus-Tip: Revoke Access</h3><p>If you accidentally grant access to a user, then better have revoking option handy.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#Following will revoke all options for THEUSER from all machines:</div><div class="line">REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'THEUSER'@'%';</div><div class="line"></div><div class="line">#Following will revoke all options for THEUSER from particular IP:</div><div class="line">mysql&gt; REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'THEUSER'@'1.2.3.4';</div></pre></td></tr></table></figure>
<p>Its better to check information_schema.user_privileges table after running REVOKE command.</p>
<p>If you see USAGE privilege after running REVOKE command, its fine. It is as good as no privilege at all. I am not sure if it can be revoked.</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[那些概念]]></title>
      <url>/2017/05/18/%E9%82%A3%E4%BA%9B%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h3 id="全局变量的缺点"><a href="#全局变量的缺点" class="headerlink" title="全局变量的缺点"></a>全局变量的缺点</h3><p>全局变量的优点是使用方便。 其缺点也是明显的，这里指针对两点说明</p>
<ul>
<li><p>不能保证值的正确性；因为其作用域是全局，所以程序范围内都可以修改它的值，如果出现错误非常难以发现。</p>
</li>
<li><p>如果在多线程中使用全局变量，你的程序将会错的一塌糊涂。多线程会修改另一个线程使用的全局变量的值，如果不注意，一旦出错后果不堪设想。所以在这种情况下万不得意不要使用全局变量。</p>
</li>
<li><p>增加了模块的偶合</p>
</li>
<li><p>全局变量保存在静态存贮区，程序开始运行时为其分配内存，程序结束释放该内存。与局部变量的动态分配、动态释放相比，生存期比较长，因此过多的全局变量会占用较多的内存单元。 </p>
</li>
<li><p>全局变量破坏了函数的封装性能。前面的章节曾经讲过，函数象一个黑匣子，一般是通过函数参数和返回值进行输入输出，函数内部实现相对独立。但函数中如果使用了全局变量，那么函数体内的语句就可以绕过函数参数和返回值进行存取，这种情况破坏了函数的独立性，使函数对全局变量产生依赖。同时，也降低了该函数的可移植性。</p>
</li>
<li><p>全局变量使函数的代码可读性降低。由于多个函数都可能使用全局变量，函数执行时全局变量的值可能随时发生变化，对于程序的查错和调试都非常不利。 </p>
</li>
</ul>
<h3 id="全局函数-静态方法"><a href="#全局函数-静态方法" class="headerlink" title="全局函数 静态方法"></a>全局函数 静态方法</h3><p>global method适合定义一种与任何对象无紧密联系的服务</p>
<p>static method适合定义与对象类型关系密切，但是与单一对象不十分密切的服务。</p>
<h3 id="函数副作用-amp-纯函数"><a href="#函数副作用-amp-纯函数" class="headerlink" title="函数副作用&amp;纯函数"></a>函数副作用&amp;纯函数</h3><p>在计算机科学中，函数副作用指当调用函数时，除了返回函数值之外，还对主调用函数产生附加的影响。例如修改全局变量（函数外的变量）或修改参数。</p>
<p>函数副作用会给程序设计带来不必要的麻烦，给程序带来十分难以查找的错误，并降低程序的可读性。严格的函数式语言要求函数必须无副作用。</p>
<p>如果一个函数通过隐式（Implicit）方式，从外界获取数据，或者向外部输出数据，那么，该函数就不是纯函数，叫作非纯函数（Impure Function）。</p>
<p>隐式（Implicit）的意思是，函数通过参数和返回值以外的渠道，和外界进行数据交换。比如，读取全局变量，修改全局变量，都叫作以隐式的方式和外界进行数据交换；比如，利用 I/O API（输入输出系统函数库）读取配置文件，或者输出到文件，打印到屏幕，都叫做隐式的方式和外界进行数据交换。</p>
<p>纯函数的定义也可以写为「没有副作用的函数」。</p>
<p>I/O API 可以看作是一种特殊的全局变量。文件、屏幕、数据库等输入输出结构可以看作是独立于运行环境之外的系统外全局变量，而不是应用程序自己定义的全局变量。</p>
<p>有些函数的参数是一种 In/Out 作用的参数，即函数可能改变参数里面的内容，把一些信息通过输入参数，夹带到外界。这种情况，严格来说，也是副作用。也是非纯函数。</p>
<p>纯函数的好处主要有几点：</p>
<p>无状态。线程安全。不需要线程同步。<br>纯函数相互调用组装起来的函数，还是纯函数。<br>应用程序或者运行环境（Runtime）可以对纯函数的运算结果进行缓存，运算加快速度。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[php中的异常与错误]]></title>
      <url>/2017/03/02/php%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E4%B8%8E%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>异常是指程序运行中不符合预期情况以及与正常流程不同的状况。错误则属于自身问题，是一种非法语法或者环境问题导致的、让编译器无法通过检查设置无法运行的情况。</p>
<p>php只有在你throw 一个异常后，才能用try…catch来捕获异常(一般情况下如此，也有部分异常可以自动捕获)。</p>
<p>历史原因导致php的异常处理是不足的，绝大多数情况下，无法自动抛出异常，必须使用if…else先进行判断，再手动抛出异常。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">customError</span><span class="params">($errno, $errstr, $errfile, $errline)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//自定义错误处理是，手动抛出异常</span></div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>($errstr);</div><div class="line">&#125;</div><div class="line"></div><div class="line">set_error_handler(<span class="string">'customError'</span>, E_ALL | E_STRICT);</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $a = <span class="number">5</span>/<span class="number">0</span>;</div><div class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'错误信息:'</span>, $e-&gt;getMessage();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>fetal error这样的错误无法捕获，也无法在发生后恢复流程处理，但是可以使用register_shutdown_function()函数在程序终止或die时触发一个函数，给程序带来一个短暂的回光返照。在php4时，不支持析构函数，也常用于模拟实现析构函数。</p>
<p>Parse error级别的错误，除了修改ini文件，将错误信息写到日志中，什么也做不了。</p>
<p>无论是错误还是异常，都可以使用handler接管系统已有的处理机制。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[git 命令]]></title>
      <url>/2016/11/22/git%20%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>删除远程分支<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> As of Git v1.7.0, you can delete a remote branch using</div><div class="line">git push origin --delete &lt;branch_name&gt;</div><div class="line"><span class="meta">#</span> which is easier to remember than</div><div class="line">git push origin :&lt;branch_name&gt;</div></pre></td></tr></table></figure></p>
<p>git用得时间多了，会变慢。 那么可以用下面的命令优化一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git gc   - Cleanup unnecessary files and optimize the local repository</div><div class="line">git-repack - Pack unpacked objects in a repository</div></pre></td></tr></table></figure></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">git push origin test:test    # 提交本地test分支作为远程的test分支</div><div class="line"></div><div class="line">git push --tags # 上传所有标签</div><div class="line"></div><div class="line">git remote set-url --push [name] [newUrl] # 修改远程仓库</div><div class="line">git pull [remoteName] [localBranchName]</div><div class="line">git push [remoteName] [localBranchName]</div><div class="line"></div><div class="line">git merge [name]   # 将名称为[name]的分支与当前分支合并</div><div class="line">git rebase [name]  #会将[name]分支的代码合并过来，并按照提交的顺序排序(衍合指定分支到分支到当前分支)</div><div class="line"></div><div class="line">git merge-base branchA branchB #查看2分支的公共节点</div><div class="line"></div><div class="line">git diff $(git-merge-base A B) B</div><div class="line"><span class="meta"></span></div><div class="line"># 按时间逆序列出提交对象，常用于查找涉及到某些文件的提交的hash。例如，查找所有关系到文件readme的提交</div><div class="line">git rev-list</div><div class="line"></div><div class="line">git shortlog</div><div class="line"><span class="meta"></span></div><div class="line"># 查看在branch上的，但不在master上的记录</div><div class="line">git log branch --not master</div><div class="line"></div><div class="line">git fsck --lost-found //检查丢失的提交</div><div class="line">git ls-files --stage //可以显示出索引的内容</div><div class="line">git checkout . //撤销所有修改</div><div class="line">git clean -xfd //连 gitignore 的untrack 文件/目录也一起删掉</div><div class="line">git branch --merged | xargs git branch -d //删除已经合并的分支</div><div class="line"></div><div class="line">git ls-files --other --ignored --exclude-stanard # list all ignored files in this project</div><div class="line">git reset --keep $COMMIT # reset and preserve uncommitted local changes</div><div class="line">git checkout --track $UPSTREAM/$REMOTE_BRANCH # create a new tracking branch based on a remote branch</div></pre></td></tr></table></figure>
<p>View a file in a different Git branch without changing branches<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git checkout $REVISION -- $FILE</div><div class="line">git checkout $REVISION -- "*" switch all files without changing brnaches</div><div class="line">git show $REVISION:$FILE</div><div class="line">git checkout --orphan $BRANCH</div></pre></td></tr></table></figure></p>
<p>Make an existing Git branch track a remote branch<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git branch -u $UPSTREAM/$REMOTE_BRANCH $LOCAL_BRANCH</div><div class="line">git branch --set-upstream-to=$UPSTREAM/$REMOTE_BRANCH</div><div class="line"></div><div class="line">git push -u $UPSTREAM $REMOTE_BRANCH</div><div class="line"></div><div class="line">git remote add $UPSTREAM &lt;remote-url&gt;</div><div class="line">git fetch $UPSTREAM</div><div class="line">git branch -f --track $LOCAL_BRANCH $UPSTREAM/$REMOTE_BRANCH</div><div class="line"><span class="meta">#</span> OR:</div><div class="line">git branch --set-upstream $LOCAL_BRANCH $UPSTREAM/$REMOTE_BRANCH</div></pre></td></tr></table></figure></p>
<p>diff changes only among certain file(s)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git diff $BRANCH1 $BRANCH2 -- $FILE1 $FILE2</div><div class="line">(branch1 is optional and your current branch (the branch you are on) will be considered by default if branch1 is not provided)</div><div class="line"></div><div class="line">git diff $REVISION $FILE</div></pre></td></tr></table></figure></p>
<p>other command<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">bisect     #Find by binary search the change that introduced a bug</div><div class="line">grep       #Print lines matching a pattern</div><div class="line">git log --since="two weeks ago" --until="two days ago"</div><div class="line">git log --since=four.days --until=two.days</div><div class="line">git instaweb</div><div class="line">git ls-tree #view git tree view</div><div class="line">git rm -rf . # Delete everything in the orphan branch</div><div class="line">git stash save --keep-index    # stash only unstaged files</div><div class="line">git merge --squash $BRANCH</div><div class="line">git rev-parse --abbrev-ref HEAD #判断当前分支</div></pre></td></tr></table></figure></p>
<p>列出当天某人的所有提交记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --author=AUTHOR --oneline --since=&quot;6am&quot; --graph --all --decorate</div></pre></td></tr></table></figure></p>
<p>Find the nearest parent branch of the current git branch<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/usr/bin/env zsh</div><div class="line">branch=`git rev-parse --abbrev-ref HEAD`</div><div class="line"></div><div class="line">git show-branch | ack '\*' | ack -v "$branch" | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//'`</div><div class="line"><span class="meta">#</span> How it works:</div><div class="line"><span class="meta">#</span> 1| Display a textual history of all commits.</div><div class="line"><span class="meta">#</span> 2| Ancestors of the current commit are indicated</div><div class="line"><span class="meta">#</span>    by a star. Filter out everything else.</div><div class="line"><span class="meta">#</span> 3| Ignore all the commits in the current branch.</div><div class="line"><span class="meta">#</span> 4| The first result will be the nearest ancestor branch.</div><div class="line"><span class="meta">#</span>    Ignore the other results.</div><div class="line"><span class="meta">#</span> 5| Branch names are displayed [in brackets]. Ignore </div><div class="line"><span class="meta">#</span>    everything outside the brackets, and the brackets.</div><div class="line"><span class="meta">#</span> 6| Sometimes the branch name will include a ~2 or ^1 to</div><div class="line"><span class="meta">#</span>    indicate how many commits are between the referenced</div><div class="line"><span class="meta">#</span>    commit and the branch tip. We don't care. Ignore them.</div></pre></td></tr></table></figure></p>
<p>or<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">branch=`git rev-parse --abbrev-ref HEAD`</div><div class="line">git show-branch -a 2&gt;/dev/null | grep '\*' | grep -v "$branch" | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//'</div></pre></td></tr></table></figure></p>
<p>“^”代表父提交,当一个提交有多个父提交时，可以通过在”^”后面跟上一个数字，表示第几个父提交，”^”相当于”^1”</p>
<p>checkout只会移动HEAD指针，reset会改变HEAD的引用值</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[iTerm2奇淫技巧]]></title>
      <url>/2016/10/25/iTerm2%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>control + a<br>回到行首。这个对于用过unix系统的童鞋来说再熟悉不过。</p>
<p>control + e<br>有了回到行首，当然不能错过光标回到行尾，写文章，打命令，这两个快捷键都是用的很频繁的。</p>
<p>control + w<br>删除之前一个单词。这个快捷键是我意外发现的，既然有删除之前一个单词，我觉得应该会有删除后面一个单词，但我至今没发现，如果你会请告诉我，重金打赏。</p>
<p>control + u<br>清除当前行。</p>
<p>control + p<br>上一条命令。</p>
<p>control + k<br>删除命令行文本到末尾。</p>
<p>control + l<br>清屏。</p>
<p>control + r<br>搜索命令历史。这个也是我经常用的快捷键，有时候你忘了正行命令，用这个命令很不错的，当然history | grep ** 会更有用些。</p>
<p>前一标签页<br><code>⌘</code> + <code>shift</code> + <code>Left</code></p>
<p>后一标签页<br><code>⌘</code> + <code>shift</code> + <code>Right</code></p>
<p>Go to Tab<br><code>⌘</code> + <code>Number</code></p>
<p>Go to Window<br><code>⌘</code> + <code>Option</code> + <code>Number</code></p>
<p>Go to Split Pane by Direction<br><code>⌘</code> + <code>Option</code> + <code>Arrow</code></p>
<p>Go to Split Pane by Order of Use<br><code>⌘</code> + <code>]</code> , <code>⌘</code> + <code>[</code></p>
<p>Undo<br><code>Ctrl</code> + <code>-</code></p>
<p><code>Ctrl</code> + <code>y</code><br><code>Ctrl</code> + <code>g</code></p>
<p>查看历史命令：command + ;<br>查看剪贴板历史：command + shift + h<br>搜索命令历史：ctrl + r</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[配置linux服务器常用命令]]></title>
      <url>/2016/09/28/%E9%85%8D%E7%BD%AElinux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="安装lnmp"><a href="#安装lnmp" class="headerlink" title="安装lnmp"></a>安装lnmp</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/php</div><div class="line">sudo apt install -y language-pack-en-base</div><div class="line">locale-gen en_US.UTF-8</div><div class="line"></div><div class="line">sudo apt -y install php7.1</div><div class="line">sudo apt install -y php7.1-fpm php7.1-mysql php7.1-curl php7.1-xml php7.1-mcrypt php7.1-json php7.1-gd php7.1-mbstring</div><div class="line">sudo apt install mysql-server-5.7</div><div class="line">sudo apt install nginx</div><div class="line">sudo apt install redis-server php-redis</div></pre></td></tr></table></figure>
<h3 id="安装composer"><a href="#安装composer" class="headerlink" title="安装composer"></a>安装composer</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"</div><div class="line">php -r "if (hash_file('SHA384', 'composer-setup.php') === 'e115a8dc7871f15d853148a7fbac7da27d6c0030b848d9b3dc09e2a0388afed865e6a3d6b3c0fad45c48e2b5fc1196ae') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;"\nphp composer-setup.php</div><div class="line">php -r "unlink('composer-setup.php');"</div></pre></td></tr></table></figure>
<h3 id="配置-www-www-data-用户权限"><a href="#配置-www-www-data-用户权限" class="headerlink" title="配置 www \ www-data 用户权限"></a>配置 www \ www-data 用户权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo -Hu www-data ssh-keygen -t rsa -C "entimm@gmail.com"</div><div class="line">sudo chown -R www-data:www-data /var/www/</div><div class="line">sudo visudo</div><div class="line">sudo passwd www-data</div><div class="line">vim /etc/passwd</div></pre></td></tr></table></figure>
<h3 id="安装ohmyzsh"><a href="#安装ohmyzsh" class="headerlink" title="安装ohmyzsh"></a>安装ohmyzsh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt install zsh</div><div class="line">sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</div></pre></td></tr></table></figure>
<h3 id="安装配置node环境"><a href="#安装配置node环境" class="headerlink" title="安装配置node环境"></a>安装配置node环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl --silent --location https://deb.nodesource.com/setup_4.x | bash -</div><div class="line">apt install -y nodejs</div><div class="line">npm install -g gulp</div><div class="line">npm install -g bower</div><div class="line">echo '\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \\n  --cache=$HOME/.npm/.cache/cnpm \\n  --disturl=https://npm.taobao.org/dist \\n  --userconfig=$HOME/.cnpmrc"' &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</div></pre></td></tr></table></figure>
<h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name entimm</div><div class="line">git config --global user.email entimm@gmial.com</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[shell]]></title>
      <url>/2016/09/24/shell/</url>
      <content type="html"><![CDATA[<h2 id="shell-中的判断"><a href="#shell-中的判断" class="headerlink" title="shell 中的判断"></a>shell 中的判断</h2><ol>
<li>字符串判断</li>
</ol>
<p>str1 = str2　　　　 当两个串有相同内容、长度时为真<br>str1 != str2　　　　当串str1和str2不等时为真<br>-n str1　　　　　　　当串的长度大于0时为真(串非空)<br>-z str1　　　　　　  当串的长度为0时为真(空串)<br>str1　　　　　　　　  当串str1为非空时为真</p>
<ol>
<li>数字的判断</li>
</ol>
<p>int1 -eq int2　　　　两数相等为真<br>int1 -ne int2　　　　两数不等为真<br>int1 -gt int2　　　　int1大于int2为真<br>int1 -ge int2　　　　int1大于等于int2为真<br>int1 -lt int2　　　　int1小于int2为真<br>int1 -le int2　　　　int1小于等于int2为真</p>
<p>-n “$var” 判断一个变量是否有值</p>
<p>3 文件的判断</p>
<p>-r file　　　　　用户可读为真<br>-w file　　　　　用户可写为真<br>-x file　　　　　用户可执行为真<br>-f file　　　　　文件为正规文件为真<br>-d file　　　　　文件为目录为真<br>-c file　　　　　文件为字符特殊文件为真<br>-b file　　　　　文件为块特殊文件为真<br>-s file　　　　　文件大小非0时为真<br>-t file　　　　　当文件描述符(默认为1)指定的设备为终端时为真</p>
<p>3、复杂逻辑判断</p>
<p>-a 　 　　　　　  与<br>-o　　　　　　　   或<br> !　　　　　　　　 非</p>
<h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><p>$0  当前脚本的文件名<br>$n  传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。<br>$#  传递给脚本或函数的参数个数。<br>$<em>  传递给脚本或函数的所有参数。<br>$@  传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $</em> 稍有不同，下面将会讲到。<br>$?  上个命令的退出状态，或函数的返回值。<br>$$  当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ssh保持链接]]></title>
      <url>/2016/09/23/ssh%E4%BF%9D%E6%8C%81%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="Client-configuration"><a href="#Client-configuration" class="headerlink" title="Client configuration"></a>Client configuration</h2><p>Try creating the file: ~/.ssh/config<br>Add the contents:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Host *</div><div class="line">  ServerAliveInterval 30</div><div class="line">  ServerAliveCountMax 5</div></pre></td></tr></table></figure></p>
<h2 id="Server-configuration"><a href="#Server-configuration" class="headerlink" title="Server configuration"></a>Server configuration</h2><p>Edit configuration file: /etc/ssh/sshd_config<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ClientAliveInterval 20</div><div class="line">ClientAliveCountMax 5</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[快速搭建vpn]]></title>
      <url>/2016/09/22/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAvpn/</url>
      <content type="html"><![CDATA[<p>VPS端一键安装Shadowsocks (SS Python版一键安装脚本支持CentOS 6，7，Debian所有版本，Ubuntu所有版本)，<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</div><div class="line">chmod +x shadowsocks.sh</div><div class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</div></pre></td></tr></table></figure></p>
<p>中间会提示输入SS SERVER使用的端口和连接密码。不输入则是系统默认.</p>
<p>安装完成后，脚本提示如下(记得记录下来)：<br>Congratulations, shadowsocks install completed!<br>Your Server IP:your_server_ip<br>Your Server Port:your_server_port<br>Your Password:your_password<br>Your Local IP:127.0.0.1<br>Your Local Port:1080<br>Your Encryption Method:aes-256-cfb</p>
<p>看到以上提示后就表明VPS上SS已经安装成功，并且已经设置了开机启动，VPS重启后不用手工启动SS。<br>到此就安装成功可以科学上网了</p>
<p>卸载方法：<br>使用root用户登录，运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./shadowsocks.sh uninstall</div></pre></td></tr></table></figure></p>
<p>单用户配置文件 Sample：<br>配置文件路径：/etc/shadowsocks.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;server_port&quot;:8989,</div><div class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;yourpassword&quot;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>多用户多端口配置文件 Sample：<br>配置文件路径：/etc/shadowsocks.json<br>```<br>{<br>    “server”:”0.0.0.0”,<br>    “local_address”:”127.0.0.1”,<br>    “local_port”:1080,<br>    “port_password”:{<br>         “8989”:”password0”,<br>         “9001”:”password1”,<br>         “9002”:”password2”,<br>         “9003”:”password3”,<br>         “9004”:”password4”<br>    },<br>    “timeout”:300,<br>    “method”:”aes-256-cfb”,<br>    “fast_open”: false<br>}</p>
<p>使用命令：<br>启动：/etc/init.d/shadowsocks start<br>停止：/etc/init.d/shadowsocks stop<br>重启：/etc/init.d/shadowsocks restart<br>状态：/etc/init.d/shadowsocks status</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[那些配置]]></title>
      <url>/2016/09/22/%E9%82%A3%E4%BA%9B%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="phpstorm-外部工具"><a href="#phpstorm-外部工具" class="headerlink" title="phpstorm 外部工具"></a>phpstorm 外部工具</h3><p>Open Project With Subline<br>subl<br>$ProjectFileDir$<br>$ProjectFileDir$</p>
<p>Open File With Sublime<br>subl<br>$FilePath$:$LineNumber$<br>$ProjectFileDir$</p>
<p>PHP CS Fixer<br>/usr/local/bin/php-cs-fixer<br>–level=psr2 –verbose fix $FileDir$/$FileName$<br>$ProjectFileDir$</p>
<h3 id="从连接中使用subl打开所连接文件"><a href="#从连接中使用subl打开所连接文件" class="headerlink" title="从连接中使用subl打开所连接文件"></a>从连接中使用subl打开所连接文件</h3><p><a href="https://github.com/dhoulb/subl.git" target="_blank" rel="external">https://github.com/dhoulb/subl.git</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[接替app端的请求]]></title>
      <url>/2016/09/22/%E6%8E%A5%E6%9B%BFapp%E7%AB%AF%E7%9A%84%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h3 id="电脑安装抓包工具-使用charles-fiddler"><a href="#电脑安装抓包工具-使用charles-fiddler" class="headerlink" title="电脑安装抓包工具(使用charles/fiddler)"></a>电脑安装抓包工具(使用charles/fiddler)</h3><h3 id="同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑"><a href="#同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑" class="headerlink" title="同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑"></a>同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑</h3><h3 id="改电脑的hosts"><a href="#改电脑的hosts" class="headerlink" title="改电脑的hosts"></a>改电脑的hosts</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.0.100 test.api.entimm.com</div><div class="line"># 反向代理用的</div><div class="line">127.0.0.1 api.entimm.com</div></pre></td></tr></table></figure>
<h3 id="最后上nginx的反向代理"><a href="#最后上nginx的反向代理" class="headerlink" title="最后上nginx的反向代理"></a>最后上nginx的反向代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line"></div><div class="line">    listen 80;</div><div class="line">    listen [::]:80;</div><div class="line"></div><div class="line">    server_name api.entimm.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://test.api.entimm.com;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="搞定！"><a href="#搞定！" class="headerlink" title="搞定！"></a>搞定！</h3>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[快速搭建服务器]]></title>
      <url>/2016/09/22/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="下载-deploy-sh-脚本"><a href="#下载-deploy-sh-脚本" class="headerlink" title="下载 deploy.sh 脚本"></a>下载 deploy.sh 脚本</h3><p>14.04安装脚本<br>wget <a href="https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy.sh" target="_blank" rel="external">https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy.sh</a></p>
<p>16.04安装脚本<br>wget <a href="https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy-16.sh" target="_blank" rel="external">https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy-16.sh</a></p>
<h3 id="设置-MYSQL-密码"><a href="#设置-MYSQL-密码" class="headerlink" title="设置 MYSQL 密码"></a>设置 MYSQL 密码</h3><p>vi deploy.sh:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Configure</div><div class="line">MYSQL_ROOT_PASSWORD=&quot;&quot;</div><div class="line">MYSQL_NORMAL_USER=&quot;estuser&quot;</div><div class="line">MYSQL_NORMAL_USER_PASSWORD=&quot;&quot;</div></pre></td></tr></table></figure></p>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>有需要的话可以使用网易镜像加速：<br>wget <a href="http://mirrors.163.com/.help/sources.list.trusty" target="_blank" rel="external">http://mirrors.163.com/.help/sources.list.trusty</a> -O /etc/apt/sources.list</p>
<p>运行脚本:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod +x deploy.sh</div><div class="line">./deploy.sh</div></pre></td></tr></table></figure></p>
<p>注：请使用 root 运行。</p>
<h3 id="安装完以后的配置和注意事项"><a href="#安装完以后的配置和注意事项" class="headerlink" title="安装完以后的配置和注意事项"></a>安装完以后的配置和注意事项</h3><h4 id="修改站点目录权限"><a href="#修改站点目录权限" class="headerlink" title="修改站点目录权限"></a>修改站点目录权限</h4><p>通过此脚本配置的 Nginx 将使用 www 用户权限，因此需要在你的站点根目录下运行以下命令更新权限。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /var/www/</div><div class="line">chown www:www -R ./</div></pre></td></tr></table></figure></p>
<h4 id="添加站点的-Nginx-配置"><a href="#添加站点的-Nginx-配置" class="headerlink" title="添加站点的 Nginx 配置"></a>添加站点的 Nginx 配置</h4><p>下面是站点的 Nginx 配置模板，写入按照域名命名的文件中，并放入到 /etc/nginx/sites-enabled 目录下。<br>如：/etc/nginx/sites-enabled/phphub.org<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name YOU-DOMAIN-NAME;</div><div class="line">    root YOU-PROJECT-FOLDER;</div><div class="line"></div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    charset utf-8;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        try_files $uri $uri/ /index.php?$query_string;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location = /favicon.ico &#123; access_log off; log_not_found off; &#125;</div><div class="line">    location = /robots.txt  &#123; access_log off; log_not_found off; &#125;</div><div class="line"></div><div class="line">    access_log /data/log/nginx/YOU-PROJECT-NAME-access.log;</div><div class="line">    error_log  /data/log/nginx/YOU-PROJECT-NAME-error.log error;</div><div class="line"></div><div class="line">    sendfile off;</div><div class="line"></div><div class="line">    client_max_body_size 100m;</div><div class="line"></div><div class="line">    include fastcgi.conf;</div><div class="line"></div><div class="line">    location ~ /\.ht &#123;</div><div class="line">        deny all;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        fastcgi_pass   127.0.0.1:9000;</div><div class="line">        #fastcgi_pass /run/php/php7.0-fpm.sock;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">        include        fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者直接修改default<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line">##</div><div class="line"># You should look at the following URL&apos;s in order to grasp a solid understanding</div><div class="line"># of Nginx configuration files in order to fully unleash the power of Nginx.</div><div class="line"># http://wiki.nginx.org/Pitfalls</div><div class="line"># http://wiki.nginx.org/QuickStart</div><div class="line"># http://wiki.nginx.org/Configuration</div><div class="line">#</div><div class="line"># Generally, you will want to move this file somewhere, and start with a clean</div><div class="line"># file but keep this around for reference. Or just disable in sites-enabled.</div><div class="line">#</div><div class="line"># Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.</div><div class="line">##</div><div class="line"></div><div class="line"># Default server configuration</div><div class="line">#</div><div class="line">server &#123;</div><div class="line">    listen 80 default_server;</div><div class="line">    listen [::]:80 default_server;</div><div class="line"></div><div class="line">    # SSL configuration</div><div class="line">    #</div><div class="line">    # listen 443 ssl default_server;</div><div class="line">    # listen [::]:443 ssl default_server;</div><div class="line">    #</div><div class="line">    # Note: You should disable gzip for SSL traffic.</div><div class="line">    # See: https://bugs.debian.org/773332</div><div class="line">    #</div><div class="line">    # Read up on ssl_ciphers to ensure a secure configuration.</div><div class="line">    # See: https://bugs.debian.org/765782</div><div class="line">    #</div><div class="line">    # Self signed certs generated by the ssl-cert package</div><div class="line">    # Don&apos;t use them in a production server!</div><div class="line">    #</div><div class="line">    # include snippets/snakeoil.conf;</div><div class="line"></div><div class="line">    root /var/www/html;</div><div class="line"></div><div class="line">    # Add index.php to the list if you are using PHP</div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    server_name _;</div><div class="line"></div><div class="line">    charset utf-8;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        # First attempt to serve request as file, then</div><div class="line">        # as directory, then fall back to displaying a 404.</div><div class="line">        try_files $uri $uri/ =404;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location = /favicon.ico &#123; access_log off; log_not_found off; &#125;</div><div class="line">    location = /robots.txt  &#123; access_log off; log_not_found off; &#125;</div><div class="line"></div><div class="line">    access_log /var/log/nginx/default.access.log;</div><div class="line">    error_log  /var/log/nginx/default.error.log error;</div><div class="line"></div><div class="line">    sendfile off;</div><div class="line"></div><div class="line">    client_max_body_size 100m;</div><div class="line"></div><div class="line">    include fastcgi.conf;</div><div class="line"></div><div class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">    #</div><div class="line">    location ~ \.php$ &#123;</div><div class="line">    #   include snippets/fastcgi-php.conf;</div><div class="line">    #</div><div class="line">    #   # With php7.0-cgi alone:</div><div class="line">        fastcgi_pass 127.0.0.1:9000;</div><div class="line">    #   # With php7.0-fpm:</div><div class="line">    #   fastcgi_pass unix:/var/run/php7.0-fpm.sock;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">        include        fastcgi_params;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # deny access to .htaccess files, if Apache&apos;s document root</div><div class="line">    # concurs with nginx&apos;s one</div><div class="line">    #</div><div class="line">    location ~ /\.ht &#123;</div><div class="line">        deny all;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"># Virtual Host configuration for example.com</div><div class="line">#</div><div class="line"># You can move that to a different file under sites-available/ and symlink that</div><div class="line"># to sites-enabled/ to enable it.</div><div class="line">#</div><div class="line">#server &#123;</div><div class="line">#   listen 80;</div><div class="line">#   listen [::]:80;</div><div class="line">#</div><div class="line">#   server_name example.com;</div><div class="line">#</div><div class="line">#   root /var/www/example.com;</div><div class="line">#   index index.html;</div><div class="line">#</div><div class="line">#   location / &#123;</div><div class="line">#       try_files $uri $uri/ =404;</div><div class="line">#   &#125;</div><div class="line">#&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[php tips]]></title>
      <url>/2016/09/19/php-tip/</url>
      <content type="html"><![CDATA[<ul>
<li><p>explode 分割字符可以不是单字符</p>
</li>
<li><p>强制类型转换的值不论是否有定义，转换后都会有值</p>
</li>
<li><p>E_ALL ^ E_NOTICE 和 E_ALL &amp; ~E_NOTICE 是等效的</p>
</li>
<li><p>无论是函数调用还是文件包含，像 <strong>FILE</strong> 这种变量，他写在哪个文件，那么他的值就在哪个文件，而不受调用者影响</p>
</li>
<li><p>静态变量是在编译时解析的，不能跟表达式，比如：static $int = sqrt(121)</p>
</li>
<li><p>子类重载父类的属性和方法时，可见性不能比父类小</p>
</li>
<li><p>自 PHP 5.4 起可用 callable 类型指定回调类型 callback</p>
<ol>
<li><p>一个 PHP 的函数以 string 类型传递其名称。可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()</p>
</li>
<li><p>一个已实例化的对象的方法被作为数组传递，下标 0 包含该对象，下标 1 包含方法名</p>
</li>
<li><p>静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’</p>
</li>
<li><p>也可传递 closure 给回调参数</p>
</li>
</ol>
</li>
<li><p>对浮点数，数字字符串，纯字母都能进行自增/减运算，对其他类型的值进行自增/减运算不会产生什么效果</p>
</li>
<li><p>call_user_func_array 如果回调函数默认设置需要接受的参数是引用传递的时候，按值传递，结果将会输出一个警告, 这时数组参数中的参数需要按引用传递</p>
</li>
<li><p>call_user_func 如果回调函数默认设置需要接受的参数是引用传递的时候,无论怎样传参都无法满足</p>
</li>
<li><p>常量<strong>NAMESPACE</strong>的值是包含当前命名空间名称的字符串。在全局的，不包括在任何命名空间中的代码，它包含一个空的字符串</p>
</li>
<li>关键字 namespace 可用来显式访问当前命名空间或子命名空间中的元素。它等价于类中的 self 操作符</li>
<li><p>命名空间不会因为被包含而影响其在包含文件中的使用方式</p>
</li>
<li><p>mysqli::real_escape_string 相比 addslashes 会针对真实数据库环境的字符集做出更好的处理，但是必须在建立数据库链接的基础上</p>
</li>
<li><p>字符串类型变量可以直接当做一个数组，通过数字下面来访问字符串中的字符或者是通过 str_split 函数把字符串分割成单字符数组</p>
</li>
</ul>
<h3 id="那些有趣的代码片段"><a href="#那些有趣的代码片段" class="headerlink" title="那些有趣的代码片段"></a>那些有趣的代码片段</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multi</span> <span class="params">($a, $b)</span> </span>&#123;</div><div class="line">    $b = is_array($b) ? $b : array_slice(func_get_args(), <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">incr</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> $count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    $count++;</div><div class="line">    <span class="keyword">echo</span> $count;</div><div class="line">    <span class="keyword">if</span> ($count &lt; <span class="number">10</span>) &#123;</div><div class="line">        incr();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">echo</span> $count;</div><div class="line">    $count--;</div><div class="line">&#125;</div><div class="line">incr();</div><div class="line"><span class="comment">// 结果输出：1234567891010987654321</span></div></pre></td></tr></table></figure>
<p>不使用临时变量，交换2数的数值<br>下面三种方法不能对自身进行交换<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不仅对数字有效，对字符串也是有效的</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span><span class="params">(&amp;$x, &amp;$y)</span></span></div><div class="line">&#123;</div><div class="line">    $x = $x ^ $y;</div><div class="line">    $y = $x ^ $y;</div><div class="line">    $x = $x ^ $y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当心越界</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap2</span><span class="params">(&amp;$x, &amp;$y)</span></span></div><div class="line">&#123;</div><div class="line">    $x = $x + $y;</div><div class="line">    $y = $x - $y;</div><div class="line">    $x = $x - $y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当心越界、第二个数不能为0</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap3</span><span class="params">(&amp;$x, &amp;$y)</span></span></div><div class="line">&#123;</div><div class="line">    $x = $x * $y;</div><div class="line">    $y = $x / $y;</div><div class="line">    $x = $x / $y;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>命名空间<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">Myns</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ok</span></div><div class="line"><span class="keyword">new</span> <span class="keyword">namespace</span>\<span class="title">Test</span>;</div><div class="line"></div><div class="line"><span class="comment">// ok</span></div><div class="line"><span class="keyword">new</span> Test;</div><div class="line"></div><div class="line"><span class="comment">// ok</span></div><div class="line">$a =  <span class="keyword">__NAMESPACE__</span> . <span class="string">'\Test'</span>;</div><div class="line"><span class="keyword">new</span> $a;</div><div class="line"></div><div class="line"><span class="comment">// ok</span></div><div class="line">$a =  <span class="string">'Myns\Test'</span>;</div><div class="line"><span class="keyword">new</span> $a;</div><div class="line"></div><div class="line"><span class="comment">// failed,  Class 'Myns\Myns\Test' not found</span></div><div class="line"><span class="keyword">new</span> Myns\Test;</div></pre></td></tr></table></figure></p>
<p>这样的自增运算<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$i1 = <span class="number">0</span>;</div><div class="line">$i2 = <span class="number">0</span>;</div><div class="line">$a= ++$i1 + ++$i1 + ++$i1;</div><div class="line">$b= $i2++ + $i2++ + $i2++;</div><div class="line"><span class="keyword">echo</span> $a;</div><div class="line"><span class="keyword">echo</span> PHP_EOL;</div><div class="line"><span class="keyword">echo</span> $b;</div><div class="line"><span class="comment">// result:</span></div><div class="line"><span class="comment">// 6</span></div><div class="line"><span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<h3 id="安全两个原则"><a href="#安全两个原则" class="headerlink" title="安全两个原则"></a>安全两个原则</h3><ol>
<li>永远不要相信用户输入的东西。</li>
<li>将自己需要输出的数据进行转义。</li>
</ol>
<h3 id="对象的另一种理解"><a href="#对象的另一种理解" class="headerlink" title="对象的另一种理解"></a>对象的另一种理解</h3><p>对象”是一个容器，封装了“属性”（property）和“方法”（method）</p>
<p>所谓“属性”，就是对象的状态；所谓“方法”，就是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，“属性”记录具体是那一种动物，“方法”表示动物的某种行为（奔跑、捕猎、休息等等）</p>
<h3 id="isset-vs-array-key-exist"><a href="#isset-vs-array-key-exist" class="headerlink" title="isset vs array_key_exist"></a>isset vs array_key_exist</h3><p>最准确的array_key_exists的效率确是最差，而empty和isset的效率相差无几</p>
<p>如果数组不可能出现值为NULL的情况，建议使用isset<br>如果数组中经常出现值为NULL的情况，建议使用array_key_exists<br>如果数组中可能出现值为NULL，但是较少的情况，建议结合isset与array_key_exists使用，如“if (isset($arr[‘key’]) || array_key_exists(‘key’, $arr)){/<em>do somthing</em>/}”。此方法兼顾了性能和准确性，但是代码变长了。</p>
<h3 id="is-null"><a href="#is-null" class="headerlink" title="is_null"></a>is_null</h3><p>null不区分大小写：$a = null; $a = NULL 没有任何区别<br>仅在变量的值为“null”时，检测结果才为true，0、空字符串、false、空数组都检测为false<br>变量未初始化时，程序将会报错</p>
<p>isset 主要用来判断变量是否被初始化过<br>empty 可以将值为 “假”、“空”、“0”、“NULL”、“未初始化” 的变量都判断为TRUE<br>is_null 仅把值为 “NULL” 的变量判断为TRUE</p>
<h3 id="print-vs-echo"><a href="#print-vs-echo" class="headerlink" title="print vs echo"></a>print vs echo</h3><p>echo和print的区别php中echo和print的功能基本相同（输出），但是两者之间还是有细微差别的。echo输出后没有返回值，但print有返回值，当其执行失败时返回flase。因此可以作为一个普通函数来使用<br>例如执行下面的代码后变量$r的值将为1。<br>代码：</p>
<p>$r = print “Hello World”;</p>
<p>这意味着print可用在一些复杂的表达式中，而echo则不行。但是，因为echo语句不要求返回任何数值，所已在代码中echo语句的运行效率要略微快于print语句。</p>
<h3 id="include-vs-require"><a href="#include-vs-require" class="headerlink" title="include vs require"></a>include vs require</h3><p>include()与require()的功能也基本相同（包含），但在用法上也有一些不同，include()是有条件包含函数，而require()则是无条件包含函数。例如在下面代码中，如果变量$a为真，则将包含文件a.php：<br>代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($a) &#123; </div><div class="line">    <span class="keyword">include</span>(<span class="string">"a.php"</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而require()则和include()不同，不管$a取何值，下面的代码将把文件a.php包含进文件里：<br>代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($a) &#123; </div><div class="line">    <span class="keyword">require</span>(<span class="string">"a.php"</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="if-args-与-if-empty-args-的区别"><a href="#if-args-与-if-empty-args-的区别" class="headerlink" title="if($args) 与 if(!empty($args)) 的区别"></a>if($args) 与 if(!empty($args)) 的区别</h3><p>第一种方法在$args未定义的情况下会出现警告，在PHP中出现任何Error都会造成不小的性能损失，这主要是因PHP存在错误处理机制造成的。</p>
<p>第二种方法下empty能够处理未定义的参数，可以避免警告。另外empty是指令而非函数，运行效率并不会比第一种慢太多。</p>
<p>简而言之，如果你能保证$args已经定义，大可使用第一种。如果不行，则建议使用第二种。</p>
<h3 id="关于垃圾回收及composer"><a href="#关于垃圾回收及composer" class="headerlink" title="关于垃圾回收及composer"></a>关于垃圾回收及composer</h3><p>(重要资料)[<a href="http://cn2.php.net/manual/zh/features.gc.php" target="_blank" rel="external">http://cn2.php.net/manual/zh/features.gc.php</a>]</p>
<p>gc_disable() 不是完全关闭 gc ，而是关闭检查循环引用计数。</p>
<p>检查循环引用计数是因为 php 的 gc 是基于引用计数，在 php 5.2 及以前循环引用会导致内存泄漏。</p>
<p>composer 的这个地方是在进行依赖包检查，对于安装了大量包的项目来说，这是比较耗时、耗内存的操作，并且这部分代码（依据设计/依据提交者的看法）无需考虑循环引用计数问题。</p>
<p>composer在运行的时候会创建大量的对象，这些对象会触发GC机制，而这些对象需要被使用，所以GC无法清除，因此，使用gc_disable禁用GC之后，会节省cpu时间，效率更高。因为占用内存太大，并且频繁触发 gc ，导致效率降低。</p>
<p>由于PHP的GC是基于引用计数的，为了能够回收循环引用的对象，会在ref count减少但不到0的时候，试图检测并回收循环引用的孤岛对象，但当有效对象的数量及互相引用较大（比如composer中代表包、版本和互相的依赖关系）的时候，这种搜索的开销就会变得非常巨大，造成大量的CPU计算</p>
<h2 id="关于引用传递"><a href="#关于引用传递" class="headerlink" title="关于引用传递"></a>关于引用传递</h2><p>一般在输出参数有多个的时候可以考虑使用引用</p>
<h2 id="php中的’0’和javascript中的’0’"><a href="#php中的’0’和javascript中的’0’" class="headerlink" title="php中的’0’和javascript中的’0’"></a>php中的’0’和javascript中的’0’</h2><p>在php和js中转化布尔类型,php中被转换为false,而js中却是true</p>
<h2 id="strrev"><a href="#strrev" class="headerlink" title="strrev"></a>strrev</h2><p>只能翻转英文</p>
<h2 id="strlen-与mb-strlen"><a href="#strlen-与mb-strlen" class="headerlink" title="strlen()与mb_strlen()"></a>strlen()与mb_strlen()</h2><p>strlen 计算字符串的字节长度<br>mb_strlen 根据编码计算字符串字符的长度</p>
<p>gbk 中  一个中文字符2个字节<br>utf8中  一个中文字符3个字节</p>
<h2 id="变量的8种类型"><a href="#变量的8种类型" class="headerlink" title="变量的8种类型"></a>变量的8种类型</h2><p>整型 浮点型 字符串 布尔型 数组 对象 资源 null</p>
<h2 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h2><p>PHP的时间复杂度还得算上php的自身函数所占用的时间复杂度</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[tmux使用]]></title>
      <url>/2016/09/19/tmux/</url>
      <content type="html"><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><code>&lt;prefix&gt;$</code>可以重命名当前Session<br><code>&lt;prefix&gt;c</code>可以创建新的窗口（Window）<br><code>&lt;prefix&gt;%</code>水平分割窗口（形成两个Pane）<br><code>&lt;prefix&gt;&quot;</code>垂直分割窗口。退出当前Session的快捷键是<code>&lt;prefix&gt;d</code></p>
<p>在Bash中可以查看当前的tmux服务中有哪些Session：<code>tmux ls</code><br>根据Session的名字可以再回去：<code>tmux a -t myname  (or at, or attach)</code></p>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>默认的<code>&lt;prefix&gt;</code>是<code>Ctrl+b</code>，如果觉得不好按可以调整为<code>Ctrl+a</code>，只需要在配置文件~/.tmux.conf中加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">unbind ^b</div><div class="line">set -g prefix &apos;C-a&apos;</div></pre></td></tr></table></figure></p>
<p>为了能让Tmux动态载入配置而不是重启，我们设一个快捷键<prefix>r来重新载入配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind r source-file ~/.tmux.conf \; display-message &quot;Config reloaded&quot;</div></pre></td></tr></table></figure></prefix></p>
<p>当前tmux的设置，可通过tmux show -g</p>
<h3 id="窗格切换"><a href="#窗格切换" class="headerlink" title="窗格切换"></a>窗格切换</h3><p>可以把hjkl设置为切换窗格的快捷键：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bind h select-pane -L</div><div class="line">bind j select-pane -D</div><div class="line">bind k select-pane -U</div><div class="line">bind l select-pane -R</div></pre></td></tr></table></figure></p>
<p>再给调整窗格大小设置快捷键：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bind L resize-pane -L 10  # 向左扩展</div><div class="line">bind R resize-pane -R 10  # 向右扩展</div><div class="line">bind K resize-pane -U 5   # 向上扩展</div><div class="line">bind J resize-pane -D 5   # 向下扩展</div></pre></td></tr></table></figure></p>
<p>我们发现当打开新窗格时Shell仍然在Home目录，可以设置为当前目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bind &apos;&quot;&apos; split-window -c &apos;#&#123;pane_current_path&#125;&apos;</div><div class="line">bind &apos;%&apos; split-window -h -c &apos;#&#123;pane_current_path&#125;&apos;</div></pre></td></tr></table></figure></p>
<h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><p>在Tmux中通过[进入拷贝模式，按下<code>&lt;space&gt;</code>开始拷贝。然后用Vim/Emacs快捷键选择文本，按下<enter>拷贝所选内容。然后通过]进行粘贴</enter></p>
<p>上述所有快捷键中，只有[和]需要先按下<code>&lt;prefix&gt;</code>。<br>我们可以让上述拷贝快捷键符合Vi风格：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bind Escape copy-mode</div><div class="line">bind -t vi-copy v begin-selection</div><div class="line">bind -t vi-copy y copy-selection</div><div class="line">unbind p</div><div class="line">bind p pasteb</div><div class="line">setw -g mode-keys vi      # Vi风格选择文本</div></pre></td></tr></table></figure></p>
<p>这样，按下<code>&lt;Escape&gt;</code>进入拷贝模式，v进行选择，y拷贝所选内容，p进行粘贴。</p>
<h3 id="鼠标切换窗格"><a href="#鼠标切换窗格" class="headerlink" title="鼠标切换窗格"></a>鼠标切换窗格</h3><p>Tmux和Vim风格非常像，也可以设置鼠标模式。下面的设置开启了所有鼠标功能： 通过点击选择窗格，通过拖动更改窗格大小，通过鼠标选择窗口，还可以通过鼠标选择复制区域。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setw -g mode-mouse on</div><div class="line">set -g mouse-select-pane on</div><div class="line">set -g mouse-resize-pane on</div><div class="line">set -g mouse-select-window on</div></pre></td></tr></table></figure></p>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>Sessions<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:new&lt;CR&gt; new session</div><div class="line">s  list sessions</div><div class="line">$  name session</div></pre></td></tr></table></figure></p>
<p>:new -s <session-name> 可以指定新Session的名字。</session-name></p>
<p>Windows (tabs)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">c  create window</div><div class="line">w  list windows</div><div class="line">n  next window</div><div class="line">p  previous window</div><div class="line">f  find window</div><div class="line">,  name window</div><div class="line">&amp;  kill window</div></pre></td></tr></table></figure></p>
<p>Panes (splits)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">%  vertical split</div><div class="line">&quot;  horizontal split</div><div class="line"></div><div class="line">o  swap panes</div><div class="line">q  show pane numbers</div><div class="line">x  kill pane</div><div class="line">+  break pane into window (e.g. to select text by mouse to copy)</div><div class="line">-  restore pane from window</div><div class="line">⍽  space - toggle between layouts</div><div class="line">&lt;prefix&gt; q (Show pane numbers, when the numbers show up type the key to goto that pane)</div><div class="line">&lt;prefix&gt; &#123; (Move the current pane left)</div><div class="line">&lt;prefix&gt; &#125; (Move the current pane right)</div><div class="line">&lt;prefix&gt; z toggle pane zoom</div></pre></td></tr></table></figure></p>
<p>Misc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">d  detach</div><div class="line">t  big clock</div><div class="line">?  list shortcuts</div><div class="line">:  prompt</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[php中的坑]]></title>
      <url>/2016/09/18/php%E4%B8%AD%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h3 id="路径的坑"><a href="#路径的坑" class="headerlink" title="路径的坑"></a>路径的坑</h3><p>$path = ‘/a/m/../b’;<br>假如 /a 存在<br>不管 /a/m 目录存不存在, mkdir 都能成功<br>但是如果不存在，那么 is_dir, realpath 等函数都会失败</p>
<h3 id="计算的坑"><a href="#计算的坑" class="headerlink" title="计算的坑"></a>计算的坑</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$a = <span class="number">5.1</span>;</div><div class="line">$b = <span class="number">5.1</span>;</div><div class="line">$size = <span class="number">100</span>;</div><div class="line">$t1 = intval($a = floatval($a) * $size);</div><div class="line">$t2 = intval($b = floatval($b) * $size);</div><div class="line">$t = rand($t1, $t2);</div><div class="line"><span class="keyword">echo</span> $t; <span class="comment">// 计算结果是509，而不是510</span></div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[图片资源优化]]></title>
      <url>/2016/09/18/%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<ol>
<li><p>选择合适的图片格式</p>
<p> 原理：对图片格式转换，在画质可以接受的情况下达到更好的压缩比效果<br> 优势：减少图片加载流量，效果比较明显<br> 劣势：服务器和浏览器压力增大，而且服务器需要额外的服务支持，格式转换要考虑浏览器的兼容性</p>
</li>
<li><p>图片大小小于2KB时可使用base64编码代替图片</p>
</li>
<li><p>不同终端对同一个图片需求不一样，可以根据终端加载不同的图片来节省没必要的流量</p>
</li>
<li><p>使用css、svg、canvas或iconfont代替图片</p>
</li>
<li><p>合并图片：</p>
<p> 优势：可以有效的较少请求个数<br> 劣势：生成的图片体积较大，减少请求个数同时也增加了图片大小，不合理拆分将不利于并行加载</p>
</li>
<li><p>图片压缩</p>
<p> 原理：对图片进行无损、有损压缩，转为压缩后图片来实现<br> 优势：减少图片加载流量，效果比较明显<br> 劣势：服务器和浏览器压力增大，而且服务器需要额外的服务支持</p>
</li>
<li><p>使用 CDN</p>
<p> 使用参数自动调节图片质量和大小的，最关键的还是，CDN 的每 G 流量价格普遍比 VPS 按流量付费的价格要低得多！</p>
</li>
<li><p>部署到单独的服务器中</p>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式]]></title>
      <url>/2016/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="3种基本设计模式"><a href="#3种基本设计模式" class="headerlink" title="3种基本设计模式"></a>3种基本设计模式</h3><ol>
<li>工厂模式，工厂方法或者类生成对象，而不是在代码中直接new</li>
<li>单例模式，使某个类的对象仅允许创建一个</li>
<li>注册模式，全局共享和交换对象</li>
</ol>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ol>
<li>在客户端与实体之间建立一个代理对象(proxy),客户端对实体进行操作全部委派给代理对象,隐藏实体的具体实现细节</li>
<li>proxy还可以与业务代码分离,部署到另外的服务器。业务代码中通过RPC来委派任务</li>
</ol>
<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><ol>
<li>在不需要了解内部实现的前提下,遍历一个聚合对象的内部元素</li>
<li>相比于传统的编程模式,迭代器模式可以隐藏遍历元素的所需的操作</li>
</ol>
<h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><ol>
<li>可以动态的添加修改类的功能</li>
<li>一个类提供了一项功能，如果要修改并添加额外的功能，传统的编程模式，需要写一个子类继承它，并重新实现类的方法</li>
<li>使用装饰器模式，仅需在运行时添加一个装饰器对象即可实现，可以实现最大的灵活性</li>
</ol>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ol>
<li>当一个对象状态发生改变时，依赖它的对象全部会受到通知，并自动更新</li>
<li>场景: 一个事件发生后，要执行一连串更新操作。传统的编程方式就是在事件的代码之后直接加入处理逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码</li>
<li>观察者模式实现了低耦合，非侵入的通知和更新机制</li>
</ol>
<h3 id="数据对象映射模式"><a href="#数据对象映射模式" class="headerlink" title="数据对象映射模式"></a>数据对象映射模式</h3><ol>
<li>数据对象映射模式，是将对象和数据存储映射起来，对一个对象的操作会映射为对数据存储的操作</li>
<li>在代码中实现数据对象映射操作模式，我们将实现一个ORM类，将复杂的SQL语句映射成对象属性的操作</li>
<li>结合使用数据对象映射模式、工厂模式、注册模式</li>
</ol>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><ol>
<li>策略模式，将一组特定的行为和算法封装成类，以适应某些特定的上下文环境</li>
<li>实际应用举例，假如一个电商网站系统，针对男性女性用户要各自<br>跳转到不同的商品类目，并且所有广告位展示不同的广告</li>
<li>使用策略模式可以实现IOC，依赖倒置、控制反转</li>
</ol>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><ol>
<li>适配器模式，可以将截然不同的函数接口封装成统一的API</li>
<li>实际应用举例，PHP的数据库操作有mysql,mysqli,pdo，可以用适配器模式统一成一致。类似的场景还有cache适配器，将memcache、redis、file、apc等不同的缓存函数，统一成一致</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[高级 PHP]]></title>
      <url>/2016/09/16/%E9%AB%98%E7%BA%A7PHP/</url>
      <content type="html"><![CDATA[<h2 id="面向对象5原则"><a href="#面向对象5原则" class="headerlink" title="面向对象5原则"></a>面向对象5原则</h2><h3 id="单一职责原则（single-resposibility-principle）"><a href="#单一职责原则（single-resposibility-principle）" class="headerlink" title="单一职责原则（single-resposibility principle）"></a>单一职责原则（single-resposibility principle）</h3><p>其核心思想为：一个类，最好只做一件事，只有一个引起它的变化的原因</p>
<h3 id="开放-封闭原则（The-Open-Close-principle）"><a href="#开放-封闭原则（The-Open-Close-principle）" class="headerlink" title="开放-封闭原则（The Open-Close principle）"></a>开放-封闭原则（The Open-Close principle）</h3><p>其核心思想为：对扩展开放，对修改封闭<br>软件实体（类、模块、函数）应该是可扩展的，但是不可修改的。也就是说，对于扩展是开放的，对于更改是封闭的。怎样可能在不改动模块源代码的情况下去更改它的行为呢？怎样才能在无需对模块进行改动的情况下改变它的功能呢？关键是抽象！因此在进行面向对象设计时要尽量考虑接口封装机制、抽象机制和多态技术。该原则同样适合于非面向对象的方法，是软件工程设计方法的重要原则之一</p>
<h3 id="Liskov-替换原则（liskov-substitution-principle）"><a href="#Liskov-替换原则（liskov-substitution-principle）" class="headerlink" title="Liskov 替换原则（liskov-substitution principle）"></a>Liskov 替换原则（liskov-substitution principle）</h3><p>其核心思想：子类必须能够替换其基类<br>子类应当可以替换父类出现在父类能够出现的任何地方</p>
<h3 id="依赖倒置原则（dependency-inversion-principle）"><a href="#依赖倒置原则（dependency-inversion-principle）" class="headerlink" title="依赖倒置原则（dependency-inversion principle）"></a>依赖倒置原则（dependency-inversion principle）</h3><p>其核心思想：依赖于抽象<br>一个类不应该强依赖另外一个类，每个类对于另外一个类都是可替换的<br>1、高层模块不应该依赖于低层模块，二者都应该依赖于抽象。<br>2、抽象不应该依赖于细节。细节应该依赖于抽象。在进行业务设计时，于特定业务有关的依赖关系应该尽量依赖接口和抽象类，而不是依赖于具体类。具体类只负责相关业务的实现，修改具体类不影响与特定业务有关的依赖关系。</p>
<h3 id="接口分离原则（interface-segregation-principle）"><a href="#接口分离原则（interface-segregation-principle）" class="headerlink" title="接口分离原则（interface-segregation principle）"></a>接口分离原则（interface-segregation principle）</h3><p>其核心思想：使用多个小的专门的接口，而不要使用一个大的总接口<br>具体而言，接口隔离原则体现在：接口应该是内聚的，应该避免“胖”接口。一个类对另外一个类的依赖应该建立在最小的接口上，不要强迫依赖不用的方法，这是一种接口污染</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常是运行中超出了你程序预期的一个东西。</p>
<p>异常就是一个意外，影响了你的程序正常运行。但是如果你用好异常，会让你的程序便于解耦，结构更加清晰明了。</p>
<p>异常对我们控制程序的流程来说非常重要。解耦了程序出现意想不到结果时信息传递的逻辑。每个业务模块发生异常最终通过 Laravel 的方便的异常处理，和友好的展示，并能根据情况来记录错误，这样让我们的程序更加健壮，方便开发和维护。</p>
<h2 id="异常-vs-if-else"><a href="#异常-vs-if-else" class="headerlink" title="异常 vs if_else"></a>异常 vs if_else</h2><p>把这个大函数分成了若干小函数，在这个小函数里面抛异常，大函数里面扑获异常，不用再一个一个的判断小函数的返回值</p>
<p>任何好的语言都应该提供完善的异常支持服务, 来使程序结构更优美可读行更好可维护,而不是靠一大堆的if else来控制程序的流程.</p>
<p>要有上下层的概念，在上下层逻辑处理中,throw 是 Current Role 反馈给 Upper Role，try/catch 是 Current Role 处理 Lower Role 反馈</p>
<h2 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h2><p>把业务逻辑处理部分抽象出来作为一层，这一层在M之上，C之下，名为 Logic</p>
<p>把可以作为公共的服务抽象出来作为一层，这一层不与任何一层耦合，仅提供自身的服务，名为Service<br>小到文件上传，下载，图片处理，储存<br>大到日志，错误处理，邮件，授权，队列，计划任务，支付，验证，加密，短信都可以做出单独的服务</p>
<p>业务变了，C层和M层都不需要改动，只需要改动中间的 Logic 就好了</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在Controller里面，做外部来的请求数据包的合法性校验和部分用户接口权限校验<br>用户相关逻辑放在logic层,做严格的数据合法性校验、业务逻辑约束校验、用户数据权限校验<br>在Model里面做数据的物理合法性校验</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态性是面向对象设计的重要特性，它展现了动态绑定的功能,多态的功能可以让软件在开发和维护时，达到充分的延伸性<br>通俗理解:让具有继承关系的不同类对象，可以对相同名称的成员函数调用，产生不同的反应结果</p>
<h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><h3 id="RBAC（Role-Based-Access-Control）"><a href="#RBAC（Role-Based-Access-Control）" class="headerlink" title="RBAC（Role-Based Access Control）"></a>RBAC（Role-Based Access Control）</h3><p>基于角色的访问控制系统</p>
<ul>
<li>用户表</li>
<li>权限表</li>
<li>角色表</li>
<li>角色权限表</li>
<li>用户角色表</li>
</ul>
<h3 id="ACL（Access-Control-List）"><a href="#ACL（Access-Control-List）" class="headerlink" title="ACL（Access Control List）"></a>ACL（Access Control List）</h3><p>访问控制列表，是前几年盛行的一种权限设计，它的核心在于用户直接和权限挂钩</p>
<p>RBAC的核心是用户只和角色关联，而角色代表对了权限，这样设计的优势在于使得对用户而言，只需角色即可以，而某角色可以拥有各种各样的权限并可继承<br>ACL和RBAC相比缺点在于由于用户和权限直接挂钩，导致在授予时的复杂性，虽然可以利用组来简化这个复杂性，但仍然会导致系统不好理解，而且在取出判断用户是否有该权限时比较的困难，一定程度上影响了效率</p>
<p>ACL实质上是每一个权限接口维持一个权限列表，然后通过判断是否在列表中这个扁平快的方法，进行基础的权限控制，也有其不足：对于多人控制的某些系统，权限需要分为select，update，insert，delete等，人员需要分为管理员，用户，访客，超级管理员，这种情况下再使用ACL反而是增加工作量，增加后期维护难度，同时增加管理难度</p>
<p>在这种情况下，RBAC应运而生RBAC，基于组的权限控制，ACL的升级版</p>
<p>相比于ACL，RBAC的优势是将角色和角色绑定，将用户与权限之间的关联变为权限与角色之间的关联，从而简化了权限管理。当然普通的RBAC也有自身的缺点，就是权限是以角色为载体，单独用户的特殊的权限需要定制</p>
<h2 id="使用-OpCache-提升-PHP-5-5-程序性能"><a href="#使用-OpCache-提升-PHP-5-5-程序性能" class="headerlink" title="使用 OpCache 提升 PHP 5.5+ 程序性能"></a>使用 OpCache 提升 PHP 5.5+ 程序性能</h2><h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>PHP 5.5 以后内建了 OpCache , OpCache 的加速原理是把编译后的 bytecode 存储在内存里面, 避免重复编译 PHP 所造成的资源浪费.</p>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><p>修改 php.ini 文件,在文件最后面加入:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">; 开关打开</div><div class="line">opcache.enable=1</div><div class="line"></div><div class="line">; 可用内存, 酌情而定, 单位 megabytes</div><div class="line">opcache.memory_consumption=256</div><div class="line"></div><div class="line">; 对多缓存文件限制, 命中率不到 100% 的话, 可以试着提高这个值</div><div class="line">opcache.max_accelerated_files=5000</div><div class="line"></div><div class="line">; Opcache 会在一定时间内去检查文件的修改时间, 这里设置检查的时间周期, 默认为 2, 定位为秒</div><div class="line">opcache.revalidate_freq=240</div></pre></td></tr></table></figure></p>
<h3 id="APC-VS-OpCache"><a href="#APC-VS-OpCache" class="headerlink" title="APC VS OpCache"></a>APC VS OpCache</h3><p>APC 是将要被遗弃的项目, PHP 5.5 都不支持, 而在 PHP 5.5 和 5.6 版本, OpCache 是默认内建的, 并且支持 5.2 到 5.4 的安装.</p>
<h3 id="关于composer-lock"><a href="#关于composer-lock" class="headerlink" title="关于composer.lock"></a>关于composer.lock</h3><h2 id="composer-lock"><a href="#composer-lock" class="headerlink" title="composer.lock"></a>composer.lock</h2><h3 id="什么是-composer-lock-文件"><a href="#什么是-composer-lock-文件" class="headerlink" title="什么是 composer.lock 文件?"></a>什么是 composer.lock 文件?</h3><p>composer.lock 文件是当你第一次使用 composer install 或者 执行 composer update 后生成的文件, 此文件里定义了当前项目的代码依赖, 还有最重要的, 这些代码依赖的对应的版本.</p>
<h3 id="composer-lock-文件作用是什么"><a href="#composer-lock-文件作用是什么" class="headerlink" title="composer.lock 文件作用是什么?"></a>composer.lock 文件作用是什么?</h3><p>默认情况下, 当执行 composer install 的时候, Composer 会检查当前项目是否有 composer.lock 文件, 如果有的话, 就会按照此文件去下载代码依赖和其指定的版本.</p>
<h3 id="把-composer-lock-文件加版本的好处有以下"><a href="#把-composer-lock-文件加版本的好处有以下" class="headerlink" title="把 composer.lock 文件加版本的好处有以下:"></a>把 composer.lock 文件加版本的好处有以下:</h3><p>团队开发的时, clone 下代码后, 使用 composer install 可以确保大家使用的依赖包都是同一个版本的, 避免没必要的混乱;<br>在一个现有的项目上开发的时候, 执行 composer update 后, 偶尔会发现刚刚更新了某个代码包把程序整挂了, 这个时候, 如果 composer.lock 是加入版本控制器的话, 直接一个 git diff 命令, 就可以查看到这次更新了那个包, 快速定位到问题的所在;<br>在线上部署的时候, 可以确保线上生成环境下使用所有代码是和开发时候使用的一致, 因为 composer.lock 会确保你在执行 composer install 命令后, 按照文件里面指定的版本去下载代码依赖包;</p>
<h2 id="php自身的性能优化"><a href="#php自身的性能优化" class="headerlink" title="php自身的性能优化"></a>php自身的性能优化</h2><ul>
<li>OPcache</li>
<li>通过 PHP 扩展代替原 PHP 代码中高频逻辑</li>
<li>Runtime优化:HHVM</li>
</ul>
<h3 id="php周边问题"><a href="#php周边问题" class="headerlink" title="php周边问题"></a>php周边问题</h3><ul>
<li>linux 运行环境</li>
<li>文件存储</li>
<li>数据库</li>
<li>缓存</li>
<li>网络</li>
</ul>
<h3 id="Disk-IO优化"><a href="#Disk-IO优化" class="headerlink" title="Disk IO优化"></a>Disk IO优化</h3><p>RAID0: 也称为条带，就是把多个磁盘链接成一个硬盘使用，这个级别IO最好<br>RAID1: 也称为镜像，要求至少有两个磁盘，每组磁盘存储的数据相同<br>RAID5: 也是把多个（最少3个）硬盘合并成1个逻辑盘使用，数据读写时建立就效验信息，并且奇偶效验信息和相对应的数据分别存储于不同的磁盘上。当RAID5的一个磁盘数据发生损坏后，利用剩下的数据和响应的奇偶效验信息去恢复被损坏的数据<br>RAID1+0: 就是RAID1和RAID0的结合。同时具备两个级别的优缺点。一般建议数据库使用这个级别</p>
<h3 id="PHP文件执行阶段"><a href="#PHP文件执行阶段" class="headerlink" title="PHP文件执行阶段"></a>PHP文件执行阶段</h3><p>语法分析-&gt;编译-&gt;运行</p>
<h3 id="配置与设计模式"><a href="#配置与设计模式" class="headerlink" title="配置与设计模式"></a>配置与设计模式</h3><ol>
<li>PHP中使用<code>ArrayAccess</code>实现配置文件的加载</li>
<li>在工厂方法中读取配置，生成可配置化的对象</li>
<li>使用装饰器模式实现权限验证，模板渲染，JSON串化</li>
<li>使用观察者模式实现数据更新事件的一系列更新操作</li>
<li>使用代理模式实现数据库的主从自动切换</li>
</ol>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ul>
<li>模型: 数据和存储的封装</li>
<li>视图: 展示层的封装，如Web系统中的模板文件</li>
<li>控制器: 逻辑层的封装</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[linux相关操作]]></title>
      <url>/2016/09/15/linux/</url>
      <content type="html"><![CDATA[<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>/etc/init.d/iptables stop<br>service iptables stop # 停止服务</p>
<h3 id="查看防火墙信息"><a href="#查看防火墙信息" class="headerlink" title="查看防火墙信息"></a>查看防火墙信息</h3><p>/etc/init.d/iptables status</p>
<h3 id="开放端口-8080"><a href="#开放端口-8080" class="headerlink" title="开放端口:8080"></a>开放端口:8080</h3><p>/sbin/iptables -I INPUT -p tcp –dport 8080 -j ACCEPT</p>
<h3 id="重启防火墙以便改动生效-或者直接重启系统"><a href="#重启防火墙以便改动生效-或者直接重启系统" class="headerlink" title="重启防火墙以便改动生效:(或者直接重启系统)"></a>重启防火墙以便改动生效:(或者直接重启系统)</h3><p>/etc/init.d/iptables restart</p>
<h3 id="将更改进行保存"><a href="#将更改进行保存" class="headerlink" title="将更改进行保存"></a>将更改进行保存</h3><p>/etc/rc.d/init.d/iptables save</p>
<p>另外直接在/etc/sysconfig/iptables中增加一行：<br>-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT</p>
<h2 id="在当前文件夹中查找字串"><a href="#在当前文件夹中查找字串" class="headerlink" title="在当前文件夹中查找字串"></a>在当前文件夹中查找字串</h2><p>grep ‘search_str’ ./ -r</p>
<h2 id="linux-查看系统版本"><a href="#linux-查看系统版本" class="headerlink" title="linux 查看系统版本"></a>linux 查看系统版本</h2><h3 id="RedHat-CentOS"><a href="#RedHat-CentOS" class="headerlink" title="RedHat,CentOS"></a>RedHat,CentOS</h3><p>cat /proc/version<br>cat /etc/redhat-release</p>
<h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><p>cat /etc/issue</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[通过网址自动部署web]]></title>
      <url>/2016/09/15/%E9%80%9A%E8%BF%87%E7%BD%91%E5%9D%80%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2web/</url>
      <content type="html"><![CDATA[<ol>
<li>部署代码至单独的web站点<br> <a href="https://github.com/markomarkovic/simple-php-git-deploy.git" target="_blank" rel="external">https://github.com/markomarkovic/simple-php-git-deploy.git</a></li>
<li>配置<code>www-data</code>用户<br> 改<code>/usr/sbin/nologin</code>=&gt;<code>/bin/bash</code>,且可找到<code>www-data</code>用户的目录:<code>/var/www</code></li>
<li>设置www-data登录密码<br> sudo passwd www-data</li>
<li>设置<code>/var/www</code>归属<br>sudo chown -R www-data:www-data /var/www/</li>
<li>切换到<code>www-data</code>用户<br> su /var/www</li>
<li>在<code>/var/www/.ssh</code>目录中生成ssh key<br> sudo -Hu www-data ssh-keygen -t rsa -C “entimm@gmail.com”</li>
<li>登录git托管网址，把<code>id_rsa.pub</code>公约贴上去</li>
<li>设置webhook</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[很有用的一些技巧]]></title>
      <url>/2016/09/12/%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="在利用-xdebug-和-phpstorm-调试通过终端执行的-PHP-脚本时，在终端执行先语句，即可对该脚本进行调试"><a href="#在利用-xdebug-和-phpstorm-调试通过终端执行的-PHP-脚本时，在终端执行先语句，即可对该脚本进行调试" class="headerlink" title="在利用 xdebug 和 phpstorm 调试通过终端执行的 PHP 脚本时，在终端执行先语句，即可对该脚本进行调试"></a>在利用 xdebug 和 phpstorm 调试通过终端执行的 PHP 脚本时，在终端执行先语句，即可对该脚本进行调试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export XDEBUG_CONFIG = "idekey=PHPSTORM"</div></pre></td></tr></table></figure>
<h3 id="通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码"><a href="#通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码" class="headerlink" title="通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码"></a>通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 先在本机生成 authentication keys，注意不能输入 passphrase</div><div class="line"><span class="meta">#</span> 这里假设 A 是本机，B是远端</div><div class="line">a@A:~&gt; ssh-keygen -t rsa</div><div class="line"><span class="meta"></span></div><div class="line"># 然后登录 B，并建立一个目录 ~/.ssh</div><div class="line">a@A:~&gt; ssh b@B mkdir -p .ssh</div><div class="line"><span class="meta"></span></div><div class="line"># 最后把 A 的 id_rsa.pub 追加到 B 的 ~/.ssh/authorized_keys 中去</div><div class="line">a@A:~&gt; cat ~/.ssh/id_rsa.pub | ssh b@B 'cat &gt;&gt; ~/.ssh/authorized_keys'</div><div class="line"><span class="meta"></span></div><div class="line"># 然后就成功了</div><div class="line">a@A:~&gt; ssh b@B</div></pre></td></tr></table></figure>
<h3 id="使用的-PHP-的内建服务器"><a href="#使用的-PHP-的内建服务器" class="headerlink" title="使用的 PHP 的内建服务器"></a>使用的 PHP 的内建服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -S 主机名或地址@端口号 -t 目录</div></pre></td></tr></table></figure>
<h3 id="svn-检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用"><a href="#svn-检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用" class="headerlink" title="svn 检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用"></a>svn 检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn update --set-depth immediates</div></pre></td></tr></table></figure>
<h3 id="git-新建一个全新的空白分支"><a href="#git-新建一个全新的空白分支" class="headerlink" title="git 新建一个全新的空白分支"></a>git 新建一个全新的空白分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout --orphan 分支名</div><div class="line">git clean -f</div></pre></td></tr></table></figure>
<h3 id="针对手机端-google-chrome-的样式优化（很好看）"><a href="#针对手机端-google-chrome-的样式优化（很好看）" class="headerlink" title="针对手机端 google chrome 的样式优化（很好看）"></a>针对手机端 google chrome 的样式优化（很好看）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"这里是你的 web 主题颜色"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注释技巧"><a href="#注释技巧" class="headerlink" title="注释技巧"></a>注释技巧</h3><ul>
<li><p>TODO<br>说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明。</p>
</li>
<li><p>FIXME<br>说明标识处代码需要修正，甚至代码是错误的，不能工作，需要修复，如何修正会在说明中简略说明。</p>
</li>
<li><p>XXX<br>说明标识处代码虽然实现了功能，但是实现的方法有待商榷，希望将来能改进，要改进的地方会在说明中简略说明。</p>
</li>
</ul>
<h3 id="正则匹配中文"><a href="#正则匹配中文" class="headerlink" title="正则匹配中文"></a>正则匹配中文</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!preg_match(<span class="string">"/^["</span>.chr(<span class="number">0xa1</span>).<span class="string">"-"</span>.chr(<span class="number">0xff</span>).<span class="string">"A-Za-z0-9_]+$/"</span>,$str)) <span class="comment">//GB2312汉字字母数字下划线正则表达式</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(!preg_match(<span class="string">"/^[\x&#123;4e00&#125;-\x&#123;9fa5&#125;A-Za-z0-9_]+$/u"</span>,$str)) <span class="comment">//UTF-8汉字字母数字下划线正则表达式</span></div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[面试问题总结]]></title>
      <url>/2016/09/08/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="php魔术方法-14项"><a href="#php魔术方法-14项" class="headerlink" title="php魔术方法(14项)"></a>php魔术方法(14项)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">__construct() 实例化类时自动调用.</div><div class="line">__destruct() 类对象使用结束时自动调用.</div><div class="line">__set() 在给未定义的属性赋值的时候调用.</div><div class="line">__get() 调用未定义的属性时候调用.</div><div class="line">__isset() 使用isset()或empty()函数时候会调用.</div><div class="line">__unset() 使用unset()时候会调用.</div><div class="line">__sleep() 使用serialize序列化时候调用.</div><div class="line">__wakeup() 使用unserialize反序列化的时候调用.</div><div class="line">__call() 调用一个不存在的方法的时候调用.</div><div class="line">__callStatic()调用一个不存在的静态方法是调用.</div><div class="line">__toString() 把对象转换成字符串的时候会调用.比如 echo.</div><div class="line">__invoke() 当尝试把对象当方法调用时调用.</div><div class="line">__set_state() 当使用var_export()函数时候调用.接受一个数组参数.</div><div class="line">__clone() 当使用clone复制一个对象时候调用.</div></pre></td></tr></table></figure>
<h2 id="HTTP协议中几个状态码的含义"><a href="#HTTP协议中几个状态码的含义" class="headerlink" title="HTTP协议中几个状态码的含义."></a>HTTP协议中几个状态码的含义.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">100 Continue  继续,一般在发送post请求时,已发送了http header之后服务端将返回此信息,表示确认,之后发送具体参数信息</div><div class="line">200 OK   正常返回信息</div><div class="line">201 Created  请求成功并且服务器创建了新的资源</div><div class="line">202 Accepted  服务器已接受请求,但尚未处理</div><div class="line">301 Moved Permanently  请求的网页已永久移动到新位置.</div><div class="line">302 Found  临时性重定向.</div><div class="line">303 See Other  临时性重定向,且总是使用 GET 请求新的 URI.</div><div class="line">304 Not Modified  自从上次请求后,请求的网页未修改过.</div><div class="line">400 Bad Request  服务器无法理解请求的格式,客户端不应当尝试再次使用相同的内容发起请求.</div><div class="line">401 Unauthorized  请求未授权.</div><div class="line">403 Forbidden  禁止访问.</div><div class="line">404 Not Found  找不到如何与 URI 相匹配的资源.</div><div class="line">500 Internal Server Error  最常见的服务器端错误.</div><div class="line">503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）.</div><div class="line"></div><div class="line">100 Continue</div><div class="line">101 Switching Protocols</div><div class="line">200 OK</div><div class="line">201 Created</div><div class="line">202 Accepted</div><div class="line">203 Non-Authoritative Information</div><div class="line">204 No Content</div><div class="line">205 Reset Content</div><div class="line">206 Partial Content</div><div class="line">300 Multiple Choices</div><div class="line">301 Moved Permanently</div><div class="line">302 Found</div><div class="line">303 See Other</div><div class="line">304 Not Modified</div><div class="line">305 Use Proxy</div><div class="line">307 Temporary Redirect</div><div class="line">400 Bad Request</div><div class="line">401 Unauthorized</div><div class="line">402 Payment Required</div><div class="line">403 Forbidden</div><div class="line">404 Not Found</div><div class="line">405 Method Not Allowed</div><div class="line">406 Not Acceptable</div><div class="line">407 Proxy Authentication Required</div><div class="line">408 Request Time-out</div><div class="line">409 Conflict</div><div class="line">410 Gone</div><div class="line">411 Length Required</div><div class="line">412 Precondition Failed</div><div class="line">413 Request Entity Too Large</div><div class="line">414 Request-URI Too Large</div><div class="line">415 Unsupported Media Type</div><div class="line">416 Requested range not satisfiable</div><div class="line">417 Expectation Failed</div><div class="line">500 Internal Server Error</div><div class="line">501 Not Implemented</div><div class="line">502 Bad Gateway</div><div class="line">503 Service Unavailable</div><div class="line">504 Gateway Time-out</div><div class="line">505 HTTP Version not supported</div></pre></td></tr></table></figure>
<h2 id="语句include和require的区别"><a href="#语句include和require的区别" class="headerlink" title="语句include和require的区别"></a>语句include和require的区别</h2><p>在失败的时候：<br><code>include</code> 产生一个 <code>warning</code> ,而 <code>require</code> 直接产生错误中断;</p>
<p><code>require</code> 在运行前载入;<br><code>include</code> 在运行时载入;</p>
<p><code>require_once</code> 和 <code>include_once</code> 可以避免重复包含同一文件.</p>
<p>如果网站框架的设计能避免重复引用的话,推荐用include/require,<br>因为他们比_once速度稍快. </p>
<h2 id="事务的特征-ACID"><a href="#事务的特征-ACID" class="headerlink" title="事务的特征(ACID)"></a>事务的特征(ACID)</h2><ul>
<li>原子性(Atomicity) 构成事务的所有事件要么都完成要么都当什么也没发生过</li>
<li>一致性(Consistency) 事务的结果应该符合预期，不应当超出预期之外导致不合理的结果</li>
<li>隔离性(Isolation) 未完成的事务应当对其它事务不构成影响</li>
<li>持久性(Durability) 事务的结果应当被永久保存下来</li>
</ul>
<h2 id="TCP传输的三次握手"><a href="#TCP传输的三次握手" class="headerlink" title="TCP传输的三次握手"></a>TCP传输的三次握手</h2><p>发送端首先发送一个带<code>SYN</code>标志的数据包给对方。接收端收到后，回传一个带有<code>SYN/ACK</code>标志的数据包以示确认。<br>最后，发送端再回传一个带<code>ACK</code>标志的数据包，代表“握手”结束。<br>若在握手过程中某个阶段莫名中断，<code>TCP</code>协议会再次以相同的顺序发送相同的数据包。</p>
<h2 id="断开一个TCP连接则需要”四次握手”"><a href="#断开一个TCP连接则需要”四次握手”" class="headerlink" title="断开一个TCP连接则需要”四次握手”"></a>断开一个TCP连接则需要”四次握手”</h2><ul>
<li><p>第一次握手：主动关闭方发送一个<code>FIN</code>，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了<br>(当然，在fin包之前发送出去的数据，如果没有收到对应的<code>ack</code>确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。</p>
</li>
<li><p>第二次握手：被动关闭方收到<code>FIN</code>包后，发送一个<code>ACK</code>给对方，确认序号为收到序号<code>+1</code>（与<code>SYN</code>相同，一个<code>FIN</code>占用一个序号）。</p>
</li>
<li><p>第三次握手：被动关闭方发送一个<code>FIN</code>，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</p>
</li>
<li><p>第四次握手：主动关闭方收到<code>FIN</code>后，发送一个<code>ACK</code>给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</p>
</li>
</ul>
<h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><p><code>TCP</code>（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个<code>TCP</code>连接必须要经过三次“对话”才能建立起来</p>
<p><code>UDP</code>（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！<br>UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。</p>
<h2 id="redis支持的数据类型"><a href="#redis支持的数据类型" class="headerlink" title="redis支持的数据类型"></a>redis支持的数据类型</h2><ul>
<li>string</li>
<li>list</li>
<li>set</li>
<li>order set</li>
<li>hash</li>
</ul>
<h2 id="asp-php-jsp的优缺点"><a href="#asp-php-jsp的优缺点" class="headerlink" title="asp,php,jsp的优缺点"></a>asp,php,jsp的优缺点</h2><p>asp: 闭源且不跨平台<br>php: 开源且跨平台，简单快速，作为网站初期的首选<br>jsp: </p>
<h3 id="这个题"><a href="#这个题" class="headerlink" title="这个题"></a>这个题</h3><p>如果 uid 值为 10,2,5,6,3 的记录存在，那么 select uid from user where uid in (10,2,5,6,3);<br>结果顺序为按 uid 升序排列</p>
<h2 id="php之multicurl"><a href="#php之multicurl" class="headerlink" title="php之multicurl"></a>php之multicurl</h2><p>multicurl所有的多线程就是异步、网络io支持并发，http请求支持并发<br>pthread是真正正宗的多线程，也是php唯一的多线程</p>
<h2 id="php优化"><a href="#php优化" class="headerlink" title="php优化"></a>php优化</h2><ul>
<li>CPU 密集部分用 C++ 或者 C 写 PHP 的扩展模块。</li>
<li>OPcache 通过将PHP脚本预编译的字节码存储到共享内存中来提升PHP的性能,省去了每次加载和解析PHP脚本的开销。</li>
</ul>
<h2 id="php版本的差异"><a href="#php版本的差异" class="headerlink" title="php版本的差异"></a>php版本的差异</h2><ul>
<li>在 PHP 5.5 之前，empty() 仅支持变量；5.5以后支持表达式了</li>
</ul>
<h2 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">错误的写法</div><div class="line"><span class="keyword">select</span> uid <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> uid <span class="keyword">where</span> <span class="keyword">count</span>(*) &gt; <span class="number">60</span>;</div><div class="line">`where` 子句后面不能跟聚合条件</div><div class="line">`group by` 应该写在 `where` 子句后面</div><div class="line">这种情况应该用 `having`</div><div class="line"></div><div class="line">正确的写法</div><div class="line"><span class="keyword">select</span> uid <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> uid <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">60</span>;</div></pre></td></tr></table></figure>
<h2 id="get-vs-post"><a href="#get-vs-post" class="headerlink" title="get vs post"></a>get vs post</h2><ul>
<li>get 数据量长度受限制，这主要是受 url 长度限制</li>
<li>安全</li>
<li>get限制表单中数据集的范围为asc2码，而post可以支持整个iso10646字符集</li>
</ul>
<h2 id="echo-print-print-r-的区别"><a href="#echo-print-print-r-的区别" class="headerlink" title="echo(),print(),print_r()的区别"></a>echo(),print(),print_r()的区别</h2><p>echo是语言结构，没有返回值<br>print是函数，有返回值<br>print_r是函数，递归调用，用于输出数组对象</p>
<h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><p>方法一：php函数跳转,缺点，header头之前不能有输出，跳转后的程序继续执行，可用exit中断执行后面的程序。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Header(<span class="string">"Location: 网址"</span>);     <span class="comment">//直接跳转</span></div><div class="line">header(<span class="string">"refresh:3;url=网址"</span>); <span class="comment">//三秒后跳转</span></div></pre></td></tr></table></figure></p>
<p>方法二：利用meta<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;meta http-equiv=refresh content='0; url=网址'&gt;"</span>;</div></pre></td></tr></table></figure></p>
<h2 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loaddir1</span><span class="params">($dirname)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>($handle=opendir($dirname))&#123;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">false</span>!==($files=readdir($handle)))&#123;</div><div class="line">            <span class="keyword">if</span>($files!=<span class="string">"."</span>&amp;&amp;$files!=<span class="string">".."</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(is_file($dirname.<span class="string">'/'</span>.$files))&#123;</div><div class="line">                    <span class="keyword">echo</span> $dirname.<span class="string">'/'</span>.$files.<span class="string">'&lt;br&gt;'</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(is_dir($dirname.<span class="string">"/"</span>.$files))&#123;</div><div class="line">                    loaddir($dirname.<span class="string">"/"</span>.$files);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loaddir2</span><span class="params">($path)</span></span></div><div class="line">&#123;</div><div class="line">    $files = <span class="keyword">array</span>();</div><div class="line">    <span class="keyword">if</span>($handle = opendir($path))&#123;</div><div class="line">        <span class="keyword">while</span>(($f = readdir($handle)) !== <span class="keyword">false</span>)&#123;</div><div class="line">            $p = $path .<span class="string">'/'</span>. $f;</div><div class="line">            <span class="keyword">if</span>($f == <span class="string">'..'</span> || $f == <span class="string">'.'</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(is_file($p))&#123;</div><div class="line">                $files[] = $f;</div><div class="line">            &#125;<span class="keyword">elseif</span>(is_dir($p))&#123;</div><div class="line">                $files[$f] = loaddir2($p);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        closedir($handle);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $files;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="限制上传文件大小"><a href="#限制上传文件大小" class="headerlink" title="限制上传文件大小"></a>限制上传文件大小</h2><ul>
<li>客户端的隐藏域MAX_FILE_SIZE的数值（可以被绕开）。</li>
<li>服务器端的upload_max_filesize，post_max_size和memory_limit。这几项不能够用脚本来设置。</li>
</ul>
<h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>a.删除没有任何订单客户:DELETE FROM customerinfo WHERE customerid NOT in (SELECT customerid FROM orderinfo)<br>b.提取所有没有订单客户:SELECT <em> FROM customerinfo WHERE customerid NOT in (SELECT customerid FROM orderinfo)<br>c.提高b的速度优化:SELECT </em> FROM customerinfo LEFT JOIN orderid ON customerinfo.customerid=orderinfo.customerid<br>WHERE orderinfo.customerid IS NULL</p>
<h2 id="fopen打开文件"><a href="#fopen打开文件" class="headerlink" title="fopen打开文件"></a>fopen打开文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$readcontents = fopen(<span class="string">'http://www.phpres.com/index.html'</span>, <span class="string">'rb'</span>);</div><div class="line">$contents = stream_get_contents($readcontents);</div><div class="line">fclose($readcontents);</div><div class="line"><span class="keyword">echo</span> $contents;</div></pre></td></tr></table></figure>
<h2 id="char-vs-varchar"><a href="#char-vs-varchar" class="headerlink" title="char vs varchar"></a>char vs varchar</h2><p>Varchar是变长，节省存储空间，char是固定长度。查找效率要char型快，因为varchar是非定长，必须先查找长度，然后进行数据的提取，比char定长类型多了一个步骤，所以效率低一些</p>
<h2 id="这些这些协议的全称和中文解释（都是工作在应用层）"><a href="#这些这些协议的全称和中文解释（都是工作在应用层）" class="headerlink" title="这些这些协议的全称和中文解释（都是工作在应用层）"></a>这些这些协议的全称和中文解释（都是工作在应用层）</h2><p>SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议<br>POP3 (Post Office Protocol 3) 邮局协议第3版<br>HTTP (Hypertext Transfer Protocol) 超文本传输协议<br>FTP   (File Transfer Protocol）文件传输协议<br>DNS   (Domain Name System and Domain Name Service protocol) 域名系统（服务）协议</p>
<h2 id="OSI七层网络模型的名称，由下到上"><a href="#OSI七层网络模型的名称，由下到上" class="headerlink" title="OSI七层网络模型的名称，由下到上"></a>OSI七层网络模型的名称，由下到上</h2><p>物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p>
<h2 id="find命令和grep命令的区别"><a href="#find命令和grep命令的区别" class="headerlink" title="find命令和grep命令的区别"></a>find命令和grep命令的区别</h2><p>find：按照文件名查找<br>grep：按照文件内容查找</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[面试可能会被问到的问题]]></title>
      <url>/2016/09/08/%E9%9D%A2%E8%AF%95%E5%8F%AF%E8%83%BD%E4%BC%9A%E9%97%AE%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="抽象-vs-接口"><a href="#抽象-vs-接口" class="headerlink" title="抽象 vs 接口"></a>抽象 vs 接口</h3><p>抽象类是一种不能被实例化的类，只能作为其他类的父类来使用。<br>抽象类是通过关键字 abstract 来声明的。<br>抽象类与普通类相似，都包含成员变量和成员方法，两者的区别在于，抽象类中至少要包含一个抽象方法，<br>抽象方法没有方法体，该方法天生就是要被子类重写的。<br>抽象方法的格式为：abstract function abstractMethod();</p>
<p>因为php中只支持单继承，如果想实现多重继承，就要使用接口。也就是说子类可以实现多个接口。<br>接口是通过interface关键字来声明的，接口中的成员常量和方法都是public的，方法可以不写关键字public，<br>接口中的方法也是没有方法体。接口中的方法也天生就是要被子类实现的。</p>
<p>抽象类和接口实现的功能十分相似，最大的不同是接口能实现多继承。在应用中选择抽象类还是接口要看具体实现。<br>子类继承抽象类使用extends，子类实现接口使用implements。</p>
<h3 id="文件上传注意事项"><a href="#文件上传注意事项" class="headerlink" title="文件上传注意事项"></a>文件上传注意事项</h3><ol>
<li>首现要在php.ini中开启文件上传；</li>
<li>在php.ini中有一个允许上传的最大值，默认是2MB。必要的时候可以更改；</li>
<li>上传表单一定要记住在form标签中写上enctype=”multipart/form-data”；</li>
</ol>
<h3 id="cookie作用"><a href="#cookie作用" class="headerlink" title="cookie作用"></a>cookie作用</h3><ol>
<li>记录用户访问的部分信息</li>
<li>在页面间传递变量</li>
</ol>
<h3 id="php-的数据类型"><a href="#php-的数据类型" class="headerlink" title="php 的数据类型"></a>php 的数据类型</h3><p>php支持8种原始数据类型。<br>包括：<br>    四种标量类型（布尔型boolean，整型interger，浮点型float/double , 字符串string）<br>    两种复合类型(数组array ， 对象object)<br>    两种特殊类型（资源resource，NULL）</p>
<h3 id="页面乱码处理"><a href="#页面乱码处理" class="headerlink" title="页面乱码处理"></a>页面乱码处理</h3><ol>
<li>查看当前页面meta标签的charset</li>
<li>header函数指定的charset</li>
<li>数据库的字符集</li>
</ol>
<h3 id="ajax缺点"><a href="#ajax缺点" class="headerlink" title="ajax缺点"></a>ajax缺点</h3><p>不利于seo推广优化，因为搜索引擎无法直接访问到ajax请求的内容</p>
<h3 id="字符串转整型"><a href="#字符串转整型" class="headerlink" title="字符串转整型"></a>字符串转整型</h3><ol>
<li>强制类型转换</li>
<li>settype(字符串变量,整型)</li>
<li>intval(字符串变量)</li>
</ol>
<h3 id="处理正则表达式"><a href="#处理正则表达式" class="headerlink" title="处理正则表达式"></a>处理正则表达式</h3><pre><code>preg_quote -- 转义正则表达式字符 正则表达式的特殊字符包括：. \ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -
preg_replace -- 执行正则表达式的搜索和替换
preg_replace_callback -- 用回调函数执行正则表达式的搜索和替换
preg_split -- 用正则表达式分割字符串
</code></pre><h3 id="字符串的常用函数"><a href="#字符串的常用函数" class="headerlink" title="字符串的常用函数"></a>字符串的常用函数</h3><pre><code>trim();--去除空格
strlen();--字符串长度
substr();--截取字符串
str_replace();--替换字符串函数
substr_replace() -- 对指定字符串中的部分字符串进行替换
strstr();--检索字符串函数
explode();--分割字符串函数
strcasecmp();--比较字符串函数
</code></pre><h3 id="进程-线程"><a href="#进程-线程" class="headerlink" title="进程 线程"></a>进程 线程</h3><p>进程和线程都是一个时间段的描述，是CPU工作时间段的描述，不过是颗粒大小不同<br>进程的颗粒度太大，每次都要有上下文环境的调入，保存，调出。<br>线程是共享了进程的上下文环境，的更为细小的CPU时间段</p>
<h2 id="留意一下"><a href="#留意一下" class="headerlink" title="留意一下"></a>留意一下</h2><ul>
<li>count 可以递归计算数组</li>
<li>echo可以一次输出多个值，中间用逗号隔开。而print一次只能输出一个值</li>
<li>include 有返回值,require 没有</li>
<li>当对一个不可见的对象属性使用empty() 时，__isset()方法如果存在的话，它将会被调用</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Cgi、FastCgi 与 PHP-FPM]]></title>
      <url>/2016/09/08/FastCgi%20%E4%B8%8E%20PHP-FPM%20%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h2 id="CGI-的作用"><a href="#CGI-的作用" class="headerlink" title="CGI 的作用"></a>CGI 的作用</h2><p>web server（比如说 nginx）只是内容的分发者。</p>
<ul>
<li>如果请求 <code>/index.html</code>，那么 web server 会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。</li>
<li>如果现在请求的是 <code>/index.php</code>，根据配置文件，nginx 知道这个不是静态文件，需要去找 PHP 解析器来处理，那么他会把这个请求简单处理后交给 PHP 解析器。Nginx 会传哪些数据给 PHP 解析器呢？url、查询字符串、POST 数据、HTTP header等等，CGI就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。</li>
</ul>
<p>当 web server 收到 <code>/index.php</code> 这个请求后，会启动对应的 CGI 程序，这里就是 PHP 的解析器。接下来 PHP 解析器会解析 php.ini 文件，初始化执行环境，然后处理请求，再以规定 CGI 规定的格式返回处理后的结果，退出进程。web server 再把结果返回给浏览器。</p>
<h2 id="fastCgi-是什么"><a href="#fastCgi-是什么" class="headerlink" title="fastCgi 是什么"></a>fastCgi 是什么</h2><p>fastCgi 是用来提高 CGI 程序性能的。</p>
<p>那么 CGI 程序的性能问题在哪呢？”PHP 解析器会解析 php.ini 文件，初始化执行环境”，就是这里了。标准的 CGI 对每个请求都会执行这些步骤，所以处理每个请求的时间会比较长。</p>
<p>那么 fastCgi 是怎么做的呢？首先，fastCgi 会先启一个 master，解析配置文件，初始化执行环境，然后再启动多个 worker。当请求过来时，master 会传递给一个 worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当 worker 不够用时，master 可以根据配置预先启动几个 worker 等着；当然空闲 worker 太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是 fastCgi 对进程的管理。</p>
<h2 id="PHP-FPM-是什么"><a href="#PHP-FPM-是什么" class="headerlink" title="PHP-FPM 是什么"></a>PHP-FPM 是什么</h2><p>PHP-FPM 是一个实现了 FastCgi 的程序，被 PHP 官方收录。</p>
<p>PHP 的解释器是 php-cgi，它只是个 CGI 程序，只能解析请求，返回结果，不会进程管理。所以就出现了一些能够调度 php-cgi 进程的程序</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql知识]]></title>
      <url>/2016/09/08/mysql%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="MySQL存储引擎-MyISAM-和-InnoDB-的区别"><a href="#MySQL存储引擎-MyISAM-和-InnoDB-的区别" class="headerlink" title="MySQL存储引擎 MyISAM 和 InnoDB 的区别"></a>MySQL存储引擎 MyISAM 和 InnoDB 的区别</h2><ul>
<li>MyISAM类型不支持事务处理等高级处理,而InnoDB类型支持.</li>
<li>InnoDB不支持FULLTEXT类型的索引.</li>
<li>InnoDB中不保存表的具体行数,但是MyISAM只要简单的读出保存好的行数即可.</li>
<li>MyISAM支持表锁，只有读读之间是并发的，写写之间和读写之间（读和插入之间是可以并发的，去设置concurrent_insert参数，定期执行表优化操作，更新操作就没有办法了）是串行的，所以写起来慢；InnoDB支持行锁，这个一般指的是sql用到索引的时候，行锁是加在索引上的，不是加在数据记录上的，如果sql没有用到索引，仍然会锁定表，普通的select是不需要锁的</li>
<li>MyISAM索引btree上的节点是一个指向数据物理位置的指针，所以查找起来很快；nnodb索引节点存的则是数据的主键，所以需要根据主键二次查找</li>
<li>因为在使用索引的时候用的是行锁，锁的粒度小，竞争相同锁的情况就少，就增加了并发处理，所以并发读写的效率还是很优秀的，问题在于索引查询后的根据主键的二次查找导致效率低</li>
</ul>
<h2 id="数据库设计范式"><a href="#数据库设计范式" class="headerlink" title="数据库设计范式"></a>数据库设计范式</h2><p>第一范式:每个属性都不可再分解<br>第二范式:每个属性都依赖与主键<br>第三范式:除了主键外，其他属性都没有依赖关系</p>
<h2 id="MYSQL-性能优化"><a href="#MYSQL-性能优化" class="headerlink" title="MYSQL 性能优化"></a>MYSQL 性能优化</h2><ul>
<li>选择合适的存储引擎,设计良好的数据库结构，选择合适的表字段数据类型,允许部分数据冗余（空间换时间）</li>
<li>适当的添加索引</li>
<li>优化 sql 语句，不同的语句，根据你选择的引擎、表中数据的分布情况、索引情况、数据库优化策略、查询中的锁策略等因素，最终查询的效率相差很大；优化要从整体去考虑，有时你优化一条语句后，其它查询反而效率被降低了，所以要取一个平衡点</li>
<li>Cache（缓存数据）<br>  查询：查询之前，要在Memcached或Redis中查找结果，如果找到，则返回它；如果未找到，则到数据库服务器上执行查询，并将结果返回给Memcached或Redis<br>  插入：先把数据插入数据库，在内存中受此影响的数据库将变成无效</li>
<li>读写分离</li>
<li>分布数据（分割数据）找规律分表,减少单表中的数据量提高查询速度</li>
</ul>
<h2 id="关于缓存"><a href="#关于缓存" class="headerlink" title="关于缓存"></a>关于缓存</h2><ul>
<li>一般的首页不应当有查询，对首页生成静态页面</li>
<li>不经常改动的页面,生成静态页面.</li>
</ul>
<h2 id="切分"><a href="#切分" class="headerlink" title="切分"></a>切分</h2><ul>
<li>垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的</li>
<li>切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多</li>
<li>数据是否存在明显的冷热（考虑旧数据归档）</li>
</ul>
<h2 id="MySQL数据库基本的三个优化法则"><a href="#MySQL数据库基本的三个优化法则" class="headerlink" title="MySQL数据库基本的三个优化法则"></a>MySQL数据库基本的三个优化法则</h2><ul>
<li>系统服务优化，把MySQL的key_buffer、cache_buffer、query_cache等参数提高<br>（sort_buffer_size,read_buffer_size,read_rnd_buffer_size,join_buffer_size ）</li>
<li>优化SQL语句，减少Ditinct、Group、Join等等语句的操作</li>
<li>给所有经常查询的字段增加适当的索引</li>
</ul>
<h2 id="mysql要注意的地方及技巧"><a href="#mysql要注意的地方及技巧" class="headerlink" title="mysql要注意的地方及技巧"></a>mysql要注意的地方及技巧</h2><ul>
<li>需要<code>utf8mb4</code>才能显示<code>emoji</code> </li>
<li>join查询不一定优于子查询</li>
<li>选取最适用的字段属性,尽可能减少定义字段长度,尽量把字段设置NOT NULL</li>
<li>GUID替代AutoIncrement作为主键的唯一性保障</li>
<li>把update和访问频繁的数据cache在内存中</li>
<li>使用队列，控制消费速度</li>
<li>只存储英文字母时，该字段可不需要采用utf8, 可选择字符长度更小的字符集</li>
<li>使用mysql自带的query cache，对应用基本完全透明。但会受限于本机。而且只缓存查询结果，mc和redis可以缓存一些加工后的数据</li>
</ul>
<h2 id="不好操作"><a href="#不好操作" class="headerlink" title="不好操作"></a>不好操作</h2><ul>
<li>主主复制（主键值分配、数据冲突）</li>
<li>水平分表（如果将来一定会到这个规模，又可能用到，建议越早做越好）</li>
</ul>
<h2 id="关于主从复制、读写分离"><a href="#关于主从复制、读写分离" class="headerlink" title="关于主从复制、读写分离"></a>关于主从复制、读写分离</h2><ul>
<li>增加了数据的冗余备份，提高了可用性</li>
<li>扩展读</li>
<li>从库可配置myisam引擎及其他针对性设置，提升查询性能以及节约系统开销</li>
<li>主库向从库发送binlog是异步的，从库恢复数据也是异步的</li>
<li>当节点比较多时，使用多级缓存，减轻主的压力</li>
<li>读产生了延迟，牺牲了一致性</li>
</ul>
<h2 id="关于数据库外键及其他高级特性-触发器、存储过程等"><a href="#关于数据库外键及其他高级特性-触发器、存储过程等" class="headerlink" title="关于数据库外键及其他高级特性(触发器、存储过程等)"></a>关于数据库外键及其他高级特性(触发器、存储过程等)</h2><ul>
<li>增加数据库负担(外键作用：约束数据库的一致性)</li>
<li>用户量大，并发度高时数据库很容易成为性能瓶颈</li>
<li>数据库不容易水平伸缩，应用服务器能轻松地水平伸缩</li>
<li>将这些特性分离到程序中作为数据逻辑</li>
<li>不经常改的常数,可使用外键,来记录数据关系.而那些经常更改的,使用更高层的逻辑来记录数据关系.</li>
</ul>
<h2 id="mysql-vs-oracle"><a href="#mysql-vs-oracle" class="headerlink" title="mysql vs oracle"></a>mysql vs oracle</h2><ul>
<li>Oracle目前还是最先进的关系数据库，其传统使用方法：存储使用EMC阵列（容量大，数据安全），IBM服务器，即IOE组合，这三个组合很强大（高可用，高性能），但是也高价格</li>
<li>MySQL的优势:<ul>
<li>省去了巨额license费用</li>
<li>MySQL代码开源，可以根据业务特点定制和优化</li>
<li>将MySQL运行在普通PC上，硬件费用大大降低</li>
</ul>
</li>
</ul>
<h3 id="mysql中int、bigint、smallint-和-tinyint的区别与长度的含义"><a href="#mysql中int、bigint、smallint-和-tinyint的区别与长度的含义" class="headerlink" title="mysql中int、bigint、smallint 和 tinyint的区别与长度的含义"></a>mysql中int、bigint、smallint 和 tinyint的区别与长度的含义</h3><ul>
<li><p>bigint<br>从 -2^63 (-9223372036854775808) 到 2^63-1 (9223372036854775807) 的整型数据（所有数字）。存储大小为 8 个字节。<br>P.S. bigint已经有长度了，在mysql建表中的length，只是用于显示的位数</p>
</li>
<li><p>int<br>从 -2^31 (-2,147,483,648) 到 2^31 – 1 (2,147,483,647) 的整型数据（所有数字）。存储大小为 4 个字节。int 的 SQL-92 同义字为 integer。</p>
</li>
<li><p>smallint<br>从 -2^15 (-32,768) 到 2^15 – 1 (32,767) 的整型数据。存储大小为 2 个字节。</p>
</li>
<li><p>tinyint<br>从 0 到 255 的整型数据。存储大小为 1 字节。<br>int(M) 在 integer 数据类型中，M 表示最大显示宽度。在 int(M) 中，M 的值跟 int(M) 所占多少存储空间并无任何关系。和数字位数也无关系 int(3)、int(4)、int(8) 在磁盘上都是占用 4 btyes 的存储空间。<br>TinyINT(M) always has a range from -128..+127 signed or 0..255 unsigned. M is the display width.</p>
</li>
</ul>
<h3 id="Importance-of-varchar-length-in-MySQL-table"><a href="#Importance-of-varchar-length-in-MySQL-table" class="headerlink" title="Importance of varchar length in MySQL table"></a>Importance of varchar length in MySQL table</h3><p>There’s one possible performance impact: in MySQL, temporary tables and MEMORY tables store a VARCHAR column as a fixed-length column, padded out to its maximum length. If you design VARCHAR columns much larger than the greatest size you need, you will consume more memory than you have to. This affects cache efficiency, sorting speed, etc.</p>
<p>This is the var (variable) in varchar: you only store what you enter (and an extra 2 bytes to store length upto 65535)</p>
<p>To be clear: Storing a string 100 characters in a varchar(200) field will take 101 bytes. Storing a string of 100 characters in a varchar(256) field will take 102 bytes. This is why you see varchar(255) so frequently; 255 characters is the longest string you can store in MySQL’s varchar type with only one byte of overhead. Anything larger requires two bytes of overhead. </p>
<p>varchar(N) N is the number of characters, so varchar(255) charset utf8mb4 would actually use up to 1021 bytes</p>
<p>Specifically, when doing sorting, larger column do take up more space, so if that hurts performance, then you need to worry about it and make them smaller. But if you only ever select 1 row from that table, then you can just make them all 255 and it won’t matter.</p>
<p><a href="https://dba.stackexchange.com/questions/76469/mysql-varchar-length-and-performance" target="_blank" rel="external">看看这个</a></p>
<h2 id="选择合适的-MySQL-日期时间类型来存储你的时间"><a href="#选择合适的-MySQL-日期时间类型来存储你的时间" class="headerlink" title="选择合适的 MySQL 日期时间类型来存储你的时间"></a>选择合适的 MySQL 日期时间类型来存储你的时间</h2><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>timestamp（1970-2038）<br>datetime （1000-9999）<br>int 是从1970年开始累加的，但是 int 支持的范围是 1901-12-13 到 2038-01-19 03:14:07，如果需要更大的范围需要设置为 bigInt。但是这个时间不包含毫秒，如果需要毫秒，还需要定义为浮点数。<br>datetime 和 timestamp 原生自带6位的微秒。</p>
<h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><p>timestamp 是自带时区转换的,可记录经常变化的更新/创建/发布/日志时间/购买时间/登录时间/注册时间等，并且是近来的时间，够用，时区自动处理，比如说做海外购或者业务可能拓展到海外<br>datetime 记录固定时间如服务器执行计划任务时间/健身锻炼计划时间等，在任何时区都是需要一个固定的时间要做某个事情。超出 timestamp 的时间，如果需要时区必须记得时区处理</p>
<h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>状态值：tinyint；<br>有限范围值：根据范围选择tinyint(不要用enum)，smallint，mediumint ,int, bigint, float, double；<br>从技术上尽可能将字段设置成NOT NULL，但如果业务上要求该字段可以为NULL，而且如果该字段不会被建立索引，则保持NULL，否则可以用’’(空字符串)代替；</p>
<h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>mysql5.6.4支持innodb的全文搜索</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[关于高并发的处理]]></title>
      <url>/2016/09/05/%E5%85%B3%E4%BA%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9A%84%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>用同步队列，就可以实现。库存比如是1000，那就存1000个随机数到队列中，拿到随机数的人去换取真实的商品。这样数据库的压力都小。最多更新1000次。队列可以系统加载时创建，也可以做为持久化保存在文件中。</p>
<h2 id="关于库存和秒杀的解决方案"><a href="#关于库存和秒杀的解决方案" class="headerlink" title="关于库存和秒杀的解决方案"></a>关于库存和秒杀的解决方案</h2><ol>
<li>用额外的单进程处理一个队列，下单请求放到队列里，一个个处理，就不会有并发的问题了，但是要额外的后台进程以及延迟问题，不予考虑。</li>
<li>根据update结果来判断，我们可以加一个判断条件update … where 库存&gt;0，如果返回false，则说明库存不足，并回滚事务。</li>
<li>借助文件排他锁，在处理下单请求的时候，用flock锁定一个文件，如果锁定失败说明有其他订单正在处理，此时要么等待要么直接提示用户”服务器繁忙”</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//阻塞(等待)模式</span></div><div class="line">$fp = fopen(<span class="string">"lock.txt"</span>, <span class="string">"w+"</span>);</div><div class="line"><span class="keyword">if</span>(flock($fp,LOCK_EX))</div><div class="line">&#123;</div><div class="line">    <span class="comment">//..处理订单</span></div><div class="line">    flock($fp,LOCK_UN);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fclose($fp);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//非阻塞模式</span></div><div class="line">$fp = fopen(<span class="string">"lock.txt"</span>, <span class="string">"w+"</span>);</div><div class="line"><span class="keyword">if</span>(flock($fp,LOCK_EX | LOCK_NB))</div><div class="line">&#123;</div><div class="line">    <span class="comment">//..处理订单</span></div><div class="line">    flock($fp,LOCK_UN);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"系统繁忙，请稍后再试"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fclose($fp);</div><div class="line"></div><div class="line"><span class="comment">//采用哪种方式，看并发数量吧。</span></div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[docker 技巧]]></title>
      <url>/2016/09/05/docker%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h2 id="删除-none-tag-镜像"><a href="#删除-none-tag-镜像" class="headerlink" title="删除 none tag 镜像"></a>删除 none tag 镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi $(docker images | grep "^&lt;none&gt;" | awk '&#123;print $3&#125;')</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi $(docker images -q --filter "dangling=true")</div></pre></td></tr></table></figure>
<h2 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images -q | xargs docker rmi</div></pre></td></tr></table></figure>
<h2 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -q -a | xargs docker rm</div></pre></td></tr></table></figure>
<h2 id="删除所有停止运行的容器"><a href="#删除所有停止运行的容器" class="headerlink" title="删除所有停止运行的容器"></a>删除所有停止运行的容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm $( docker ps -q -f status=exited)</div></pre></td></tr></table></figure>
<h2 id="删除所有-dangling-unused-的镜像"><a href="#删除所有-dangling-unused-的镜像" class="headerlink" title="删除所有 dangling (unused) 的镜像"></a>删除所有 dangling (unused) 的镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi $( docker images -q -f dangling=true)</div></pre></td></tr></table></figure>
<h2 id="xargs-with-–no-run-if-empty-is-even-better-as-it-does-cleanly-handle-the-case-when-there-is-nothing-to-be-removed"><a href="#xargs-with-–no-run-if-empty-is-even-better-as-it-does-cleanly-handle-the-case-when-there-is-nothing-to-be-removed" class="headerlink" title="xargs with –no-run-if-empty is even better as it does cleanly handle the case when there is nothing to be removed."></a>xargs with –no-run-if-empty is even better as it does cleanly handle the case when there is nothing to be removed.</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Delete all stopped containers</div><div class="line">docker ps -q -f status=exited | xargs --no-run-if-empty docker rm</div><div class="line"><span class="meta">#</span> Delete all dangling (unused) images</div><div class="line">docker images -q -f dangling=true | xargs --no-run-if-empty docker rmi</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[php function]]></title>
      <url>/2016/09/05/php-function/</url>
      <content type="html"><![CDATA[<h2 id="url、路径"><a href="#url、路径" class="headerlink" title="url、路径"></a>url、路径</h2><h3 id="parse-url"><a href="#parse-url" class="headerlink" title="parse_url"></a>parse_url</h3><p>mixed parse_url ( string $url [, int $component = -1 ] )</p>
<p>解析 URL，返回其组成部分</p>
<p>本函数不是用来验证给定 URL 的合法性的<br>本函数不能用于相对 URL<br>对严重不合格的 URL，parse_url() 可能会返回 FALSE</p>
<h3 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str"></a>parse_str</h3><p>void parse_str ( string $str [, array &amp;$arr ] )</p>
<p>将字符串解析成多个变量</p>
<p>获取当前的 QUERY_STRING，你可以使用 $_SERVER[‘QUERY_STRING’] 变量<br>magic_quotes_gpc 影响到了 parse_str() 这个函数的输出，和 PHP 用于填充 $_GET、 $_POST 及其他变量的机制一致</p>
<h3 id="pathinfo"><a href="#pathinfo" class="headerlink" title="pathinfo"></a>pathinfo</h3><p>mixed pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] )</p>
<p>返回一个关联数组包含有 path 的信息</p>
<h3 id="realpath"><a href="#realpath" class="headerlink" title="realpath"></a>realpath</h3><p>string realpath ( string $path )</p>
<p>返回规范化的绝对路径名</p>
<p>realpath() 失败时返回 FALSE，比如说文件不存在的话</p>
<h3 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h3><p>string basename ( string $path [, string $suffix ] )</p>
<p>返回路径中的文件名部分</p>
<h3 id="dirname"><a href="#dirname" class="headerlink" title="dirname"></a>dirname</h3><p>string dirname ( string $path )</p>
<p>返回路径中的目录部分,返回 path 的父目录</p>
<p>如果在 path 中没有斜线，则返回一个点（’.’），表示当前目录</p>
<h3 id="http-build-query"><a href="#http-build-query" class="headerlink" title="http_build_query"></a>http_build_query</h3><p>string http_build_query ( mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]] )</p>
<p>生成 URL-encode 之后的请求字符串</p>
<h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><h3 id="array-walk"><a href="#array-walk" class="headerlink" title="array_walk"></a>array_walk</h3><p>bool array_walk ( array &amp;$array , callable $funcname [, mixed $userdata = NULL ] )</p>
<p>使用用户自定义函数对数组中的每个元素做回调处理</p>
<p>如果 funcname 需要直接作用于数组中的值，则给 funcname 的第一个参数指定为引用。这样任何对这些单元的改变也将会改变原始数组本身<br>成功时返回 TRUE， 或者在失败时返回 FALSE</p>
<h3 id="array-map"><a href="#array-map" class="headerlink" title="array_map"></a>array_map</h3><p>array array_map ( callable $callback , array $arr1 [, array $… ] )</p>
<p>将回调函数作用到给定数组的单元上</p>
<p>callback 接受的参数数目应该和传递给 array_map() 函数的数组数目一致</p>
<h3 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter"></a>array_filter</h3><p>array array_filter ( array $array [, callable $callback [, int $flag = 0 ]] )</p>
<p>用回调函数过滤数组中的单元</p>
<h3 id="array-pad"><a href="#array-pad" class="headerlink" title="array_pad"></a>array_pad</h3><p>array array_pad ( array $input , int $pad_size , mixed $pad_value )</p>
<p>用值将数组填补到指定长度</p>
<p>如果 pad_size 为正，则填补到数组的右侧，如果为负则从左侧开始填补。 如果 pad_size 的绝对值小于或等于 input 数组的长度则没有任何填补</p>
<h3 id="array-fill"><a href="#array-fill" class="headerlink" title="array_fill"></a>array_fill</h3><p>array array_fill ( int $start_index , int $num , mixed $value )</p>
<p>用 value 参数的值将一个数组填充 num 个条目，键名由 start_index 参数指定的开始。</p>
<h3 id="array-chunk"><a href="#array-chunk" class="headerlink" title="array_chunk"></a>array_chunk</h3><p>array array_chunk ( array $input , int $size [, bool $preserve_keys = false ] )</p>
<p>将一个数组分割成多个</p>
<p>如果 size 小于 1，会抛出一个 E_WARNING 错误并返回 NULL。</p>
<h3 id="array-shift"><a href="#array-shift" class="headerlink" title="array_shift"></a>array_shift</h3><p>mixed array_shift ( array &amp;$array )</p>
<p>将数组开头的单元移出数组</p>
<p>返回移出的值，如果 array 为 空或不是一个数组则返回 NULL。</p>
<h3 id="array-unshift"><a href="#array-unshift" class="headerlink" title="array_unshift"></a>array_unshift</h3><p>int array_unshift ( array &amp;$array , mixed $var [, mixed $… ] )</p>
<p>在数组开头插入一个或多个单元</p>
<p>返回 array 数组新的单元数目。</p>
<h3 id="array-slice"><a href="#array-slice" class="headerlink" title="array_slice"></a>array_slice</h3><p>array array_slice ( array $array , int $offset [, int $length = NULL [, bool $preserve_keys = false ]] )</p>
<p>从数组中取出一段</p>
<h3 id="array-splice"><a href="#array-splice" class="headerlink" title="array_splice"></a>array_splice</h3><p>array array_splice ( array &amp;$input , int $offset [, int $length = 0 [, mixed $replacement ]] )</p>
<p>把数组中的一部分去掉并用其它值取代</p>
<p>返回一个包含有被移除单元的数组</p>
<h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>array range ( mixed $start , mixed $limit [, number $step = 1 ] )</p>
<p>建立一个包含指定范围单元的数组。</p>
<h2 id="输出控制函数"><a href="#输出控制函数" class="headerlink" title="输出控制函数"></a>输出控制函数</h2><p>flush — 刷新输出缓冲<br>ob_clean — 清空（擦掉）输出缓冲区<br>ob_end_clean — 清空（擦除）缓冲区并关闭输出缓冲<br>ob_end_flush — 冲刷出（送出）输出缓冲区内容并关闭缓冲<br>ob_flush — 冲刷出（送出）输出缓冲区中的内容<br>ob_get_clean — 得到当前缓冲区的内容并删除当前输出缓。<br>ob_get_contents — 返回输出缓冲区的内容<br>ob_get_flush — 刷出（送出）缓冲区内容，以字符串形式返回内容，并关闭输出缓冲区。<br>ob_get_length — 返回输出缓冲区内容的长度<br>ob_get_status — 得到所有输出缓冲区的状态<br>ob_start — 打开输出控制缓冲</p>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="set-error-handler"><a href="#set-error-handler" class="headerlink" title="set_error_handler"></a>set_error_handler</h3><p>mixed set_error_handler ( callable $error_handler [, int $error_types = E_ALL | E_STRICT ] )</p>
<p>设置一个用户定义的错误处理函数</p>
<p>error_handler 函数可以表示为：<br>    handler ( int $errno , string $errstr [, string $errfile [, int $errline [, array $errcontext ]]] )<br>如果函数返回 FALSE，标准错误处理处理程序将会继续调用</p>
<h3 id="set-exception-handler"><a href="#set-exception-handler" class="headerlink" title="set_exception_handler"></a>set_exception_handler</h3><p>设置一个用户定义的异常处理函数,用于没有用 try/catch 块来捕获的异常。</p>
<p>在 exception_handler 调用后异常会中止</p>
<h3 id="register-shutdown-function"><a href="#register-shutdown-function" class="headerlink" title="register_shutdown_function"></a>register_shutdown_function</h3><p> Register a function for execution on shutdown</p>
<p>void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $… ]] )</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[快捷键]]></title>
      <url>/2016/09/04/%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><p>CMD-Shift-3<br>    全屏截图</p>
<p>CMD-Shift-4<br>    区域截图：选区<br>    ⇧Shift － 重新定义截图区域的纵向高度或横向长度，不能同时实现。<br>    ⌥Option － 重新定义截图区域的尺寸，可以同时实现纵向和横向的改变，但只能围绕中心区域展开。<br>    ⌴空格键 － 按住并拖动鼠标，可以移动截图选框位置。<br>    Escape(Esc)键 － 退出截图模式。</p>
<p>CMD-Shift-4 + 空格键<br>    区域截图：窗口</p>
<p>screencapture -T ＋等待时间（秒）＋保存的截图名称及格式<br>    抓图</p>
<h2 id="phpStorm"><a href="#phpStorm" class="headerlink" title="phpStorm"></a>phpStorm</h2><ul>
<li>command + r 查找替换</li>
<li>command + e 打开最近的文件</li>
<li>command + shift + o 快速查询文件</li>
<li>command + shift + f 关键字查找,更强大的查询器(机器不好的，最好还是先确定一下目录)</li>
<li>command + shift + r 高级替换</li>
<li>command + alt + b 找到当前类的所有子类</li>
<li>alt + shift + c 查找最近修改的文件</li>
<li>alt + f7 直接查询选中的字符</li>
<li>ctrl + f7 文件中查询选中字符</li>
<li>command + shift + +,- 展开或缩起</li>
<li><p>command + . 折叠或展开选中的代码</p>
</li>
<li><p>alt + 回车 导入包，自动修正</p>
</li>
<li>command + n 快事为每个成员属性生成 getter 及 setter 方法</li>
<li>ctrl + i 快速生成插入魔术方法</li>
<li>ctrol + o 复写父类方法</li>
<li>command + alt + l 对当前文件进行格式化排版</li>
<li>command + d 复制当剪行</li>
<li>command + / // 注释</li>
<li>command + shift + / // 注释</li>
<li>command + k 提交代码</li>
<li>command + shif + k 提交远程分支</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[利用 CURL 进行数据抓取总结]]></title>
      <url>/2016/08/30/PHP%20cURL%20%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>CURLOPT_POST 的设置可以指定当前提交是否为POST方式</p>
<p>CURLOPT_POSTFIELDS则用于设定提交的参数，可以是参数串，也可以是参数数组</p>
<h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><p>对于一些程序，它可能判断来源网址，如果发现referer不是自己的网站，则拒绝访问，这时候，我们就需要添加<code>CURLOPT_REFERER</code>参数</p>
<h2 id="cookie支持"><a href="#cookie支持" class="headerlink" title="cookie支持"></a>cookie支持</h2><p>对于模拟登录的应用，单单提交参数和模拟来路并不能解决问题，这时候我们就需要保存或者提交相应的Cookie参数</p>
<p>CURLOPT_COOKIE： 直接使用字符串方式提交cookie参数 </p>
<p>CURLOPT_COOKIEFILE： 使用文件方式提交cookie参数 </p>
<p>CURLOPT_COOKIEJAR： 保存提交后反馈的cookie数据</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">header(<span class="string">"content-Type: text/html; charset=UTF-8"</span>);</div><div class="line">$cookie_file = tempnam(<span class="string">'./temp'</span>, <span class="string">'cookie'</span>);</div><div class="line">$login_url=<span class="string">"http://somesite.com/login.php"</span>;</div><div class="line">$post_fields=<span class="string">"cktime=36000&amp;step=2&amp;pwuser=username&amp;pwpwd=password"</span>;</div><div class="line"><span class="comment">//提交登录表单请求</span></div><div class="line">$ch=curl_init($login_url);</div><div class="line">curl_setopt($ch,CURLOPT_HEADER,<span class="number">0</span>);</div><div class="line">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class="number">1</span>);</div><div class="line">curl_setopt($ch,CURLOPT_POST,<span class="number">1</span>);</div><div class="line">curl_setopt($ch,CURLOPT_POSTFIELDS,$post_fields);</div><div class="line">curl_setopt($ch,CURLOPT_COOKIEJAR,$cookie_file); <span class="comment">//存储提交后得到的cookie数据</span></div><div class="line">curl_exec($ch);</div><div class="line">curl_close($ch);</div><div class="line"><span class="comment">//登录成功后，获取bbs首页数据</span></div><div class="line">$url=<span class="string">"http://somesite.com/index.php"</span>;</div><div class="line">$ch=curl_init($url);</div><div class="line">curl_setopt($ch,CURLOPT_HEADER,<span class="number">0</span>);</div><div class="line">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class="number">1</span>);</div><div class="line">curl_setopt($ch,CURLOPT_COOKIEFILE,$cookie_file); <span class="comment">//使用提交后得到的cookie数据做参数</span></div><div class="line">$contents=curl_exec($ch);</div><div class="line">curl_close($ch);</div><div class="line"><span class="comment">//转码显示</span></div><div class="line"><span class="keyword">echo</span> iconv(<span class="string">'gbk'</span>, <span class="string">'UTF-8'</span>, $contents);</div></pre></td></tr></table></figure>
<h2 id="压缩网页gzip"><a href="#压缩网页gzip" class="headerlink" title="压缩网页gzip"></a>压缩网页gzip</h2><p>有些没有接触过压缩页面的朋友估计会在这里被坑死，因为他们会发现采集回来的内容是乱码，并且无论使用iconv还是强大的mb_convert_encoding都无法还原数据，然后又没有概念，各种抓狂却找不到方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$url = <span class="string">'http://news.sohu.com/'</span>;</div><div class="line">$ch = curl_init($url);</div><div class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">//返回数据不直接输出</span></div><div class="line">curl_setopt($ch, CURLOPT_ENCODING, <span class="string">"gzip"</span>); <span class="comment">//指定gzip压缩</span></div><div class="line">$content = curl_exec($ch); <span class="comment">//执行并存储结果</span></div><div class="line">curl_close($ch);</div><div class="line"><span class="keyword">echo</span> $content;</div></pre></td></tr></table></figure>
<p>支持的编码有”identity”，”deflate”和”gzip”</p>
<p>如果为空字符串””，请求头会发送所有支持的编码类型。后面一句表明，使用curl_setopt($ch, CURLOPT_ENCODING, “”);也是可以的，但是不能不加这个参数。</p>
<h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><p>var_dump(curl_error($ch));的方法打印错误提示，然后根据错误提示查找相应的解决方案。比如SSL错误常见提示：SSL certificate problem: unable to get local issuer certificate，这时候，我们就需要利用参数：CURLOPT_SSL_VERIFYPEER 和 CURLOPT_SSL_VERIFYHOST 来禁用SSL证书的验证，我尝试过只使用CURLOPT_SSL_VERIFYPEER参数禁用失败，所以大家最好同时使用两个参数。 </p>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>国内存在万恶的墙，所以，假如我们需要获取某些被墙数据时，就需要用到国外代理服务器；<br>又或者我们需要采集大量数据时，需要不断切换IP，也会用到代理。 </p>
<p>使用代理在PHP cURL里面有几个相对应的参数：CURLOPT_PROXY、CURLOPT_PROXYPORT 和 CURLOPT_PROXYUSERPWD，还有另外几个，这里不列举。 </p>
<p>CURLOPT_PROXY 指定代理IP参数 </p>
<p>CURLOPT_PROXYPORT 指定代理端口参数 </p>
<p>CURLOPT_PROXYUSERPWD 指定需要验证的代理的账号密码，”[username]:[password]”格式的字符串</p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>curl_multi</p>
<h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><p>CURLOPT_FOLLOWLOCATION</p>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>全部数据使用HTTP协议中的”POST”操作来发送。要发送文件，在文件名前面加上@前缀并使用完整路径。<br>这个参数可以通过urlencoded后的query字符串或使用一个以字段名为键值，字段数据为值的数组。<br>如果value是一个数组，Content-Type头将会被设置成multipart/form-data。</p>
<p>关于CURLOPT_POSTFIELDS的赋值，另外补充一句描述：</p>
<p>传递一个URL-encoded字符串时，数据会被编码成 application/x-www-form-urlencoded<br>传递一个数组到CURLOPT_POSTFIELDS，cURL会把数据编码成 multipart/form-data<br>即：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, <span class="string">'param1=val1&amp;param2=val2&amp;...'</span>);</div><div class="line"><span class="comment">// 相当于</span></div><div class="line"><span class="comment">// &lt;form method="post" action="upload.php"&gt;</span></div><div class="line"></div><div class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, <span class="keyword">array</span>(<span class="string">'param1'</span> =&gt; <span class="string">'val1'</span>, <span class="string">'param2'</span> =&gt; <span class="string">'val2'</span>, ...));</div><div class="line"><span class="comment">// 相当于</span></div><div class="line"><span class="comment">// &lt;form method="post" action="upload.php" enctype="multipart/form-data"&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[js 中对 checkbox 的操作]]></title>
      <url>/2016/08/30/js%20%E4%B8%AD%E5%AF%B9%20checkbox%20%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h2><p>原生js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Check</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"checkbox"</span>).checked = <span class="literal">true</span>;</div><div class="line"><span class="comment">//  Uncheck</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"checkbox"</span>).checked = <span class="literal">false</span>;</div></pre></td></tr></table></figure></p>
<p>jQuery (1.6+):<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Check</span></div><div class="line">$(<span class="string">"#checkbox"</span>).prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</div><div class="line"><span class="comment">//  Uncheck</span></div><div class="line">$(<span class="string">"#checkbox"</span>).prop(<span class="string">"checked"</span>, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>jQuery (1.5-):<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Check</span></div><div class="line">$(<span class="string">"#checkbox"</span>).attr(<span class="string">"checked"</span>, <span class="literal">true</span>);</div><div class="line"><span class="comment">//  Uncheck</span></div><div class="line">$(<span class="string">"#checkbox"</span>).attr(<span class="string">"checked"</span>, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Check</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'checkbox'</span>).setAttribute(<span class="string">'checked'</span>, <span class="string">'checked'</span>);</div><div class="line"><span class="comment">//UnCheck</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'checkbox'</span>).removeAttribute(<span class="string">'checked'</span>);</div></pre></td></tr></table></figure>
<h3 id="get-checked"><a href="#get-checked" class="headerlink" title="get checked"></a>get checked</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// traditional attr</span></div><div class="line">$(<span class="string">'#checkMeOut'</span>).attr(<span class="string">'checked'</span>); <span class="comment">// "checked"</span></div><div class="line"><span class="comment">// new property method</span></div><div class="line">$(<span class="string">'#checkMeOut'</span>).prop(<span class="string">'checked'</span>); <span class="comment">// true</span></div><div class="line"></div><div class="line">$(<span class="string">"#txtAge"</span>).get(<span class="number">0</span>).checked</div><div class="line">$(<span class="string">"#txtAge"</span>).is(<span class="string">":checked"</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[常用代码片段]]></title>
      <url>/2016/08/30/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
      <content type="html"><![CDATA[<h3 id="html-utf-8"><a href="#html-utf-8" class="headerlink" title="html utf-8"></a>html utf-8</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">'Content-Type'</span> <span class="attr">content</span>=<span class="string">'text/html; charset=utf-8'</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">header(<span class="string">'Content-Type: application/json; charset=utf-8'</span>);</div><div class="line"></div><div class="line">header(<span class="string">'Content-Type: text/html; charset=utf-8'</span>);</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[常用正则技巧总结]]></title>
      <url>/2016/08/30/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="正则字符"><a href="#正则字符" class="headerlink" title="正则字符"></a>正则字符</h2><ol>
<li><code>.</code>匹配不包括换行的任意字符,在php的s修饰符下面可以匹配换行</li>
<li><code>\s</code>空格、tab</li>
<li><code>[]</code>单字符取一个，比如[abc]会匹配a或b或c</li>
<li><code>|</code>多个数据选一（常用于多字符）<code>|</code>的作用域是一直往后直到遇到括号</li>
<li><code>(?:)</code>非捕获组 </li>
</ol>
<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ol>
<li>如果源字符串有换行，使用[\s\S]替换</li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="内符号"><a href="#内符号" class="headerlink" title="[]内符号"></a><code>[]</code>内符号</h3><ul>
<li><code>^</code>在首位时候才有特殊意义</li>
<li><code>-</code>在不是首尾的时候有特殊意义</li>
<li><code>\</code>本身是转义符，有特殊意义</li>
</ul>
<h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><ol>
<li><p>从大到小，一块块分解</p>
<ol>
<li>65530-65535  ==&gt;  6553[0-5]          末位区间0-5</li>
<li>65500-65529  ==&gt;  655[0-2][0-9]      第四位区间0-2，末位区间0-9</li>
<li>65000-65499  ==&gt;  65[0-4][0-9]{2}    第三位区间0-4，后两位0-9</li>
<li>60000-64999  ==&gt;  6[0-4][0-9]{3}     第二位区间0-4，后三位0-9</li>
<li>10000-59999  ==&gt;  [1-5][0-9]{4}      第一位区间1-5，后四位0-9</li>
<li><p>1-9999       ==&gt;  [1-9][0-9]{0,3}    第一位只能是1-9，后三位可有可无   </p>
<p>最后组合起来：<br>(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{0,3}) </p>
<p>根据数据处理需求，可以在正则前后加上^和$，以匹配整个数据串，或者前后加入\b，把它当做单词边界处理。没有限定字符的边界往往是js正则判断中常见的错误之一。</p>
</li>
</ol>
</li>
<li><p>贪婪模式与非贪婪模式</p>
<p> 什么时候使用贪婪模式，什么时候使用非贪婪模式，哪个性能好，哪个性能不好，不能一概而论，要根据情况分析。 </p>
<p> 不过，在平时的时候用，一般使用非贪婪模式较多，因为贪婪模式经常会由于元字符范围限制不严谨而导致匹配越界，得到非预期结果。</p>
<p> 在确定的数据结构里，可以尝试使用[^&gt;]*&gt;这样的排除字符贪婪模式替换非贪婪模式，提升匹配的效率</p>
<p> 无论使用贪婪模式还是非贪婪模式，在不同语言需要注意回溯次数和嵌套次数的限制，比如在PHP中，pcre.backtrack_limit=100000，pcre.recursion_limit=100000。</p>
</li>
<li><p>环视（断言/零宽断言）</p>
<p> 环视，在不同的地方又称之为零宽断言，简称断言。 </p>
<p> 环视主要有以下4个用法：<br> <code>(?&lt;=exp)</code> 匹配前面是exp的数据<br> <code>(?=exp)</code> 匹配后面是exp的数据<br> <code>(?!exp)</code> 匹配后面不是exp的数据<br> <code>(?&lt;!exp)</code> 匹配前面不是exp的数据 </p>
<p> 另外，还会看到(?!B)[A-Z]这种写法，其实它是[A-Z]范围里，排除B的意思，前置的(?!B)只是对后面数据的一个限定，从而达到过滤匹配的效果。</p>
<p> 环视部分是不占宽度的，所以有零宽断言的叫法。<br> 所谓不占宽度，可以分成两部分理解：<br> 1、环视的匹配结果不纳入数据结果<br> 2、环视它匹配过的地方，下次还能用它继续匹配。</p>
</li>
<li><p>模式修饰符</p>
<p> <code>i</code>不区分大小写<br> <code>s</code>的作用主要是让<code>·</code>能够匹配换行</p>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[欢快的使用谷歌搜索]]></title>
      <url>/2016/08/30/%E6%AC%A2%E5%BF%AB%E7%9A%84%E4%BD%BF%E7%94%A8%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2/</url>
      <content type="html"><![CDATA[<h2 id="无障碍使用"><a href="#无障碍使用" class="headerlink" title="无障碍使用"></a>无障碍使用</h2><p>使用谷歌搜索的时候，要么无法访问，要么谷歌会将你的 google.com 重定向到具有特定国家或地区后缀的谷歌搜索地址，如 google.com.hk 等<br>当然，我们可以直接输入这类带地区后缀的地址, 这样有时也能实现访问, 当是很多时候却并不好用，也常有无法访问的时候</p>
<p>避免谷歌重定向的方法是使用 google.com/<code>ncr</code> , 这种方法屡试不爽非常可靠，但是停止搜索一会后却又不行了，然后又得继续手动的输入这个地址</p>
<p>那么有没有办法自动在 google.com 后面加入 ncr 呢，万能的谷歌插件没让人失望<br>这个插件便是 <code>NoCountryRedirect (NCR)</code></p>
<p>谷歌使用是 <code>https</code> 协议，我们还需要让我们的输入 google.com 自动使用 https, 这样我们还需要1款插件 <code>HTTPS Everywhere</code></p>
<p>好了，这样我们就能用谷歌愉快的进行各种搜索了</p>
<h2 id="hosts来一计"><a href="#hosts来一计" class="headerlink" title="hosts来一计"></a>hosts来一计</h2><p><a href="https://github.com/racaljk/hosts" target="_blank" rel="external">https://github.com/racaljk/hosts</a></p>
<h2 id="更好的使用"><a href="#更好的使用" class="headerlink" title="更好的使用"></a>更好的使用</h2><p>编辑 <code>hosts</code> 文件，在末尾加入 2 行</p>
<pre><code>127.0.0.1 baidu.com
127.0.0.1 www.baidu.com
</code></pre><p>启动 <code>nginx</code> ,加入如下配置</p>
<pre><code>server {
    listen       80;
    server_name  baidu.com www.baidu.com;
    return 301 $scheme://www.google.com$request_uri;
}
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[mac os系统问题解决]]></title>
      <url>/2016/08/30/mac%20os%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h3 id="在-OS-X-El-Capitan-安装-git-svn"><a href="#在-OS-X-El-Capitan-安装-git-svn" class="headerlink" title="在 OS X El Capitan 安装 git-svn"></a>在 OS X El Capitan 安装 git-svn</h3><p>在 Mountain Lion 和 Mavericks 系统中，安装 git-svn 中断的解决办法如下<br>不幸的是，由于 El Capitan 系统保护机制，上述操作无效了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.18/darwin-thread-multi-2level/SVN /System/Library/Perl/Extras/5.18/SVN</div><div class="line">ln: /System/Library/Perl/Extras/5.18/SVN: Operation not permitted</div></pre></td></tr></table></figure></p>
<p>下面操作是新的有效的解决办法<br>因为虽然不能写入 /System, 但是可以写入 /Library<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /Library/Perl/5.18/auto</div><div class="line">sudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.18/darwin-thread-multi-2level/SVN /Library/Perl/5.18/darwin-thread-multi-2level</div><div class="line">sudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.18/darwin-thread-multi-2level/auto/SVN /Library/Perl/5.18/auto/</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[web相关]]></title>
      <url>/2016/08/29/web%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h3 id="js对象的定义"><a href="#js对象的定义" class="headerlink" title="js对象的定义"></a>js对象的定义</h3><p>无序属性的集合，其属性可以包含基本值、对象或者函数<br>一个Javascript函数也是一个对象，并且，所有的对象从技术上讲也只不过是函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=<span class="string">"phodal"</span>;</div><div class="line">    <span class="keyword">this</span>.weight=<span class="number">50</span>;</div><div class="line">    <span class="keyword">this</span>.height=<span class="number">166</span>;</div><div class="line">    <span class="keyword">this</span>.future=<span class="function"><span class="keyword">function</span> <span class="title">dream</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"future"</span>;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> calc=&#123;</div><div class="line">    <span class="attr">add</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a+b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">sub</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a-b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">dif</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(a&gt;b)&#123;</div><div class="line">            <span class="keyword">return</span> a;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> b;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calc</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">Calc.prototype.add=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">&#125;;</div><div class="line">Calc.prototype.sub=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a-b;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Chinese=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.country=<span class="string">"China"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Person=<span class="function"><span class="keyword">function</span>(<span class="params">name,weight,height</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">    <span class="keyword">this</span>.weight=weight;</div><div class="line">    <span class="keyword">this</span>.height=height; </div><div class="line">    <span class="keyword">this</span>.futrue=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"future"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Chinese.prototype=<span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="keyword">var</span> phodal=<span class="keyword">new</span> Chinese(<span class="string">"phodal"</span>,<span class="number">50</span>,<span class="number">166</span>);</div></pre></td></tr></table></figure>
<h3 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h3><ul>
<li>解析HTML去构建DOM树</li>
<li>渲染树形结构</li>
<li>生成渲染的树形图布局</li>
<li>绘制树形图</li>
</ul>
<p>第一步 Parse HTML，而 Parse HTML 实质上就是将其将解析为 DOM Tree。与此同时，CSS 解析器会解析 CSS 会产生 CSS 规则树。<br>随后会根据生成的 DOM 树和 CSS 规则树来构建 Render Tree，接着生成 Render Tree的布局，最后就是绘制出 Render Tree。</p>
<h3 id="写好HTML应该会有下面的要点"><a href="#写好HTML应该会有下面的要点" class="headerlink" title="写好HTML应该会有下面的要点"></a>写好HTML应该会有下面的要点</h3><ul>
<li>了解标准及遵守绝大多数标准</li>
<li>注重可读性，从ID及CLASS的命名</li>
<li>关注SEO与代码的联系</li>
</ul>
<h3 id="notice"><a href="#notice" class="headerlink" title="notice"></a>notice</h3><ul>
<li>对于行内非替换元素，其占用空间（行高）由 line-height 决定，即使有内边距与边框。</li>
</ul>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><pre><code>以现代标准而言，一个标准PC的操作系统应该提供以下的功能：

+ 进程管理（Processing management）
+ 内存管理（Memory management）
+ 文件系统（File system）
+ 网络通信（Networking）
+ 安全机制（Security）
+ 用户界面（User interface）
+ 驱动程序（Device drivers）
</code></pre><h3 id="WEB服务"><a href="#WEB服务" class="headerlink" title="WEB服务"></a>WEB服务</h3><pre><code>WEB服务实际上是一组工具，并有多种不同的方法调用之。三种最普遍的手段是：

+ 远程过程调用（RPC）
+ 面向服务架构（SOA）
+ 表述性状态转移（REST）

HTTP是用于客户端与服务端之间的通信。
传输层的TCP是基于网络层的IP协议的,而应用层的HTTP协议又是基于传输层的TCP协议的。
</code></pre><h3 id="打开网页时发生了什么"><a href="#打开网页时发生了什么" class="headerlink" title="打开网页时发生了什么"></a>打开网页时发生了什么</h3><ul>
<li>浏览器需要查找域名的IP，从不同的缓存直至DNS服务器。</li>
<li>浏览器会给web服务器发送一个HTTP请求</li>
<li>服务器“处理”请求</li>
<li>服务器发回一个HTML响应</li>
<li>浏览器渲染HTML到页面。</li>
</ul>
<p>StackOverflow’s Answer:</p>
<ul>
<li>browser checks cache; if requested object is in cache and is fresh, skip to #9</li>
<li>browser asks OS for server’s IP address</li>
<li>OS makes a DNS lookup and replies the IP address to the browser</li>
<li>browser opens a TCP connection to server (this step is much more complex with HTTPS)</li>
<li>browser sends the HTTP request through TCP connection</li>
<li>browser receives HTTP response and may close the TCP connection, or reuse it for another request</li>
<li>browser checks if the response is a redirect (3xx result status codes), authorization request (401), error (4xx and 5xx), etc.; these are handled differently from normal responses (2xx)</li>
<li>if cacheable, response is stored in cache</li>
<li>browser decodes response (e.g. if it’s gzipped)</li>
<li>browser determines what to do with response (e.g. is it a HTML page, is it an image, is it a sound clip?)</li>
<li>browser renders response, or offers a download dialog for unrecognized types</li>
</ul>
<h3 id="一个HTTP响应由三部分组成"><a href="#一个HTTP响应由三部分组成" class="headerlink" title="一个HTTP响应由三部分组成"></a>一个HTTP响应由三部分组成</h3><ul>
<li>状态行(状态码)</li>
<li>消息报头(响应报头)</li>
<li>响应正文(消息体)</li>
</ul>
<p>互联网上的一切信息都可以看作是一种资源。</p>
<h3 id="Laravel-Resources"><a href="#Laravel-Resources" class="headerlink" title="Laravel Resources"></a>Laravel Resources</h3><table>
<thead>
<tr>
<th style="text-align:left">Verb</th>
<th>Path</th>
<th>Action</th>
<th style="text-align:left">Route Name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GET</td>
<td>/resource</td>
<td>index</td>
<td style="text-align:left">resource.index</td>
</tr>
<tr>
<td style="text-align:left">GET</td>
<td>/resource/create</td>
<td>create</td>
<td style="text-align:left">resource.create</td>
</tr>
<tr>
<td style="text-align:left">POST</td>
<td>/resource</td>
<td>store</td>
<td style="text-align:left">resource.store</td>
</tr>
<tr>
<td style="text-align:left">GET</td>
<td>/resource/{resource}</td>
<td>show</td>
<td style="text-align:left">resource.show</td>
</tr>
<tr>
<td style="text-align:left">GET</td>
<td>/resource/{resource}/edit</td>
<td>edit</td>
<td style="text-align:left">resource.edit</td>
</tr>
<tr>
<td style="text-align:left">PUT/PATCH</td>
<td>/resource/{resource}</td>
<td>update</td>
<td style="text-align:left">resource.update</td>
</tr>
<tr>
<td style="text-align:left">DELETE</td>
<td>/resource/{resource}</td>
<td>destroy</td>
<td style="text-align:left">resource.destroy</td>
</tr>
</tbody>
</table>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>在 Controller 层应该做的事:</p>
<ul>
<li>处理请求的参数</li>
<li>渲染和重定向</li>
<li>选择 Model 和 Service</li>
<li>处理 Session 和 Cookies</li>
</ul>
<p>控制器层起到不同层面间的组织作用，用于控制应用程序的流程。</p>
<p>业务是善变的,Controller 是不容易变化的</p>
<p>模型用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法</p>
<h3 id="cookie-问题"><a href="#cookie-问题" class="headerlink" title="cookie 问题"></a>cookie 问题</h3><p>Cookie 存在一些明显的问题：不支持跨域、并且不是无状态的、不能使用CDN、与系统耦合等等</p>
<p>JSON Web Token (JWT) 是一种基于 token 的认证方案</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>一般来说，自动测试应该从两部分考虑：</p>
<ul>
<li>单元测试</li>
<li>功能测试</li>
</ul>
<h3 id="可读的代码"><a href="#可读的代码" class="headerlink" title="可读的代码"></a>可读的代码</h3><ul>
<li>确保我们的变量名、函数名是易读的</li>
<li>没有复杂的逻辑判断</li>
<li>没有多层嵌套 (事不过三)</li>
<li>减少复杂函数的出现（如,不超过三十行）</li>
<li>然后，你要去测试它。这样你就知道需要什么，实际上要做到这些也不是一些难事</li>
</ul>
<p>短的精巧的函数有以下的特点：</p>
<ul>
<li>如果每个函数的粒度都很小，那么函数被复用的机会就更大；</li>
<li>是这会让高层函数读起来就像一系列注释一样，容易理解；</li>
<li>是如果函数都是细粒度，那么函数的复写也会更加容易。</li>
</ul>
<p>在提炼函数中我们所要做的就是——判断出原有的函数的意图，再依据我们的新意图来命名新的函数。然后判断依赖——变量值，处理这些变量。提取出函数，再对其测试。</p>
<p>Intellij IDEA 提炼函数:</p>
<pre><code>Mac: alt+command+M
Windows/Linux: Ctrl+Alt+M
鼠标: Refactor | Extract | Method
</code></pre><p>内联函数:</p>
<pre><code>Mac: alt+command+N
Windows/Linux: Ctrl+Alt+N
鼠标: Refactor | Inline
</code></pre><p>查询取代临时变量:</p>
<pre><code>Refactor | Replace Temp with Query
</code></pre><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><p>http 协议下的网络连接都是基于明文的，信息很有可能被泄露篡改<br>理论上 https 是安全的</p>
<h3 id="XSS-Cross-Site-Script"><a href="#XSS-Cross-Site-Script" class="headerlink" title="XSS(Cross-Site Script)"></a>XSS(Cross-Site Script)</h3><p>跨站脚本攻击本质上是一种注入攻击<br>简单的说就是利用各种手段把恶意代码添加到网页中，并让受害者执行这段脚本。 XSS 能做用户使用浏览器能做的一切事情。可以看到同源策略无法保证不受 XSS 攻击，因为此时攻击者就在同源之内。</p>
<p>可以分为以下两类：<br>client(客户端型)<br>server(服务端型)<br>当一端 XSS 代码是在服务端被插入的，那么这就是服务端型 XSS ，同理，如果代码在客户端插入，就是客户端型 XSS 。</p>
<p>其实只要做好无论任何情况下保证代码不被执行就能完全杜绝 XSS 攻击<br>任何时候都不要把不受信任的数据直接插入到 dom 中的任何位置,一定要做转义。</p>
<h3 id="Http-Only"><a href="#Http-Only" class="headerlink" title="Http-Only"></a>Http-Only</h3><p>使用 Http-only 保护 cookie ，可以保证即使发生了 XSS ，用户的 cookie 也是安全的。使用 Http-only 保护的 cookie 是不会被 javascript 读写的。</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul>
<li>textarea 的值通过 innerHTML 属性获取不了，得通过 value属性</li>
<li>获取父窗口: window.opener.document</li>
<li>根据 document.attachEvent 可判断出是否为 ie</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[macos查看网络端口情况]]></title>
      <url>/2016/08/29/macos%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%BB%9C%E7%AB%AF%E5%8F%A3%E6%83%85%E5%86%B5/</url>
      <content type="html"><![CDATA[<h2 id="使用-netstat-命令"><a href="#使用-netstat-命令" class="headerlink" title="使用 netstat 命令"></a>使用 <code>netstat</code> 命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -nat | grep &lt;port&gt;</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -nat |grep LISTEN</div></pre></td></tr></table></figure>
<h2 id="使用-lsof-命令"><a href="#使用-lsof-命令" class="headerlink" title="使用 lsof 命令"></a>使用 <code>lsof</code> 命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">lsof -n -P -i TCP -s TCP:LISTEN</div><div class="line"></div><div class="line">-n 表示主机以ip地址显示</div><div class="line">-P 表示端口以数字形式显示，默认为端口名称</div><div class="line">-i 意义较多，具体 man lsof, 主要是用来过滤lsof的输出结果</div><div class="line">-s 和 -i 配合使用，用于过滤输出</div></pre></td></tr></table></figure>
<h2 id="使用-telnet-命令"><a href="#使用-telnet-命令" class="headerlink" title="使用 telnet 命令"></a>使用 <code>telnet</code> 命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">telnet 127.0.0.1 &lt;port&gt;</div></pre></td></tr></table></figure>
<h2 id="使用-nc-命令"><a href="#使用-nc-命令" class="headerlink" title="使用 nc 命令"></a>使用 <code>nc</code> 命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">nc  -w &lt;time&gt; -n -z &lt;ip&gt; &lt;port_start-port_end&gt;</div><div class="line"></div><div class="line">-w 表示等待连接时间</div><div class="line">-n 尽量将端口号名称转换为端口号数字</div><div class="line">-z 对需要检查的端口没有输入输出，用于端口扫描模式</div><div class="line">ip 需要检查的ip地址</div><div class="line">port_start-port_end 可以是一个端口，也可以是一段端口,返回结果为开放的端口</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[vagrant 常用操作]]></title>
      <url>/2016/08/29/vagrant/</url>
      <content type="html"><![CDATA[<h2 id="查看全局状态"><a href="#查看全局状态" class="headerlink" title="查看全局状态"></a>查看全局状态</h2><p>vagrant global-status</p>
<h2 id="基本安装流程，以centos为例"><a href="#基本安装流程，以centos为例" class="headerlink" title="基本安装流程，以centos为例"></a>基本安装流程，以centos为例</h2><p>vagrant add centos cent.box</p>
<p>vagrant init centos</p>
<p>vagrant up</p>
<p>vagrant ssh</p>
<h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><p>vagrant destroy</p>
<p>vagrant box remove centos</p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>vagrant package –output newcentos.box</p>
<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>vagrant halt # 关闭虚拟机<br>vagrant reload # 重启虚拟机</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP代码重构]]></title>
      <url>/2016/08/28/PHP%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="删除-else"><a href="#删除-else" class="headerlink" title="删除 else"></a>删除 else</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($arg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>($arg == <span class="string">'foobar'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更好的写法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($arg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>($arg == <span class="string">'foobar'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="拆分为多个函数"><a href="#拆分为多个函数" class="headerlink" title="拆分为多个函数"></a>拆分为多个函数</h3><p>这种方式需要将函数名取的尽量清晰易懂，不要嫌长。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($age &gt; <span class="number">18</span>)&#123;</div><div class="line">    doSomeThingA();</div><div class="line">    doSomeThingB();</div><div class="line">    doSomeThingC();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    doSomeThingD();</div><div class="line">    doSomeThingE();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多层-if-嵌套的语法，把他写成线性的，就像写规则一样将其一条条罗列出来"><a href="#多层-if-嵌套的语法，把他写成线性的，就像写规则一样将其一条条罗列出来" class="headerlink" title="多层 if 嵌套的语法，把他写成线性的，就像写规则一样将其一条条罗列出来"></a>多层 if 嵌套的语法，把他写成线性的，就像写规则一样将其一条条罗列出来</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span><span class="params">($age, $salary, $pretty)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>($age &gt; <span class="number">18</span>)&#123;</div><div class="line">         <span class="comment">// do some thing A;</span></div><div class="line">        <span class="keyword">if</span>($salary &gt; <span class="number">5000</span>)&#123;</div><div class="line">            <span class="comment">// do some thing B;</span></div><div class="line">            <span class="keyword">if</span>($pretty == <span class="keyword">true</span>)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>改写成这样</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span><span class="params">($age, $salary, $pretty)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>($age &lt; <span class="number">18</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// do some thing A;</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>($salary &lt; <span class="number">5000</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// do some thing B;</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> $pretty == <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">contry_initial</span><span class="params">($country)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> ($country===<span class="string">"China"</span> )&#123;</div><div class="line">       <span class="keyword">return</span> <span class="string">"CHN"</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>($country===<span class="string">"America"</span>)&#123;</div><div class="line">       <span class="keyword">return</span> <span class="string">"USA"</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>($country===<span class="string">"Japna"</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"JPN"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="string">"OTHER"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更好的写法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">contry_initial</span><span class="params">($country)</span></span>&#123;</div><div class="line">  $countryList=[</div><div class="line">      <span class="string">"China"</span>=&gt; <span class="string">"CHN"</span>,</div><div class="line">      <span class="string">"America"</span>=&gt; <span class="string">"USA"</span>,</div><div class="line">      <span class="string">"Japna"</span>=&gt; <span class="string">"JPN"</span>,</div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="comment">// 也可以：array_key_exists($country, $countryList)</span></div><div class="line">    <span class="keyword">if</span>(in_array($country, array_keys($countryList))) &#123;</div><div class="line">        <span class="keyword">return</span> $countryList[$country];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Other"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果需要更加自由的定义映射表的话，可以这样写</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">contry_initial</span><span class="params">($country, array $countryList)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(in_array($country, array_keys($countryList))) &#123;</div><div class="line">        <span class="keyword">return</span> $countryList[$country];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Other"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完全去掉if语句可以写成</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">contry_initial</span><span class="params">($country, array $countryList)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> in_array($country, array_keys($countryList))?$countryList[$country]:<span class="string">"Other"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最好的写法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">contry_initial</span><span class="params">($country)</span></span>&#123;</div><div class="line">  $countryList=[</div><div class="line">      <span class="string">"China"</span>=&gt; <span class="string">"CHN"</span>,</div><div class="line">      <span class="string">"America"</span>=&gt; <span class="string">"USA"</span>,</div><div class="line">      <span class="string">"Japna"</span>=&gt; <span class="string">"JPN"</span>,</div><div class="line">    ];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">isset</span>($countryList[$country]) ? $countryList[$country] : <span class="string">"Other"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>return能越早越好,少用 else 提前中断（return）</li>
<li>if else 语句越少越好，可以用condition?a:b 表达的，就不要用if else</li>
<li>有一一对应关系的，使用映射表。</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel中用到的ServiceProvide]]></title>
      <url>/2016/08/04/laravel%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84ServiceProvide/</url>
      <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="全局限制"><a href="#全局限制" class="headerlink" title="全局限制"></a>全局限制</h3><p>如果你希望路由参数可以总是遵循正则表达式，则可以使用 pattern 方法。你应该在 RouteServiceProvider 的 boot 方法里定义这些模式：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义你的路由模型绑定，模式过滤器等。</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span>  \Illuminate\Routing\Router  $router</div><div class="line"> * <span class="doctag">@return</span> void</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(Router $router)</span></span></div><div class="line">&#123;</div><div class="line">    $router-&gt;pattern(<span class="string">'id'</span>, <span class="string">'[0-9]+'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">parent</span>::boot($router);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>模式一旦被定义，便会自动应用到所有使用该参数名称的路由上：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Route::get(<span class="string">'user/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id)</span> </span>&#123;</div><div class="line">    <span class="comment">// Only called if &#123;id&#125; is numeric.</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="路由模型绑定"><a href="#路由模型绑定" class="headerlink" title="路由模型绑定"></a>路由模型绑定</h3><p>Laravel 路由模型绑定提供了一个方便的方式来注入类实例到你的路由中。例如，除了注入一个用户的 ID，你也可以注入与指定 ID 相符的完整 User 类实例。</p>
<p>首先，使用路由的 model 方法为指定参数指定类。必须在 RouteServiceProvider::boot 方法中定义你的模型绑定：</p>
<p>绑定参数至模型</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(Router $router)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">parent</span>::boot($router);</div><div class="line"></div><div class="line">    $router-&gt;model(<span class="string">'user'</span>, <span class="string">'App\User'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着，定义包含 {user} 参数的路由：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$router-&gt;get(<span class="string">'profile/&#123;user&#125;'</span>, <span class="function"><span class="keyword">function</span><span class="params">(App\User $user)</span> </span>&#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>因为我们已经绑定 {user} 参数至 App\User 模型，所以 User 实例会被注入至该路由。所以，举个例子，一个至 profile/1 的请求会注入 ID 为 1 的 User 实例。</p>
<p>注意：如果符合的模型不存在于数据库中，就会自动抛出一个 404 异常。</p>
<p>如果你希望指定你自己的「不存在」行为，只需传递一个闭包作为 model 方法的第三个参数：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$router-&gt;model(<span class="string">'user'</span>, <span class="string">'App\User'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundHttpException;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果你希望使用你自己的解析逻辑，那么你必须使用 Route::bind 方法。你传递至 bind 方法的闭包会获取 URI 的部分值，且会返回你想注入至路由的类实例：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$router-&gt;bind(<span class="string">'user'</span>, <span class="function"><span class="keyword">function</span><span class="params">($value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> App\User::where(<span class="string">'name'</span>, $value)-&gt;first();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h3 id="响应宏"><a href="#响应宏" class="headerlink" title="响应宏"></a>响应宏</h3><p>如果你想要自定义可以在很多路由和控制器重复使用的响应，可以使用 Illuminate\Contracts\Routing\ResponseFactory 实现的方法 macro。</p>
<p>举个例子，来自 服务提供者的 boot 方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Routing</span>\<span class="title">ResponseFactory</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResponseMacroServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提供注册后运行的服务。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  ResponseFactory  $factory</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(ResponseFactory $factory)</span></span></div><div class="line">    &#123;</div><div class="line">        $factory-&gt;macro(<span class="string">'caps'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($value)</span> <span class="title">use</span> <span class="params">($factory)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> $factory-&gt;make(strtoupper($value));</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>macro 函数第一个参数为宏名称，第二个参数为闭包函数。宏的闭包函数会在 ResponseFactory 的实现或者辅助函数 response 调用宏名称的时候被运行：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> response()-&gt;caps(<span class="string">'foo'</span>);</div></pre></td></tr></table></figure>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="把数据共享给所有视图"><a href="#把数据共享给所有视图" class="headerlink" title="把数据共享给所有视图"></a>把数据共享给所有视图</h3><p>有时候你可能需要共享一些数据给应用程序的所有渲染视图，这时可以通过使用视图 factory 的 share 方法来完成。通常情况下，你会把这些调用 share 方法的代码放在一个服务提供者的 boot 方法内。你可以选择直接写在 AppServiceProvider 或是自己生成一个不同的服务提供者来放置这些代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 启动任何应用程序的服务。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        view()-&gt;share(<span class="string">'key'</span>, <span class="string">'value'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注册服务提供者。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="视图组件"><a href="#视图组件" class="headerlink" title="视图组件"></a>视图组件</h3><p>视图组件就是在视图被渲染前，会被调用的闭包或类方法。如果你想在每次渲染某些视图时绑定数据，视图组件可以帮你把这样的程序逻辑都组织到同一个地方。</p>
<p>让我们在 服务提供者 内注册我们的视图组件。下面例子将使用 View 辅助函数来获取底层 Illuminate\Contracts\View\Factory contract 实现。请注意，Laravel 没有默认的目录来放置视图组件。你可以随意把它们放到任何地方。举例来说，你可以创建一个 App\Http\ViewComposers 目录：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposerServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在容器内注册所有绑定。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 使用对象型态的视图组件...</span></div><div class="line">        view()-&gt;composer(</div><div class="line">            <span class="string">'profile'</span>, <span class="string">'App\Http\ViewComposers\ProfileComposer'</span></div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="comment">// 使用闭包型态的视图组件...</span></div><div class="line">        view()-&gt;composer(<span class="string">'dashboard'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($view)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注册服务提供者。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们已经注册好了视图组件，在每次 profile 视图渲染的时候，ProfileComposer@compose 方法都将会被运行。接下来我们来看看这个视图组件类要如何定义：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">ViewComposers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">View</span>\<span class="title">View</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Users</span>\<span class="title">Repository</span> <span class="title">as</span> <span class="title">UserRepository</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileComposer</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用户对象的实例。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@var</span> UserRepository</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> $users;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建一个新的个人数据视图组件。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  UserRepository  $users</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository $users)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 所有依赖都会自动地被服务容器解析...</span></div><div class="line">        <span class="keyword">$this</span>-&gt;users = $users;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将数据绑定到视图。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  View  $view</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span><span class="params">(View $view)</span></span></div><div class="line">    &#123;</div><div class="line">        $view-&gt;with(<span class="string">'count'</span>, <span class="keyword">$this</span>-&gt;users-&gt;count());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在视图被渲染之前，视图组件的 compose 方法会被调用，并传入一个 Illuminate\Contracts\View\View 实例。你可以使用 with 方法来把数据绑定到视图。</p>
<p>备注：所有的 视图组件 都会被服务容器所解析，因此你可以在视图组件的构造器、类型提示中注入所需的任何依赖。</p>
<h4 id="在视图组件内使用通配符"><a href="#在视图组件内使用通配符" class="headerlink" title="在视图组件内使用通配符"></a>在视图组件内使用通配符</h4><p>你可以在 composer 方法的第一个参数中传递一个视图数组，来同时对多个视图附加同一个视图组件：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">view()-&gt;composer(</div><div class="line">    [<span class="string">'profile'</span>, <span class="string">'dashboard'</span>],</div><div class="line">    <span class="string">'App\Http\ViewComposers\MyViewComposer'</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>视图的 composer 方法可以接受 * 作为通配符，所以你可以对所有视图附加 composer。如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">view()-&gt;composer(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($view)</span> </span>&#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="视图创建者"><a href="#视图创建者" class="headerlink" title="视图创建者"></a>视图创建者</h3><p>视图 创建者 几乎和视图组件运作方式一样；只是视图创建者会在视图初始化后就立即运行，而不是像视图组件一样要一直等到视图即将被渲染完成时才会被运行。要注册一个创建者，只要使用 creator 方法即可：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">view()-&gt;creator(<span class="string">'profile'</span>, <span class="string">'App\Http\ViewCreators\ProfileCreator'</span>);</div></pre></td></tr></table></figure>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="服务注入"><a href="#服务注入" class="headerlink" title="服务注入"></a>服务注入</h3><p>@inject 命令可以取出 Laravel 服务容器 中的服务。传递给 @inject 的第一个参数为置放该服务的变量名称，而第二个参数为你想要解析的服务的类或是接口的名称：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@inject('metrics', 'App\Services\MetricsService')</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    每月收入：&#123;&#123; $metrics-&gt;monthlyRevenue() &#125;&#125;。</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="扩充-Blade"><a href="#扩充-Blade" class="headerlink" title="扩充 Blade"></a>扩充 Blade</h3><p>Blade 甚至允许你自定义命令，你可以使用 directive 方法注册命令。当 Blade 编译器遇到该命令时，它将会带参数调用提供的回调函数。</p>
<p>以下例子会创建一个把指定的 $var 格式化的 @datetime($var) 命令：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Blade</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 运行服务注册后的启动进程。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        Blade::directive(<span class="string">'datetime'</span>, <span class="function"><span class="keyword">function</span><span class="params">($expression)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"&lt;?php echo with&#123;$expression&#125;-&gt;format('m/d/Y H:i'); ?&gt;"</span>;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在容器注册绑定。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如你所见，Laravel 的 with 辅助函数被用在这个命令中。with 辅助函数会简单地返回指定的对象或值，并允许使用便利的链式调用。最后此命令生成的 PHP 会是：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> with($var)-&gt;format(<span class="string">'m/d/Y H:i'</span>); <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel 技巧]]></title>
      <url>/2016/05/21/laravel%20%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h2 id="快速找到-facade-中对应的类"><a href="#快速找到-facade-中对应的类" class="headerlink" title="快速找到 facade 中对应的类"></a>快速找到 facade 中对应的类</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Route::get(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    dd(get_class(HTML::getFacadeRoot()));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>或者使用 <a href="https://github.com/barryvdh/laravel-ide-helper" target="_blank" rel="external">idehelper</a></p>
<h2 id="将数据表里的数据导出成-Seeder-文件"><a href="#将数据表里的数据导出成-Seeder-文件" class="headerlink" title="将数据表里的数据导出成 Seeder 文件"></a>将数据表里的数据导出成 Seeder 文件</h2><ol>
<li>composer require orangehill/iseed</li>
<li>在 config/app.php 文件中添加 Service Provider</li>
<li>php artisan iseed 后面带上本地数据表的名称, 可直接将数据库表的内容转换为 seeder 文件</li>
<li>强制覆盖导出文件 – force</li>
</ol>
<h2 id="建议-使用模型工厂来填充数据"><a href="#建议-使用模型工厂来填充数据" class="headerlink" title="建议 使用模型工厂来填充数据"></a>建议 使用模型工厂来填充数据</h2><h3 id="模型工厂"><a href="#模型工厂" class="headerlink" title="模型工厂"></a>模型工厂</h3><p>避免<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">factory(\App\Models\User::class)-&gt;times(<span class="number">300</span>)-&gt;create();</div></pre></td></tr></table></figure></p>
<p>正确的做法：使用 make 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$users = factory(\App\Models\User::class)-&gt;times(<span class="number">1000</span>)-&gt;make();</div><div class="line">\App\Models\User::insert($users-&gt;toArray());</div></pre></td></tr></table></figure></p>
<h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><p>避免<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$faker = Faker::create();</div><div class="line">$users = User::lists(<span class="string">'id'</span>);</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (range(<span class="number">1</span>, <span class="number">1000</span>) <span class="keyword">as</span> $index)</div><div class="line">&#123;</div><div class="line">    Topic::create([</div><div class="line">        <span class="string">'user_id'</span>     =&gt; $faker-&gt;randomElement($users),</div><div class="line">        <span class="string">'title'</span>       =&gt; $faker-&gt;sentence(),</div><div class="line">        <span class="string">'description'</span> =&gt; $faker-&gt;text(),</div><div class="line">    ]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解决方案,使用 DB:insert<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$faker = Faker::create();</div><div class="line">$users = User::lists(<span class="string">'id'</span>);</div><div class="line">$datas = [];</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (range(<span class="number">1</span>, <span class="number">1000</span>) <span class="keyword">as</span> $index)</div><div class="line">&#123;</div><div class="line">  $datas[] = [</div><div class="line">      <span class="string">'user_id'</span>     =&gt; $faker-&gt;randomElement($users),</div><div class="line">      <span class="string">'title'</span>       =&gt; $faker-&gt;sentence(),</div><div class="line">      <span class="string">'description'</span> =&gt; $faker-&gt;text(),</div><div class="line">      <span class="string">'created_at'</span>  =&gt; Carbon::now()-&gt;toDateTimeString(),</div><div class="line">      <span class="string">'updated_at'</span>  =&gt; Carbon::now()-&gt;toDateTimeString(),</div><div class="line">  ];</div><div class="line">&#125;</div><div class="line">DB::table(<span class="string">'topics'</span>)-&gt;insert($datas);</div></pre></td></tr></table></figure></p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>如果通过 PECL 安装 Redis PHP 扩展，则需要重命名 config/app.php 文件里的 Redis 别名。</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
