{"meta":{"title":"Entimm's Blog","subtitle":null,"description":null,"author":"entimm","url":"https://entimm.com"},"pages":[{"title":"entimm's resume","date":"2016-10-02T08:03:35.000Z","updated":"2016-09-07T07:00:07.000Z","comments":true,"path":"aboutme/index.html","permalink":"https://entimm.com/aboutme/index.html","excerpt":"","text":"基本信息 PHP开发工程师 Email：entimm@gmail.com GitHub: https://github.com/entimm Blog: https://entimm.com 自我评价：热于与他人探讨分享技术，热爱并渴望学习新技术，自学能力强，也时常阅读一些英文资料，勇于面对挑战和克服困难，渴望得到不断的进步，善于使用各种工具 教育经历 2010.09 - 2014.06 海南师范大学 信息科学技术学院 计算机科学与技术 理学学士 工作经历 深圳市圣马歌科技有限公司 （2015.10 - 2016.08） 担任技术部经理，主要负责基于 ApiCloud 的 Web App、微信公众号、管理后台的开发 中国科学院声学研究所南海研究站 （2014.03 - 2015.09） 担任软件工程师，主要负责 Android App 的开发、PHP 网站的开发、基于 PHP 的爬虫程序的开发、Cocos2dx 游戏的开发 主要相关项目经历1. 车舞台一款提供汽车保险服务和全返收益的基于 ApiCloud 的 Web App 项目职责 负责实现 App 端用户车险信息的录入提交、注册登录找回密码、账号安全信息设置等 负责实现车险信息、提现申请的导出及处理结果导入（使用 PHPExcel 实现） 负责实现能每天为用户提供全返收益的功能 负责开发基于 ApiCloud 的蓝牙低能耗探测 Beacon 设备的模块，接入到 App 中 2. 中科孵化网一款为企业入驻中国科技开发院提供资讯、活动信息报名、相关资料下载上传、客服咨询、入驻申请、调查问卷统计等服务的基于 ApiCloud 的 Web App 和 微信服务号 项目职责 负责实现 App 和 微信服务号 的上述全部功能 负责将企业填写的信息生成 Word 文档供后台下载处理（使用PHPWord实现） 负责实现 App 端的 QQ 和微信登录及分享功能 负责实现后台微信模块管理功能 3. DT猫一款旨在为校园宅男宅女提供快件寄取服务以及其他一些代跑腿服务的微信服务号 项目职责 负责申请创建认证微信服务号 负责实现对微信公众号所提供的各种接口的封装 负责获取用户个人信息及地理位置信息，省去注册流程，缩小学校选择范围 负责设计实现所有界面（使用BootStrap） 负责实现获取用户的需求并生成订单，发送模版消息 负责实现后台管理查看订单、派送员管理 4. 小说爬虫一款基于 PHP 实现的对各小说网站进行数据抓取的程序 项目职责 负责实现爬虫程序，并实施数据抓取。多次对整套程序进行重写，在速度、抓取策略、数据的处理上得到不断的改进 负责实现修补程序，对可能因为网站限制、网站 Html 结构不规范或者网络原因造成漏抓的进行扫描并重写抓取 爬虫程序只需经过少量的配置，遍可实现另外一个小说网站的数据抓取 由于数据越来越庞大，通过添加索引、分表的方式对数据库进行了一些优化 5. 微酒店一款旨在为酒店提供轻松建立属于自己的酒店网站的服务平台 负责实现自动新建站点、控制站点关闭与开启、自动分配二级域名、用户信息的上传和审核 负责实现接入支付宝的担保交易 负责实现一套酒店网站基本模板程序 负责实现酒店网站后台各个模块信息的设置添加 6. 实习管理系统一款旨在替代传统的使用纸质方式管理学生实习报告的在线实习管理系统，从而为教师、学生在实习的各个阶段提供方面，并使得学生在实习过程可以学到其他同学的实习经验 项目职责 负责需求分析 独自完成数据库结构设计、整个网站的界面设计实现、系统架构及程序功能逻辑设计实现 负责将程序部署到学院服务器 负责管理和维护系统，数据备份 技能清单 熟练 PHP 网站的开发 熟练 基于 PHP 的 微信公众号的开发以及爬虫的开发 掌握 PHP 开发框架：ThinkPHP \\ CodeIgniter 了解 Laravel5 的使用 熟练基于 ApiCloud 的 Web App 的开发 熟练使用 Git \\ SVN 进行代码管理、团队协作 熟悉 MySQL 使用及常用优化手段 熟悉 Docker 的基本使用 熟悉 Linux 的常用命令 善于使用 Markdown 编写文档笔记 熟悉 Html \\ Css \\ jQuery 前端相关开发 了解 Redis \\ AngularJs \\ Vuejs 开发环境：Sublime Text 3 + PHPStorm + Chrome + Git + OSX 其他：熟悉 Cocos2dx 游戏、Android App 的开发"},{"title":"tags","date":"2016-10-02T08:03:35.000Z","updated":"2016-08-28T09:36:52.000Z","comments":true,"path":"categories/index.html","permalink":"https://entimm.com/categories/index.html","excerpt":"","text":""},{"title":"categories","date":"2016-10-02T08:03:36.000Z","updated":"2016-08-28T09:39:32.000Z","comments":true,"path":"tags/index.html","permalink":"https://entimm.com/tags/index.html","excerpt":"","text":""},{"title":"Awesome GitHub Stars","date":"2017-05-18T17:08:25.000Z","updated":"2017-05-18T17:08:25.000Z","comments":true,"path":"github-stars/index.html","permalink":"https://entimm.com/github-stars/index.html","excerpt":"","text":"Contents C C++ CSS CoffeeScript Go Groovy HTML Java JavaScript Nginx Objective-C Others PHP Perl PowerShell Python Ruby Shell Swift TypeScript Vim script VimL Vue C redis-3.0-annotated - 带有详细注释的 Redis 3.0 代码（annotated Redis 3.0 source code）。 graphviz - Graph Visualization Tools The-Art-Of-Programming-By-July - 本项目曾冲到全球第一，干货集锦见本页面最底部，另完整精致的纸质版《编程之法：面试和算法心得》已在京东/当当上销售 wrk - Modern HTTP benchmarking tool LVS - A distribution of Linux Virtual Server with some advanced features. It introduces a new packet forwarding method - FULLNAT other than NAT/Tunneling/DirectRouting, and defense mechanism against synflooding attack - SYNPROXY. ngx_http_google_filter_module - Nginx Module for Google Mirror yaf - A fast php framework written in c, built in php-ext zqf - A high performance service tool for PHP C++ CodingInterviews - 剑指Offer——名企面试官精讲典型编程题 design_patterns - 图说设计模式 hhvm - A virtual machine designed for executing programs written in Hack and PHP. CSS ratchet - Build mobile apps with simple HTML, CSS, and JavaScript components. animate.css - 🍿 A cross-browser library of CSS animations. As easy to use as an easy thing. normalize.css - A collection of HTML element and attribute style-normalizations Flat-UI - Flat UI Free - Design Framework (html/css3/less/js). Flat UI is based on Bootstrap, a comfortable, responsive, and functional framework that simplifies the development of websites. Beautymail - Send beautiful HTML emails with Laravel material_design_zh - Material Design 中文协同翻译 - design.1sters.com vno-jekyll - Another ported theme for Jekyll freecodecamp.cn - 看源码请到Code，提问请到Issues，提交代码请到Pull requests，看学习心得请到Wiki。多谢合作，么么哒，^_^。 ghost-theme-kaldorei - A Simple And Elegant Ghost Theme Derive From Default Theme Casper mobi.css - A lightweight, scalable, mobile-first css framework tomorrow-theme - Tomorrow Theme the precursor to Base16 Theme You-Dont-Need-JavaScript - CSS is powerful, you can do a lot of things without JS. anbu - Anbu profiler for the Laravel PHP Framework. administrator - a fork from Frozennode/Administrator jstutorial - Javascript tutorial book psr.phphub.org - PSR 中文翻译 bootstrap-material-design - Material design theme for Bootstrap 3 and 4 progit2 - Pro Git 2nd Edition 2048 - A small clone of 1024 (https://play.google.com/store/apps/details?id=com.veewo.a1024) CoffeeScript simply-deferred - A deferred library for Node.js and the browser with a jQuery compatible API Go kcptun - A Secure Tunnel Based On KCP with N:M Multiplexing vegeta - HTTP load testing tool and library. It’s over 9000! goreplay - GoReplay is an open-source tool for capturing and replaying live HTTP traffic into a test environment in order to continuously test your system with real data. It can be used to increase confidence in code deployments, configuration changes and infrastructure changes. seesaw - Seesaw v2 is a Linux Virtual Server (LVS) based load balancing platform. etcd - Distributed reliable key-value store for the most critical data of a distributed system os - Tiny Linux distro that runs the entire OS as Docker containers distribution - The Docker toolset to pack, ship, store, and deliver content go-best-practice - Trying to complete over 100 projects in various categories in golang. Groovy intellij-bootstrap3 - Bootstrap 3 IntelliJ Plugin HTML elasticsearch-cheatsheet - :mag_right: Elasticsearch is awesome, here is a cheatsheet for it. code-standards - Isobar Front-end development coding standards. Memorize them BY HEART. WebFundamentals - Best practices for modern web development js-the-right-way - An easy-to-read, quick reference for JS best practices, accepted coding standards, and links around the Web magicCss - CSS3奇思妙想，单标签实现各类图形 awesome-webpack - A curated list of awesome Webpack resources, libraries and tools bootstrap-theme-slim - 纤细风格的bootstrap主题 pure - A set of small, responsive CSS modules that you can use in every web project. hexo-theme-wiki-i18n - A hexo theme for i18n wiki site linux-command - Linux命令大全搜索工具，内容包含Linux命令手册、详解、学习、搜集。 bootswatch - Themes for Bootstrap gentelella - Free Bootstrap 3 Admin Template Framework7 - Full featured HTML framework for building iOS &amp; Android apps beautiful-jekyll - Build a beautiful and simple website in literally minutes. Demo at http://deanattali.com/beautiful-jekyll Font-Awesome - The iconic font and CSS toolkit awesome-mac -  This repo is a collection of awesome Mac applications and tools for developers and designers. laravel-angular-admin - Laravel + Angularjs + Bootstrap + AdminLTE binded by Gulp workflow Admin Dashboard Boilerplate / Starter. walle-web - A Web Deployment Tool (web代码部署工具) redis - 《Redis Command Reference》全文的中文翻译版。 openresty.org - Code and data for the openresty.org site readability - Turn any web page into a clean view github-cards - The unofficial GitHub Cards. Card for your GitHub profile, card for your GitHub repositories. codelf - Organize your GitHub stars and repositories.Search over projects from GitHub, Bitbucket, Google Code, Codeplex, Sourceforge, Fedora Project to find real-world usage variable names html5demos - Collection of hacks and demos showing capability of HTML5 apps uppy - The next open source file uploader for web browsers :dog: ideabook - 一个全栈增长工程师的练手项目集. A Growth Engineering Idea in Action. sibi - V2EX 撕逼大战 phantomjs - Scriptable Headless WebKit nodebeginner.org - A comprehensive Node.js tutorial for beginners 7-days-nodejs - 七天学会NodeJS laravel-upgrade - laravel学习笔记 laravel-cheatsheet - Laravel Cheat Sheet Hospital - OpenPower工作组收集汇总的医院开放数据 polymer - Build modern apps using web components Markdown-Syntax-CN - Markdown 语法简体中文版（fork 于繁体中文版 http://markdown.tw/ ） ionic2 - 🚀 ionic2.0文档中文翻译 AdminLTE - AdminLTE - Free Premium Admin control Panel Theme Based On Bootstrap 3.x marked - A markdown parser and compiler. Built for speed. linuxtools_rst - Linux工具快速教程 weui - A UI library by WeChat official design team, includes the most useful widgets/modules in mobile web applications. Java zhihu-crawler - 知乎爬虫 coding-interviews - 剑指Offer material-design-data - 关于 Material Design 的一切资料都在这里 ZhihuDailyPurify - Purified version of Zhihu Daily - 更纯净的知乎日报 logger - Simple, pretty and powerful logger for android AndroidUtilCode - :fire: Android developers should collect the following utils(updating) Luban - Luban(鲁班)—Image compression with efficiency very close to WeChat Moments/可能是最接近微信朋友圈的图片压缩算法 elasticsearch - Open Source, Distributed, RESTful Search Engine Android_Data - Some Android learning materials, hoping to help you learn Android development. Mycat-Server - cobar - 基于MySQL的分布式数据库服务中间件 jenkins - Jenkins automation server CNode-Material-Design - CNode社区第三方Android客户端，原生App，Material Design风格，支持夜间模式 WeChatLuckyMoney - :money_with_wings: WeChat’s lucky money helper (微信抢红包插件). An Android app that helps you snatch red packets in WeChat groups. phphub-android - PHPHub for Android FastDev4Android - 本项目是Android快速开发框架，采用AndroidStudio进行开发。 预想集成工具包,采用MVP开发模式,EventBus数据分发,沉浸式状态栏,ORM,网络请求(HTTPClint,Volley,OkHttps),数据解析,依赖注入(AndroidAnnotations),xutils,图片异步加载，二维码扫描等等，后续会进行逐步添加 v2ex-android - 爱V2EX（原掌上V2EX） Android-Universal-Image-Loader - Powerful and flexible library for loading, caching and displaying images on Android. JavaScript hexo-theme-spfk - Hexo双栏博客主题仓库 Another simple and elegant theme for Hexo. MeiTuan - MeiTuan App Write In latest React-Native(0.44.0) tiny-care-terminal - 💖💻 A little dashboard that tries to take care of you when you’re using your terminal. Jeffrey-Way-Theme - Jeffrey Way’s theme on Laracasts. Example: https://laracasts.com/series/whats-new-in-laravel-5-1/episodes/2. Zhihu-Spider - 知乎关系网爬虫 zhihuspider - 网站「看知乎」的爬虫 bootstrap-datepicker - A datepicker for twitter bootstrap (@twbs) planck.js - 2D JavaScript Physics Engine tippyjs - A lightweight, pure JS tooltip library bootstrap-tagsinput - jQuery tags input plugin based on Twitter Bootstrap. x-editable - In-place editing with Twitter Bootstrap, jQuery UI or pure jQuery wechat_spider - 使用“代理”的方式来抓取微信公众账号文章，可以抓取阅读数、点赞数，基于 anyproxy。 Design-Patterns-JS - All the 23 (GoF) design patterns implemented in Javascript deployd - a toolkit for building realtime APIs pm2 - Production process manager for Node.js apps with a built-in load balancer. resume - jquery-weui - UI lib for build hybrid wechat web app clean-code-javascript - :bathtub: Clean Code concepts adapted for JavaScript react-boilerplate - :fire: A highly scalable, offline-first foundation with the best developer experience and a focus on performance and best practices. hiring-without-whiteboards - ⭐️ Companies that don’t have a broken hiring process gulp-tutorial - Code examples for my Gulp.js tutorial series copy.js - copy by js ! jquery.clipboard - :scissors: jQuery Clipboard plugin (newest version) - Copy any text to the user’s clipboard. Implements ZeroClipboard over the jQuery plugin layer. notadd - 基于Laravel 的下一代PHP开发框架 vue2-happyfri - vue2 + vue-router + vuex 入门项目 prism - Lightweight, robust, elegant syntax highlighting. select2 - Select2 is a jQuery based replacement for select boxes. It supports searching, remote data sets, and infinite scrolling of results. vue-zhihu-daily - zhihu daily spa with vue 线上演示在这里 —-&gt; sharp - High performance Node.js image processing, the fastest module to resize JPEG, PNG, WebP and TIFF images. Uses the libvips library. smartcrop.js - Content aware image cropping hacknical - Hacknical, hacker &amp; technical. A website for GitHub user to make a better resume. searchx - Html5 3D 小游戏 baogame - 一个html5的多人游戏，后台使用node，前端canvas，使用socket通信 mitt - 🥊 Tiny 200 byte functional event emitter / pubsub. laravel-testtools - Chrome extension to generate Laravel integration tests while using your app. webpack-handbook - Webpack中文指南 hyper - A terminal built on web technologies vuejs2-learn - vuejs2 官网讲解 (vue.js 2 official website tutorials ，contains video , codes, baudi yun, youtube) webpack-demos - a collection of simple demos of Webpack vue-strap - Bootstrap components built with Vue.js weixinopen - node-github - node library to access the GitHub API github - A higher-level wrapper around the Github API. Intended for the browser. bookmarks.public - A template for self-hosted bookmarks using HTML &amp; jQuery. RegexHub - A collection of useful regex patterns es-checker - A feature detection library for ECMAScript in node.js and browser. es6tutorial - 《ECMAScript 6入门》是一本开源的 JavaScript 语言教程，全面介绍 ECMAScript 6 新增的语法特性。 N-blog - 一起学 Node.js effective-javascript - To be, or not to be, that is a question! :joy: 万剑归宗的无名和独霸天下的雄霸 laravel5-3-example - Simple laravel 5-3 example for tutorial axios - Promise based HTTP client for the browser and node.js meteor - Meteor, the JavaScript App Platform iisns - 基于 yii2 的 sns 社区系统，一站式解决社区建站 ungit - The easiest way to use git. On any platform. Anywhere. vue-hackernews-2.0 - HackerNews clone built with Vue 2.0, vue-router &amp; vuex, with server-side rendering underscore-analysis - Underscore.js 源码解读 &amp; 系列文章（完 :heavy_exclamation_mark:） js-stack-from-scratch - 🛠️⚡ Step-by-step tutorial to build a modern JavaScript stack. leetcode - My LeetCode Solutions yarn - 📦🐈 Fast, reliable, and secure dependency management. tesseract.js - Pure Javascript OCR for 62 Languages 📖🎉🖥 awesome-wechat-weapp - 微信小程序开发资源汇总 :100: ssc - 彩票游戏，时时彩 CodeMirror - In-browser code editor explain-git-with-d3 - Use D3 to visualize simple git branching operations. aude-project-manage-system - 多角色多权限的项目管理系统,技术栈Laravel+Mysql+Valet,实现了完整的项目管理流程,有多个角色不同权限的处理,实现了数据统计,可以导出统计的Excel表,后台风格简洁 weapp-ide-crack - 【应用号】IDE + 破解 + Demo quill - Your powerful, rich text editor nihey.github.io - :star2: My homepage shipit - ⛵️ Universal automation and deployment tool written in JavaScript. strider - Open Source Continuous Integration &amp; Deployment Server laravel - 后端为 Laravel 的 FIS 项目模板 CMS-of-Blog - :frog: Vue.js博客内容管理系统(CMS) itsy-bitsy-data-structures - :european_castle: All the things you didn’t know you wanted to know about data structures Sortable - Sortable — is a JavaScript library for reorderable drag-and-drop lists on modern browsers and touch devices. No jQuery. Supports Meteor, AngularJS, React, Polymer, Knockout and any CSS library, e.g. Bootstrap. backbone - Give your JS App some Backbone with Models, Views, Collections, and Events node_redis - redis client for node chrome-plugin - Chrome扩展开发学习笔记 iBlog - 晚黎的个人博客，代码完全开源，喜欢就给个star吧！ better-console - colorbox - A light-weight, customizable lightbox plugin for jQuery lightbox2 - The original lightbox script, now on Github! rainyday.js - Simulating raindrops falling on a window html5-boilerplate - A professional front-end template for building fast, robust, and adaptable web apps or sites. hexo-qiniu-sync - Hexo七牛同步插件 pdf.js - PDF Reader in JavaScript HackMyResume - Generate polished résumés and CVs in HTML, Markdown, LaTeX, MS Word, PDF, plain text, JSON, XML, YAML, smoke signal, and carrier pigeon. faker.js - generate massive amounts of fake data in Node.js and the browser You-Dont-Know-JS - A book series on JavaScript. @YDKJS on twitter. You-Dont-Need-jQuery - Examples of how to do query, style, dom, ajax, event etc like jQuery with plain javascript. plupload - Plupload is JavaScript API for building file uploaders. It supports multiple file selection, file filtering, chunked upload, client side image downsizing and when necessary can fallback to alternative runtimes, like Flash and Silverlight. jquery-pjax - pushState + ajax = pjax node-inspector - Node.js debugger based on Blink Developer Tools passport - Simple, unobtrusive authentication for Node.js. handlebars.js - webpack-dashboard - A CLI dashboard for webpack dev server standard - :star2: JavaScript Style Guide, with linter &amp; automatic code fixer art-template - 性能卓越的 js 模板引擎 kails - A Web App like Ruby on Rails with Koa2, Webpack and Postgres github-widget - A widget showing your github details that you can embed in any website. redux - Predictable state container for JavaScript apps node-bunyan - a simple and fast JSON logging module for node.js services winston - a multi-transport async logging library for node.js Vue-cnodejs - 基于vue.js重写Cnodejs.org社区的webapp swagger-ui - 汉化了swagger-ui，修改了部分样式 node-uuid - Generate RFC-compliant UUIDs in JavaScript lightgallery.js - Full featured JavaScript image &amp; video gallery. No dependencies headroom.js - Give your pages some headroom. Hide your header until you need it pinyin - :cn: 汉字拼音 ➜ hàn zì pīn yīn front-end-collect - 分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者 form-data - A module to create readable &quot;multipart/form-data&quot; streams. Can be used to submit forms and file uploads to other web applications. nodemailer - ✉️ Send e-mails with Node.JS – easy as cake! email-extractor - extract emails from whole of website avalon - an elegant efficient express mvvm framework es6-cheatsheet - ES2015 [ES6] cheatsheet containing tips, tricks, best practices and code snippets ws - Simple to use, blazing fast and thoroughly tested WebSocket client and server for Node.js sequelize - An easy-to-use multi SQL dialect ORM for Node.js kibana - :bar_chart: Kibana analytics and search dashboard for Elasticsearch highcharts - Highcharts JS, the JavaScript charting framework phantomjs-node - PhantomJS integration module for NodeJS colors.js - get colors in your node.js console cheerio - Fast, flexible, and lean implementation of core jQuery designed specifically for the server. Moeditor - Your all-purpose markdown editor. flatpickr - lightweight and powerful datetimepicker with no dependencies howler.js - Javascript audio library for the modern web. gifify - 😻 Convert any video file to an optimized animated GIF. compression - Node.js compression middleware URI.js - Javascript URL mutation library commander.js - node.js command-line interfaces made easy request - 🏊🏾 Simplified HTTP request client. underscore - JavaScript’s utility _ belt resume.github.com - Resumes generated using the GitHub informations swagger-ui - Swagger UI is a collection of HTML, Javascript, and CSS assets that dynamically generate beautiful documentation from a Swagger-compliant API. js-cookie - A simple, lightweight JavaScript API for handling browser cookies d3 - Bring data to life with SVG, Canvas and HTML. :bar_chart::chart_with_upwards_trend::tada: angular-strap - AngularJS 1.2+ native directives for Bootstrap 3. adminlte-laravel - A Laravel 5 package that switchs default Laravel scaffolding/boilerplate to AdminLTE template and Pratt Landing Page with Bootstrap 3.0 toastr - Simple javascript toast notifications CowCat - Free, open-source CMS based on the Laravel PHP Framework register - 基于Laravel5.2和adminLTE通用模版开发的一个报名系统。功能上用到了gulp集成前端资源，generator快速自动生成和Entrust的RBAC权限管理。UI上用到了select2，dropzone，fileupload，toastr等等漂亮的插件。同时后台也支持Excel的到如何导出 someline-starter - Someline Starter is a PHP framework for quick building Web Apps and Restful APIs, with modern PHP design pattern foundation. NJBlog - express+mongodb+bootstrap blog system nodejs-cantas - Cantas is a real-time collaborative web application. Official repository node-simplecrawler - Flexible event driven crawler for node. mysql - A pure node.js JavaScript Client implementing the MySql protocol. You-Dont-Need-Lodash-Underscore - List of JavaScript methods which you can use natively + ESLint Plugin co - The ultimate generator based flow-control goodness for nodejs (supports thunks, promises, etc) promises-book - JavaScript Promise迷你书 async - Async utilities for node and the browser eventproxy - An implementation of task/event based asynchronous pattern. when - A solid, fast Promises/A+ and when() implementation, plus other async goodies. then.js - 史上最快，与 node callback 完美结合的异步流程控制库! q - A promise library for JavaScript bluebird - :bird: :zap: Bluebird is a full featured promise library with unmatched performance. wind - Asynchronous flow control in JavaScript, with JavaScript. Ghost - A simple, powerful publishing platform koa - Expressive middleware for node.js using ES2017 async functions nodemon - Monitor for any changes in your node.js application and automatically restart the server - perfect for development node-lessons - :closed_book:《Node.js 包教不包会》 by alsotang SUI-Mobile - SUI Mobile (MSUI)是由阿里巴巴国际UED前端出品的移动端UI库，轻量精美 vue-sui-demo - 用vue 和 SUI-Mobile 写了一个移动端demo，用来反馈学习vue的成果（禁用了SUI自带的路由，使用vue-router, vue-resource, webpack）[a web app written by vue &amp; sui-mobile] WebFrontEndStack - web front end stack: browsers, platforms, libraries, frameworks, tools etc. Front-End-Develop-Guide - 💰 Awsome The Front End Develop Guide：这份指南汇集了前端开发所使用语言的主流学习资源，并以开发者的视角进行整理编排而成。 slate - Beautiful static documentation for your API postcss - Transforming styles with JS plugins AlgorithmVisualizer - Algorithm Visualizer tips - Most commonly used git tips and tricks. vuejs-learn - (vue.js official website tutorials ，contains video , codes, baudi yun, youtube) 网路上有很多 VUE 综合应用的视频，但大部份的视频 ，都当你已经了解官网 所以讲的节奏难免偏快。 此视频(都是上代码)，以官网为重，将官网的观念，以视频搭配代码，实际演示。 如果官网有看不懂的地方，比对一下，视频跟代码，就会了解了。 减少你摸索的时间。(註：mvvm 的框架，不管是 ng , react, vue, avalonjs, 都是好的框架，而有经验的前端，至少都会两套以上的 mvvm。) nodeclub - :baby_chick:Nodeclub 是使用 Node.js 和 MongoDB 开发的社区系统 mean - MEAN (Mongo, Express, Angular, Node) - A Simple, Scalable and Easy starting point for full stack javascript web development - utilizing many of the best practices we’ve found on the way mongoose - MongoDB object modeling designed to work in an asynchronous environment. React-Dou - 豆瓣搜索App ReactNativeRubyChina - ReactNative iOS APP for RubyChina webfullstack-awesome - Web全栈工程师常用网址大全 javascript - JavaScript Style Guide regulex - JavaScript Regular Expression Parser &amp; Visualizer. regexr - RegExr is a HTML/JS based tool for creating, testing, and learning about Regular Expressions. electronic-wechat - :speech_balloon: A better WeChat on macOS and Linux. Built with Electron by Zhongyi Tong. fks - 前端技能汇总 Frontend Knowledge Structure Base - Multilingual and modular CMS built with Laravel 5.2 LaravelDatabaseDesigner - webpack - A bundler for javascript and friends. Packs many modules into a few bundled assets. Code Splitting allows to load parts for the application on demand. Through “loaders,” modules can be CommonJs, AMD, ES6 modules, CSS, Images, JSON, Coffeescript, LESS, … and your custom stuff. vue - A progressive, incrementally-adoptable JavaScript framework for building UI on the web. free-programming-books-zh_CN - :books: 免费的计算机编程类中文书籍，欢迎投稿 stackedit - In-browser markdown editor laravel-blog - a simple and awesome blog based on laravel 5. android-training-course-in-chinese - Android官方培训课程中文版 freeCodeCamp - The https://freeCodeCamp.com open source codebase and curriculum. Learn to code and help nonprofits. laravel-blog-demo - Laravel blog Demo APlayer - :lollipop: Wow, such a beautiful HTML5 music player DeerResume - MarkDown在线简历工具，可在线预览、编辑和生成PDF。功能更全的Online服务请点这里 http://deercv.com jekyll-materiallize - A jekyll blog theme based on materiallize three.js - JavaScript 3D library. bootstrap - Native AngularJS (Angular) directives for Bootstrap. Smaller footprint (20kB gzipped), no 3rd party JS dependencies (jQuery, bootstrap JS) required. Please read the README.md file before submitting an issue! material - Material design for AngularJS angular.js - AngularJS - HTML enhanced for web apps! material-ui - React Components that Implement Google’s Material Design. jQuery - 前端JQuery系列 FED - ✪ 这是一个很酷炫的前端网站搜集器，导航网 https://git.io/FED jQuery-File-Upload - File Upload widget with multiple file selection, drag&amp;drop support, progress bar, validation and preview images, audio and video for jQuery. Supports cross-domain, chunked and resumable file uploads. Works with any server-side platform (Google App Engine, PHP, Python, Ruby on Rails, Java, etc.) that supports standard HTML form file uploads. foundation-sites - The most advanced responsive front-end framework in the world. Quickly create prototypes and production code for sites that work on any kind of device. Semantic-UI - Semantic is a UI component framework based around useful principles from natural language. nodeclub - Nodeclub 是使用 Node.js 和 MongoDB 开发的社区系统 gulp-book - Gulp 入门指南 materialize - Materialize, a CSS Framework based on Material Design localtunnel - expose yourself colour-schemes - Colour schemes for a variety of editors created by Dayle Rees. socket.io - Realtime application framework (Node.JS server) laravel51 - Laravel5.1简单博客 DEMO http://note.mango.im/ jsPDF - Client-side JavaScript PDF generation for everyone. markdown-js - A Markdown parser for javascript Query-Digest-UI - A web ui for pt-query-digest or mk-query-digest to allow easier review management GMU - 基于zepto的ui组件库，适用于移动端 light7 - A Light and easy to use UI Lib weui-practice - weui-practice highlight.js - Javascript syntax highlighter rainbow - Simple syntax highlighting library written in javascript syntaxhighlighter - SyntaxHighlighter is a fully functional self-contained code syntax highlighter developed in JavaScript. sweetalert - A beautiful replacement for JavaScript’s “alert” PhotoSwipe - JavaScript image gallery for mobile and desktop, modular, framework independent wechat - 微信公共平台消息接口服务中间件 wechat-api - Wechat API/主动调用API Nginx server-configs-nginx - Nginx HTTP server boilerplate configs Docker - See Readme Objective-C Alcatraz - Package manager for Xcode Others awesome-chrome-devtools - Awesome tooling and resources in the Chrome DevTools ecosystem awesome-elasticsearch - A curated list of the most important and useful resources about elasticsearch: articles, videos, blogs, tips and tricks, use cases. All about Elasticsearch! php-co-koa - PHP异步编程: 手把手教你实现co与Koa docker-elk - The ELK stack powered by Docker and Compose. bash-guide - A guide to learn bash frontend-guidelines - Some HTML, CSS and JS best practices. front-end-best-practices - 一些前端的最佳实践，包括 HTML, CSS, JS awesome-design - :flags: Creative Resources for Developer and Designer :) iCSS - 谈谈一些有趣的 CSS 话题 blog - leehey’s blog – 请star或者watch CSS-Secrets - 《CSS 揭秘》这本书的大本营 XShellColorSchemes - what-happens-when-zh_CN - What-happens-when 的中文翻译，原仓库 https://github.com/alex/what-happens-when awesome-webpack-cn - webpack优秀中文文章 ResumeSample - Resume template for Chinese programmers . 程序员简历模板系列。包括PHP程序员简历模板、iOS程序员简历模板、Android程序员简历模板、Web前端程序员简历模板、Java程序员简历模板、C/C++程序员简历模板、NodeJS程序员简历模板、架构师简历模板以及通用程序员简历模板 phpspec-reference - A guide containing phpspec use cases phpspec-cheat-sheet - A cheat sheet for phpspec awesome-hyper - 🖥 Delightful Hyper plugins, themes, and resources weex - A framework for building Mobile cross-platform UI phpstorm-laravel-live-templates - Laravel Live Templates for PhpStorm Intellij-IDEA-F2E - Intellij IDEA / PHPStorm / WebStorm Front End Engineer Guide (中文) travis-ci-demo - A beginner tutorial of Travis CI for Node projects bs3-sublime-plugin - Twitter Bootstrap 3 Snippets Plugin for Sublime Text 2/3 document-style-guide - 中文技术文档的写作规范 articles - personal articles jstraining - 全栈工程师培训材料 awesome-vscode - A curated list of delightful VS Code packages and resources. vscode-tips-and-tricks - Collection of helpful tips and tricks for VS Code. fig-standards - PHP PSR代码标准中文版 awesome-yii2 - Yii2 干货集 coding-interview-university - A complete computer science study plan to become a software engineer. laracast - Laravel Tips dracula-theme - :scream: A dark theme for all the things! materialshell - A material design theme for your terminal. ✨ sublime - A collection of some of the best Sublime Text packages, themes, and goodies. git-cheat-sheet - :octocat: git and git flow cheat sheet Neovim-cn.gitgub.io - Handy-for-sublime-and-a-faster-better-workflow - after watching laracasts I thought hey I’ll make a collection of all these handy things. git-deploy-php - git-deploy-php is a simple php-based tool that deploys your Git repositories to FTP/SFTP servers, and keeps them updated automatically. blog - 没事写写文章，喜欢的话请点star，想订阅点watch，千万别fork！ FE-interview - 收集的前端面试题和答案 My-blog - 马云云在Github的学习片段 Back-End-Developer-Interview-Questions - 后端开发面试题，翻译自 https://github.com/arialdomartini/Back-End-Developer-Interview-Questions back-end-developer-interview-questions - A list of helpful back-end related questions you can use to interview potential candidates. Inspired by the git-repo https://github.com/darcyclarke/Front-end-Developer-Interview-Questions.git Front-end-Interview-questions - a collection about front-end development interview questions and answers free-programming-books - :books: Freely available programming books design-resource - A list of design resources. awesome-vue - A curated list of awesome things related to Vue.js EveryDaySport - 从今天开始做一个健康的程序员。 security-guide-for-developers - Security Guide for Developers (实用性开发人员安全须知) programming-skills-summary - An documentation to improve oneself sites - 【编程随想】收藏的各色网站 gov-takedowns - Text of government takedown notices as received. GitHub does not endorse or adopt any assertion contained in the following notices. wiki - awesome-laravel - A curated list of bookmarks, packages, tutorials, videos and other cool resources from the Laravel ecosystem notes - 技术笔记 awesome-php - 收集整理一些常用的PHP类库, 资源以及技巧. 以便在工作中迅速的查找所需… cn-mirror-awesome - 镜像类资源集 openresty-best-practices - github-cheat-sheet - A list of cool features of Git and GitHub. awesome-osx-command-line - Use your OS X terminal shell to do awesome things. awesome-macOS -  A curated list of awesome applications, softwares, tools and shiny things for macOS. Mycat-download-old - FullStackDeveloperCourse - 教你成为全栈工程师 subl - subl:// URL handler for Sublime Text 2 and Sublime Text 3 on Mac OSX koa-guide - koa guide in Chinese node-books - For those who love Node.js Back-End-Developer-Interview-Questions - A list of helpful back-end related questions you can use to interview potential candidates, test yourself or completely ignore. Front-end-Developer-Interview-Questions - A list of helpful front-end related questions you can use to interview potential candidates, test yourself or completely ignore. awesome-docker - :whale: A curated list of Docker resources and projects awesome - :sunglasses: Curated list of awesome lists gitignore - A collection of useful .gitignore templates HEAD - A list of everything that could go in the &lt;head&gt; of your document lemonade-stand - A handy guide to financial support for open source One-Click-to-Be-Pro - A list of the best resources to help you become a pro coreos-vagrant - Minimal Vagrantfile for Container Linux docker-resources - Docker resources collection. docker资源汇总 mongo.conf - MongoDB Config File Tutorials-for-Web-Developers - Tutorials for web developers including bash scripting, Linux commands, MongoDB. Actively updating. css - A mostly reasonable approach to CSS and Sass. regular-expression-cheat-sheet - Regular Expression Cheat Sheet - PCRE htaccess - A collection of useful .htaccess snippets. docker-cheat-sheet - Docker Cheat Sheet Learning-Sharing - 技术分享，工具分享，好玩的东西 git-recipes - :octocat: Git recipes in Chinese. 高质量的Git中文教程. shadowsocks-rss - ShadowsocksR update rss, SSR organization https://github.com/shadowsocksr CSS-Guidelines - a zh-CN translation Learn-Git-in-30-days - 這是 Will 保哥在 2013 第 6 屆 iT 邦幫忙鐵人賽年度大獎的得獎著作【30 天精通 Git 版本控管】，歡迎大家 fork 我，如果有看見任何文字勘誤，也歡迎利用 pull request 來通知我修正，謝謝！ Design-Pattern - :closed_book: design pattern 包教不包会 Modern-php - Modern PHP 书摘 gold-miner - 掘金翻译计划，翻译掘金上优质的英文文章 Front–end–tutorial - 前端知识 go-study-index - Go 语言学习资料索引 fig-standards - Standards either proposed or approved by the Framework Interop Group phphub-ui - Product planing and UI Design for PHPHub App and Web site. PHP-FIG - PHP-FIG PSR中文版 ios-good-practices - Good ideas for iOS development, by Futurice developers. android-best-practices - Do’s and Don’ts for Android development, by Futurice developers awesome-python-cn - Python资源大全中文版，包括：Web框架、网络爬虫、模板引擎、数据库、数据可视化、图片处理等，由伯乐在线持续更新。 codeparkshare - Python初学者（零基础学习Python、Python入门）书籍、视频、资料、社区推荐 815 - front-end-collect - 分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者 quick-look-plugins - List of useful Quick Look plugins for developers Mars - 腾讯移动Web前端知识库 AndroidDevTools - 收集整理Android开发所需的Android SDK、开发中用到的工具、Android开发教程、Android设计规范，免费的设计素材等。 awesome-laravel - 来自Laravel生态系统的精选资源大全，包括书签、包、教程、视频以及其它诸多很酷的资源。 AngularjsTutorial_cn - AngularJS入门教程——AngularJS中文社区提供 composer-doc-cn - Composer 中文文档 android-open-project - A categorized collection of Android Open Source Projects 微信公众号: codekk HowToBeAProgrammer - A guide on how to be a Programmer - originally published by Robert L Read iTerm2-Color-Schemes - Over 150 terminal color schemes/themes for iTerm/iTerm2 (with ports to Terminal, Konsole, PuTTY, Xresources, XRDB, and Terminator) Best-App - 收集&amp;推荐优秀的 Apps/硬件/技巧/周边等 hosts - :statue_of_liberty:最新可用的google hosts文件。镜像： PHP webshell - This is a webshell open source project laravel-meta - Metadata for your Eloquent model easy-php - A lightweight PHP framework for studying laravel-analytics - A Laravel package to retrieve pageviews and other data from Google Analytics laravel-mentions - End-to-end mentions in Laravel 5. BezierInfo-2 - A from-the-ground-up rewrite of https://pomax.github.io/bezierinfo, using react, babel, webpack, and other modern things. webed - WebEd CMS - a cms based on Laravel 5.4 Lychee - A great looking and easy-to-use photo-management-system you can run on your server, to manage and share photos. zhihu-app - Laravel + Vue.js 开发知乎视频 talk - Talk is a Laravel 5 based realtime users messaging and chatting system phpmnd - PHP Magic Number Detector generator - Laravel 5.3+ Scaffold Generator, Support both bootstrap and Semantic UI performance - PHP performance tool analyser your script on time, memory usage and db query. Support Laravel and Composer for web, web console and command line interfaces. jigsaw - Simple static sites with Laravel’s Blade GifExceptionBundle - :stuck_out_tongue: The GhostBuster of your exception page! monolog - Sends your logs to files, sockets, inboxes, databases and various web services laracsv - A Laravel package to easily generate CSV files from Eloquent model laravel-packager - A cli tool for creating Laravel packages zhihu-app - laravel-vue-zhihu yii - Yii PHP Framework 1.1.x laravel-html - Painless html generation laravel-form-builder - Laravel Form builder for version 5! App - Laravel e-commerce Application. myPersimmon - 基于Laravel 5.4 的开发的博客系统，代号：myPersimmon spiral - PHP7/PSR framework with military grade tools shadowsocks-manage-system - Shadowsocks 翻墙管理系统 linguist - Localization support for the Laravel framework elasticsearch-php - Official PHP low-level client for Elasticsearch. laravel-elasticsearch - Elasticsearch for Laravel Elastica - Elastica is a PHP client for elasticsearch Elasticquent - Maps Laravel Eloquent models to Elasticsearch types Platform - Laravel Platform application provides a very flexible and extensible way of building your custom application. doorman - Limit access to your Laravel applications by using invite codes yii2-payeer - laravel-payeer - Laravel package for payeer payments sweet-alert - A simple PHP package to show SweetAlerts with the Laravel Framework chinese-calendar - :date: 中国农历（阴历）与阳历（公历）转换与查询工具 Laravel-QuestionAnswer - Vote based Question &amp; Answer site built using Laravel 5.4, material design, x-editable and jQuery Upvote with email and database notifications. laravel-opcache - Artisan commands for PHP OPcache phabricator - Open software engineering platform and fun adventure game ecjia-daojia - EC+（ecjia）到家是一款可开展O2O业务的移动电商系统。它包含：移动端APP，采用原生模式开发，覆盖使用iOS 及Android系统的移 动终端；后台系统，针对平台日常运营维护的平台后台，针对入驻店铺管理的商家后台，独立并行；移动端H5，能够灵活部署于微信及其他APP、网页等。 taskPHP - taskPHP基于原生态php开发的定时计划任务框架,利用多进程实现任务的分配和运行,利用原生态php内存共享实现进程间通信,支持linux和windows。有较好的伸缩性、扩展性、健壮稳定性而被多家公司使用，同时也希望开源爱好者一起贡献。 Laravel-Parse - A Parse SDK bridge for Laravel 5 laravel-model-uuid - This package allows you to easily work with UUIDs in your Laravel models dispatcher - Dispatcher is a Laravel artisan command scheduling tool used to schedule artisan commands within your project so you don’t need to touch your crontab when deploying. design-patterns - Contains examples of design patterns that implemented in php sudo-su - Laravel package to easily login as other users during development. valet-windows - Laravel Valet for Windows. valet4windows - Windows version of Laravel Valet stacker - Stacker - The environment for local web development, ready for use. git-profile - Utility that helps you switch git configurations with ease. laravel-ban - Laravel Ban simplify blocking and banning Eloquent models. laravel-follow - :heart: This package helps you to add user based follow system to your model. easy-sms - :calling: 一款满足你的多种发送需求的短信发送组件 humhub - HumHub - Open Source Social Network php-malware-finder - Detect potentially malicious PHP files hashids.php - A small PHP library to generate YouTube-like ids from numbers. Use it when you don’t want to expose your database ids to the user. phpspec-laravel - Test your Laravel applications with phpspec Behat - BDD in PHP prophecy - Highly opinionated mocking framework for PHP 5.3+ doctrine2 - Doctrine 2 Object Relational Mapper (ORM) money - PHP implementation of Fowler’s Money pattern. flyspray - Flyspray Bug Tracking System daza-backend - 「daza.io」服务端，基于 Laravel 5.3 开发的 APIOnly 项目 blog - :star2: PJ Blog is an open source blog built with Laravel and Vue.js. eloquent-taggable - Easily add the ability to tag your Eloquent models in Laravel. laravel-tagging - Tag support for Laravel Eloquent models - Taggable Trait phpstan - PHP Static Analysis Tool - discover bugs in your code without running it! news.laravel-china.org - Source Code of the https://news.laravel-china.org/ website, build on top of Laravel 5.1. Laravel 资讯网站源代码，使用 Laravel 5.1 构建 easy-tips - A little tips in my code career psalm - A static analysis tool for finding errors in PHP applications laravel-gitscrum - Laravel GitScrum is a free application to task management of the day-to-day. Git + Scrum = Team More Productive php-github-api - A simple PHP GitHub API client, Object Oriented, tested and documented. For 5.5+. cdn - CDN Assets Manager Package for Laravel. grumphp - A PHP code-quality tool php-ref - A better alternative to print_r / var_dump Tasks - Simple tasks &amp; notes manager written in PHP, jQuery and Bootstrap using a custom flat file database. PhpSpreadsheet - A pure PHP library for reading and writing spreadsheet files spa-starter-kit - A highly opinionated starter kit for building Single Page Applications with Laravel and Vue.js flox - Self Hosted Movie, Series and Anime Watch List server - ☁️ Nextcloud server, a safe home for all your data Laravel-GitHub - A GitHub bridge for Laravel 5 country - Rinvex Country is a simple and lightweight package for retrieving country details with flexibility. A whole bunch of data including name, demonym, capital, iso codes, dialling codes, geo data, currencies, flags, emoji, and other attributes for all 250 countries worldwide at your fingertips. adminer - Database management in a single PHP file grav - Modern, Crazy Fast, Ridiculously Easy and Amazingly Powerful Flat-File CMS migrations-generator - Laravel Migrations Generator: Automatically generate your migrations from an existing database schema. laravel-graphql - Facebook GraphQL for Laravel 5. It supports Relay, eloquent models, validation and GraphiQL. sequel-pro-laravel-export - A Sequel Pro bundle to generate Laravel migration files from existing tables. awesome-appsec - A curated list of resources for learning about application security testbench - [Package] Laravel Testing Helper for Packages Development L5-Swagger - Swagger integration to Laravel 5 PHP-CS-Fixer - A tool to automatically fix PHP coding standards issues SecLists - SecLists is the security tester’s companion. It is a collection of multiple types of lists used during security assessments. List types include usernames, passwords, URLs, sensitive data grep strings, fuzzing payloads, and many more. laravel-tags - Add tags and taggable behaviour to your Laravel app jitamin - Jitamin is a free software written in PHP, intended to handle the project management over the web. chatter - Chatter is a Simple Laravel Forum Package voyager - Voyager - The Missing Laravel Admin Xblog - A powerful and responsive blog system powered by laravel 5.4. labs - This is a collection of tutorials for learning how to use Docker with various tools. Contributions welcome. phpspider - 《我用爬虫一天时间“偷了”知乎一百万用户，只为证明PHP是世界上最好的语言 》所使用的程序 Laracast-Tutorials - Various Tutorials from www.laracasts.com PHP-Vars-To-Js-Transformer - Transform PHP types to JavaScript deployer - Deployer is a free and open source deployment tool. math-php - Powerful modern math library for PHP: Features descriptive statistics and regressions; Continuous and discrete probability distributions; Linear algebra with matrices and vectors, Numerical analysis; special mathematical functions; Algebra underscore-php - A redacted PHP port of Underscore.js with additional functions and goodies – Available for Composer and Laravel laravel-permission - Associate users with roles and permissions SleepingOwlAdmin - 🦉 Administrative interface builder for Laravel (Laravel admin) ip-location-zh - 查询并返回IP地址的真实地理位置 Carbon - A simple PHP API extension for DateTime. 1000ideas - A github repository for 1000 free ideas Mobile-Detect - Mobile_Detect is a lightweight PHP class for detecting mobile devices (including tablets). It uses the User-Agent string combined with specific HTTP headers to detect the mobile environment. laravel-laradock-phpstorm - Wiring up Laravel, LaraDock [Laravel+Docker] and PHPStorm to play nice together complete with remote xdebug’ing as icing on top! laravel-admin - Build a full-featured administrative interface in ten minutes PHPloy - PHPloy - Incremental Git (S)FTP deployment tool that supports multiple servers, submodules and rollbacks. envoy-deployscript - Laravel Envoy Deployment Script simple-php-git-deploy - Automatically deploy the code using PHP and Git deployer - A deployment tool written in PHP with support for popular frameworks out of the box Recipe - Collection of PHP Functions SRL-PHP - Simple Regex Language Twig - Twig, the flexible, fast, and secure template language for PHP Silex - The PHP micro-framework based on the Symfony Components Awsome-Front-End-learning-resource - :octocat:GitHub最全的前端资源汇总仓库（包括前端学习、开发资源、求职面试等） YLD-with-Php - 深入学习php revisionable - Easily create a revision history for any laravel model phpDocumentor2 - Documentation Generator for PHP laravel-taggable - Taggable Trait for using tag inside Laravel Eloquent models, with Baum’s Nested Set pattern support. ubench - Micro PHP benchmark library laravel-pjax - A pjax middleware for Laravel 5 jpush-api-php-client - JPush’s officially supported PHP client library for accessing JPush APIs. 极光推送官方支持的 PHP 版本服务器端 SDK。 simple-qrcode - An easy-to-use PHP QrCode generator. auto-correct - 自动给中英文之间加入合理的空格并纠正专用名词大小写 oauth2-server - A spec compliant, secure by default PHP OAuth 2.0 Server html-to-markdown - Convert HTML to Markdown with PHP easy-log-handler - Human-friendly log files that make you more productive SocketLog - 微信调试、API调试和AJAX的调试的工具，能将日志通过WebSocket输出到Chrome浏览器的console中 phpDesignPattern - PHP中常用的设计模式的一些小demo laravel-package-top-100 - 对 Packagist 上打了 Laravel 标签 的扩展包进行整理，截止到现在 2016 年 8 月 9号，有超过 7176 个扩展包，以下是下载量最大的 100 个。 laravel-mediable - Laravel-Mediable is a package for easily uploading and attaching media files to models with Laravel 5. modules - Laravel 5 Modules laravel-hackathon-starter - :computer: :octocat: A hackathon/MVP boilerplate for laravel web applications. Start your hackathons without hassle. former - A powerful form builder, for Laravel and other frameworks (stand-alone too) Laravel-5-Bootstrap-3-Starter-Site - Laravel Framework 5 Bootstrap 3 Starter Site is a basic application with news, photo and video galeries. october - Free, open-source, self-hosted CMS platform based on the Laravel PHP Framework. lumen - thinkphp - ThinkPHP3.2 ——基于PHP5的简单快速的面向对象的PHP框架 php-must-watch - list of interesting conference talks and videos on PHP - mongodm - MongoDB ORM that includes support for references,embed and multilevel inheritance. laravel-apidoc-generator - Laravel API Documentation Generator Laravel-5-Generators-Extended - This package extends the core file generators that are included with Laravel 5 flatten - A package to flatten any website to plain HTML laravel-user-verification - PHP package built for Laravel 5.* to easily handle a user verification and validate the e-mail socialite - :octocat: Socialite is an OAuth2 Authentication tool. It is inspired by laravel/socialite, you can easily use it without Laravel. socialite - BearyChat - A PHP package for sending message to the BearyChat with the Incoming Webhook, and creating response payload for the Outgoing Robot. Laravel-BearyChat - A Laravel integration for the BearyChat package to send message to the BearyChat. pitaya - Used to quickly build electric business platform laracart - Laravel Shopping Cart Package https://laracart.lukepolo.com laravel-shop - Laravel shop package aimeos-laravel - Laravel e-commerce package for high performance online shops LaravelShoppingcart - A simple shopping cart implementation for Laravel html - HTML and Form Builders for the Laravel Framework phplint - :bug: PHP syntax linter. php-ml - PHP-ML - Machine Learning library for PHP vuedo - Vuedo is a blog platform, built with Laravel and Vue.js. geographer - PHP library that knows how countries and cities are called in any language JsonRPC - Simple Json-RPC PHP client/server that just works. laravel-payum - Rich payment solutions for Laravel framework. Paypal, payex, authorize.net, be2bill, omnipay, recurring paymens, instant notifications and many more Goutte - Goutte, a simple PHP Web Scraper php-curl-class - PHP Curl Class makes it easy to send HTTP requests and integrate with web APIs astral - Organize Your GitHub Stars With Ease laravel-activitylog - Log activity inside your Laravel app ngx_lua_php_queue - nginx+lua+php+redis实现单业务排队系统架构 baigoSSO - 单点登录系统 Lcrawl - 一只优雅的正方教务系统爬虫。 ardent - Self-validating, secure and smart models for Laravel’s Eloquent ORM Validation - The most awesome validation engine ever created for PHP phpsms - :iphone::rocket:May be the most intelligent, elegant sms send library in php (可能是目前最聪明、优雅的php短信发送库了) 33pu - 33号铺是使用codeigniter和淘宝API制作的淘宝客瀑布流系统 amango - Amango•芒果微信公众号管理系统 wstmall - 基于thinkphp 3.2开发的开源多用户O2O商城系统 Laravel-Excel - An eloquent way of importing and exporting Excel and CSV files for Laravel with the power of PHPExcel laravel-dompdf - A DOMPDF Wrapper for Laravel laravel-menu - Html menu generator for Laravel laravel-log-viewer - :dromedary_camel: Laravel 5 log viewer Presenter - Easy view presenters in your apps. image - PHP Image Manipulation Purifier - HTMLPurifier for Laravel 5 laravel-sitemap - A not so simple sitemap generator for Laravel flash - Easy flash notifications laravel-backup - A package to backup your Laravel app TestDummy - Easy factories for PHP integration testing. laravel-generator - InfyOm Laravel Generator - API, Scaffold, CRUD Laravel Generator iseed - Laravel 5 Inverse Seed Generator toastr-for-laravel5 - toastrjs for laravel5.* phphub5 - PHPHub Ver 5 is a Forum project Powered by Laravel 5.1, and it is also the project build up PHP &amp; Laravel China community laracasts-downloader - Downloads new lessons and series from laracasts if there are updates. Or the whole catalogue. laracasts-craw - craw laracasts.com videos Gitamin - An open-source, self-hosted git repository management software based on the Laravel PHP Framework. Cachet - An open source status page system for everyone. jwt-auth - JSON Web Token Authentication for Laravel &amp; Lumen l5-repository - Laravel 5 - Repositories to abstract the database layer api - A RESTful API package for the Laravel and Lumen frameworks. clockwork - Server-side component of Clockwork, a Chrome extension for PHP development. laravel-terminal - Runs artisan command in web application laravel-tracy - A Laravel Package to integrate Nette Tracy Debugger tracy - 😎 Tracy: the addictive tool to ease debugging PHP code for cool developers. Friendly design, logging, profiler, advanced features like debugging AJAX calls or CLI support. You will love it. pinyin - :cn: 基于词库的中文转拼音优质解决方案 PrestaShop - PrestaShop offers a free, fully scalable, Open Source e-commerce solution. php-dockerized - Dockerized PHP development stack: Nginx, MySQL, MongoDB, PHP-FPM, HHVM, Memcached, Redis, Elasticsearch and RabbitMQ phpspec - SpecBDD Framework for PHP mockery - Mockery is a simple yet flexible PHP mock object framework for use in unit testing with PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a test double framework with a succint API capable of clearly defining all possible object operations and interactions using a human readable Domain Specific Language (DSL). PHP-DI - The dependency injection container for humans Hifone - A free, open-source, self-hosted forum software based on the Laravel PHP Framework. php-spider - A configurable and extensible PHP web spider crawler - Crawl all links found on a website zhihuSpider - A zhihu Spider.Just for fun. Pagerfanta - Pagination for PHP. PHPVerbalExpressions - PHP Regular expressions made easy koel - A personal music streaming server that works. laravel - A PHP Framework For Web Artisans laravel-alipay - Laravel5集成支付的SDK rememberable - Query caching for Laravel flysystem - Abstraction for local and remote filesystems whoops - PHP errors for cool kids Pimple - A small PHP 5.3 dependency injection container LaravelBlog - Laravel 5 Blog repository - Laravel Repositories is a package for Laravel 5 which is used to abstract the database layer. This makes applications much easier to maintain. laravel-5-blog - 一个用 laravel 5 开发的 博客系统 entrust - Role-based Permissions for Laravel 5 laravel5-angular-material-starter - Get started with Laravel 5.3 and AngularJS (material) magento2 - All Submissions you make to Magento Inc. (“Magento”) through GitHub are subject to the following terms and conditions: (1) You grant Magento a perpetual, worldwide, non-exclusive, no charge, royalty free, irrevocable license under your applicable copyrights and patents to reproduce, prepare derivative works of, display, publically perform, sublicense and distribute any feedback, ideas, code, or other information (“Submission”) you submit through GitHub. (2) Your Submission is an original work of authorship and you are the owner or are legally entitled to grant the license stated above. (3) You agree to the Contributor License Agreement found here: https://github.com/magento/magento2/blob/master/CONTRIBUTOR_LICENSE_AGREEMENT.html laravel-mongodb - A MongoDB based Eloquent model and Query builder for Laravel (Moloquent) guzzle - Guzzle, an extensible PHP HTTP client materialize-blog - redesign blog using material design laravel-sms - :iphone::heavy_check_mark:A mobile phone number validation solution based on laravel (基于Laravel的手机号验证解决方案) laravel-ide-helper - Laravel IDE Helper swiftmailer - Comprehensive mailing tools for PHP DesignPatternsPHP - sample code for several design patterns in PHP ThinkSDK - 基于ThinkPHP的各大开放平台 Open API SDK 扩展。 Swoole-Framework - 一个轻量级的Swoole框架，引入依赖注入和回调绑定，简洁的路由分发，类似phalcon的缓存封装，类似TP的控制器和模型 portal - The Laravel.io Community Portal invoiceninja - Invoices, expenses &amp; time-tracking built with Laravel ilogme - Demo: php-laravel-mysql-sample - laravel5-cheatsheet - A quick reference guide (cheat sheet) for Laravel 5.1 LTS, listing artisan, composer, routes and other useful bits of information. Laravel-Administrator - An administrative interface package for Laravel Faker - Faker is a PHP library that generates fake data for you zys - high performance service framework based on yaf and swoole curl - Curl laravel-debugbar - Laravel Debugbar (Integrates PHP Debug Bar) laravel-angular-comment-app - Code for the scotch.io tutorial: Laravel and Angular Single Page Application: A Commenting System PHP-MySQLi-Database-Class - Wrapper for a PHP MySQL class, which utilizes MySQLi and prepared statements. PHPWord - A pure PHP library for reading and writing word processing documents PHPExcel - A pure PHP library for reading and writing spreadsheet files PHPMailer - The classic email sending library for PHP Learn-Laravel-5 - Laravel 5 系列入门教程 kint - Kint - a powerful and modern PHP debugging tool. php-markdown - Parser for Markdown and Markdown Extra derived from the original Markdown.pl by John Gruber. lpisme - Lpisme, A Typecho Theme phpRedisAdmin - Simple web interface to manage Redis databases. wechat-php-sdk - 微信公众平台php开发包, weixin developer SDK. think - ThinkPHP5——为API开发而设计的高性能PHP框架（基于PHP5.4+） wechat - :package: It is probably the best SDK in the world for developing Wechat App. laravel-wechat-sdk - 微信公众平台 Laravel SDK php-curlmulti - Beyond all doubts,It is the best php curl library. Perl diff-so-fancy - Good-lookin’ diffs. Actually… nah… The best-lookin’ diffs. :tada: PowerShell fonts - Patched fonts for Powerline users. Python fuck-login - 模拟登录一些知名的网站，为了方便爬取需要登录的网站 zhihu - 抓取知乎问题 zhihu_spider - 知乎爬虫 leetcode_python - leetcode solution by python v2ex - Community running on Google App Engine awesome-cheatsheet - :beers: awesome cheatsheet easytrader - 提供券银河/银河客户端/广发/湘财证券/雪球的基金、股票自动程序化交易以及自动打新，支持跟踪 joinquant /ricequant 模拟交易 和 实盘雪球组合, 量化交易组件 bypy - Python client for Baidu Yun (Personal Cloud Storage) 百度云/百度网盘Python客户端 iScript - 各种脚本 – 关于 虾米 xiami.com, 百度网盘 pan.baidu.com, 115网盘 115.com, 网易音乐 music.163.com, 百度音乐 music.baidu.com, 360网盘/云盘 yunpan.cn, 视频解析 flvxz.com, bt torrent ↔ magnet, ed2k 搜索, tumblr 图片下载, unzip AppleDNS - Apple 网络服务加速配置。（少数派、Appinn、Mac玩儿法 推荐） wooyun_public - 乌云公开漏洞、知识库爬虫和搜索 crawl and search for wooyun.org public bug(vulnerability) and drops zhao - 【编程随想】整理的《太子党关系网络》，专门揭露赵国的权贵 scrapy - Scrapy, a fast high-level web crawling &amp; scraping framework for Python. pyspider - A Powerful Spider(Web Crawler) System in Python. scikit-learn - scikit-learn: machine learning in Python gitsome - A supercharged Git/GitHub command line interface (CLI). An official integration for GitHub and GitHub Enterprise: https://github.com/integrations/gitsome mackup - Keep your application settings in sync (OS X/Linux) ChatBotCourse - 自己动手做聊天机器人教程 linux - Linux related notes. docker-curriculum - :dolphin: A comprehensive tutorial on getting started with Docker! nginx-proxy - Automated nginx proxy for Docker containers using docker-gen you-get - :arrow_double_down: Dumb downloader that scrapes the web distribute_crawler - 使用scrapy,redis, mongodb,graphite实现的一个分布式网络爬虫,底层存储mongodb集群,分布式使用redis实现,爬虫状态显示使用graphite实现 YouCompleteMe - A code-completion engine for Vim AlfredWorkflow.com - A public Collection of Alfred Workflows. Ruby pdfkit - A Ruby gem to transform HTML + CSS into PDFs using the command-line utility wkhtmltopdf devdocs - API Documentation Browser logstash - Logstash - transport and process your logs, events, or other data Design-patterns - 23种设计模式,学习备忘录,一天一模式, 轻松学到家 dotfiles - YADR - The best vim,git,zsh plugins and the cleanest vimrc you’ve ever seen Shell elasticsearch-definitive-guide-cn - Elasticsearch权威指南中文版 shadowsocks_install - Auto install shadowsocks server，thanks 秋水逸冰 settler - git-extras - GIT utilities – repo summary, repl, changelog population, author commit percentages and more dphp - 在2分钟内极速构建超轻量级docker + php全功能开发测试环境 serverspeeder - 锐速破解版 shadowsocks_install - Auto Install Shadowsocks Server for CentOS/Debian/Ubuntu dotfiles - :wrench: .files, including ~/.macos — sensible hacker defaults for macOS laravel-ubuntu-init - A shell script for setting up Laravel Production environment on Ubuntu 14.04 &amp; Ubuntu 16 system. heroku-buildpack-php - A more advanced PHP buildpack for Heroku, inspired by the Node.js buildpack docker-hexo - 将 Hexo 装入 Docker 做成镜像. heroku-buildpack-php - The official PHP buildpack for Heroku. YaHei-Consolas-Hybrid-1.12 - YaHei Consolas Hybrid 字体 tpm - Tmux Plugin Manager docker-nginx-php - An Ubuntu, Nginx and PHP stack Built in Docker dockerfiles - Various Dockerfiles I use on the desktop and on servers. dokku - A docker-powered PaaS that helps you build and manage the lifecycle of applications gitflow - Git extensions to provide high-level repository operations for Vincent Driessen’s branching model. docker-tutorial-cn - docker 教程 centos 6.6 laraedit-docker - Dockerized version of Laravel Homestead laradock - A Docker PHP development environment. docker_practice - Learn and understand Docker, with real DevOps practice! git-ftp - Uses Git to upload only changed files to FTP servers. oh-my-fish - The Fishshell Framework. oh-my-zsh - A delightful community-driven (with 1,000+ contributors) framework for managing your zsh configuration. Includes 200+ optional plugins (rails, git, OSX, hub, capistrano, brew, ant, php, python, etc), over 140 themes to spice up your morning, and an auto-update tool so that makes it easy to keep up with the latest updates from the community. ops_doc - 运维简洁实用手册 Swift iina - The modern video player for macOS. ShadowsocksX-NG - Next Generation of ShadowsocksX TypeScript angular-cli - CLI tool for Angular Vim script vim-galore - :mortar_board: All things Vim! SpaceVim - :two_hearts: A community-driven vim distribution inspired by spacemacs t-vim - :apple: A dark power config for Vim. vim - vim配置文件和插件 vimrc - The ultimate Vim configuration: vimrc learn-vim - vim 实操教程 VimL spf13-vim - The ultimate vim distribution Vue vue2-elm - 基于 vue2 + vuex 构建一个具有 45 个页面的大型单页面应用 jackblog-vue - Jackblog vue 版, 个人博客系统, 使用 vue, vuex, vue-resource, vue-router, vue-strap, vue-validator, vue-toastr 等. daza-frontend - 「daza.io」前端，使用 Vue.js + Vuex 开发 vue-material - Material design for Vue.js vue-hackernews - HackerNews clone with Vue.js mint-ui - Mobile UI elements for Vue.js iview - A high quality UI Toolkit built on Vue.js element - A Vue.js 2.0 UI Toolkit for Web putianxi.github.io - 滚蛋吧！莆田系 vux - Vue UI Components based on WeUI cnode-vue - Vue版 cnodejs.org社区 WebApp License To the extent possible under law, entimm has waived all copyright and related or neighboring rights to this work."}],"posts":[{"title":"关于文件大小写","slug":"关于文件大小写","date":"2017-06-14T07:50:05.000Z","updated":"2017-06-14T08:01:04.000Z","comments":true,"path":"2017/06/14/关于文件大小写/","link":"","permalink":"https://entimm.com/2017/06/14/关于文件大小写/","excerpt":"突然发现自己的电脑中，git对文件大小写是不敏感的，执行下面的命令吧 1234# 全局git config --global core.ignorecase false# 项目git config core.ignorecase false 修正文件大小写受文件系统的影响，直接修改可能会行不通12git mv filename FileName# fatal: destination exists 方案1 12git mv filename filename_tmpgit mv filename_tmp FileName 方案2(awesome) 1git mv -f filename FileName","text":"突然发现自己的电脑中，git对文件大小写是不敏感的，执行下面的命令吧 1234# 全局git config --global core.ignorecase false# 项目git config core.ignorecase false 修正文件大小写受文件系统的影响，直接修改可能会行不通12git mv filename FileName# fatal: destination exists 方案1 12git mv filename filename_tmpgit mv filename_tmp FileName 方案2(awesome) 1git mv -f filename FileName","categories":[],"tags":[]},{"title":"git本地化操作","slug":"git本地化操作","date":"2017-06-13T03:04:14.000Z","updated":"2017-06-13T03:12:20.000Z","comments":true,"path":"2017/06/13/git本地化操作/","link":"","permalink":"https://entimm.com/2017/06/13/git本地化操作/","excerpt":"很多时候我们会有一些本地化的代码修改操作，却并不想污染到代码仓库，有如下技巧 .git/info/exclude文件中进行文件的跟踪忽略，效果同.gitignore 假定开发人员不会更改文件,此标志用于提高 not-changing 文件夹(如SDK)的性能。git update-index –skip-worktree 用于命 GIT 不再染指特定文件,即便开发人员可能更改它git update-index –assume-unchanged","text":"很多时候我们会有一些本地化的代码修改操作，却并不想污染到代码仓库，有如下技巧 .git/info/exclude文件中进行文件的跟踪忽略，效果同.gitignore 假定开发人员不会更改文件,此标志用于提高 not-changing 文件夹(如SDK)的性能。git update-index –skip-worktree 用于命 GIT 不再染指特定文件,即便开发人员可能更改它git update-index –assume-unchanged","categories":[],"tags":[]},{"title":"mysql配置远程访问","slug":"mysql配置远程访问","date":"2017-06-13T02:21:25.000Z","updated":"2017-06-13T02:41:48.000Z","comments":true,"path":"2017/06/13/mysql配置远程访问/","link":"","permalink":"https://entimm.com/2017/06/13/mysql配置远程访问/","excerpt":"建立远程访问用户12345GRANT ALL PRIVILEGES ON *.* TO 'YOURUSER'@'%' IDENTIFIED BY 'YOURPASSWORD' WITH GRANT OPTION;FLUSH PRIVILEGES;#查看结果:SELECT * from information_schema.user_privileges where grantee like \"'YOURUSER'%\"; 配置my.cnf,通常是/etc/mysql/my.cnf，找到并注释掉下面语句 123bind-address = 127.0.0.1 # 或者改成 bind-address = 0.0.0.0skip-networking 重启服务器 Bonus-Tip: Revoke AccessIf you accidentally grant access to a user, then better have revoking option handy. 12345#Following will revoke all options for THEUSER from all machines:REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'THEUSER'@'%';#Following will revoke all options for THEUSER from particular IP:mysql&gt; REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'THEUSER'@'1.2.3.4'; Its better to check information_schema.user_privileges table after running REVOKE command. If you see USAGE privilege after running REVOKE command, its fine. It is as good as no privilege at all. I am not sure if it can be revoked.","text":"建立远程访问用户12345GRANT ALL PRIVILEGES ON *.* TO 'YOURUSER'@'%' IDENTIFIED BY 'YOURPASSWORD' WITH GRANT OPTION;FLUSH PRIVILEGES;#查看结果:SELECT * from information_schema.user_privileges where grantee like \"'YOURUSER'%\"; 配置my.cnf,通常是/etc/mysql/my.cnf，找到并注释掉下面语句 123bind-address = 127.0.0.1 # 或者改成 bind-address = 0.0.0.0skip-networking 重启服务器 Bonus-Tip: Revoke AccessIf you accidentally grant access to a user, then better have revoking option handy. 12345#Following will revoke all options for THEUSER from all machines:REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'THEUSER'@'%';#Following will revoke all options for THEUSER from particular IP:mysql&gt; REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'THEUSER'@'1.2.3.4'; Its better to check information_schema.user_privileges table after running REVOKE command. If you see USAGE privilege after running REVOKE command, its fine. It is as good as no privilege at all. I am not sure if it can be revoked.","categories":[],"tags":[]},{"title":"那些概念","slug":"那些概念","date":"2017-05-18T15:43:36.000Z","updated":"2017-05-18T15:43:55.000Z","comments":true,"path":"2017/05/18/那些概念/","link":"","permalink":"https://entimm.com/2017/05/18/那些概念/","excerpt":"全局变量的缺点全局变量的优点是使用方便。 其缺点也是明显的，这里指针对两点说明 不能保证值的正确性；因为其作用域是全局，所以程序范围内都可以修改它的值，如果出现错误非常难以发现。 如果在多线程中使用全局变量，你的程序将会错的一塌糊涂。多线程会修改另一个线程使用的全局变量的值，如果不注意，一旦出错后果不堪设想。所以在这种情况下万不得意不要使用全局变量。 增加了模块的偶合 全局变量保存在静态存贮区，程序开始运行时为其分配内存，程序结束释放该内存。与局部变量的动态分配、动态释放相比，生存期比较长，因此过多的全局变量会占用较多的内存单元。 全局变量破坏了函数的封装性能。前面的章节曾经讲过，函数象一个黑匣子，一般是通过函数参数和返回值进行输入输出，函数内部实现相对独立。但函数中如果使用了全局变量，那么函数体内的语句就可以绕过函数参数和返回值进行存取，这种情况破坏了函数的独立性，使函数对全局变量产生依赖。同时，也降低了该函数的可移植性。 全局变量使函数的代码可读性降低。由于多个函数都可能使用全局变量，函数执行时全局变量的值可能随时发生变化，对于程序的查错和调试都非常不利。 全局函数 静态方法global method适合定义一种与任何对象无紧密联系的服务 static method适合定义与对象类型关系密切，但是与单一对象不十分密切的服务。 函数副作用&amp;纯函数在计算机科学中，函数副作用指当调用函数时，除了返回函数值之外，还对主调用函数产生附加的影响。例如修改全局变量（函数外的变量）或修改参数。 函数副作用会给程序设计带来不必要的麻烦，给程序带来十分难以查找的错误，并降低程序的可读性。严格的函数式语言要求函数必须无副作用。 如果一个函数通过隐式（Implicit）方式，从外界获取数据，或者向外部输出数据，那么，该函数就不是纯函数，叫作非纯函数（Impure Function）。","text":"全局变量的缺点全局变量的优点是使用方便。 其缺点也是明显的，这里指针对两点说明 不能保证值的正确性；因为其作用域是全局，所以程序范围内都可以修改它的值，如果出现错误非常难以发现。 如果在多线程中使用全局变量，你的程序将会错的一塌糊涂。多线程会修改另一个线程使用的全局变量的值，如果不注意，一旦出错后果不堪设想。所以在这种情况下万不得意不要使用全局变量。 增加了模块的偶合 全局变量保存在静态存贮区，程序开始运行时为其分配内存，程序结束释放该内存。与局部变量的动态分配、动态释放相比，生存期比较长，因此过多的全局变量会占用较多的内存单元。 全局变量破坏了函数的封装性能。前面的章节曾经讲过，函数象一个黑匣子，一般是通过函数参数和返回值进行输入输出，函数内部实现相对独立。但函数中如果使用了全局变量，那么函数体内的语句就可以绕过函数参数和返回值进行存取，这种情况破坏了函数的独立性，使函数对全局变量产生依赖。同时，也降低了该函数的可移植性。 全局变量使函数的代码可读性降低。由于多个函数都可能使用全局变量，函数执行时全局变量的值可能随时发生变化，对于程序的查错和调试都非常不利。 全局函数 静态方法global method适合定义一种与任何对象无紧密联系的服务 static method适合定义与对象类型关系密切，但是与单一对象不十分密切的服务。 函数副作用&amp;纯函数在计算机科学中，函数副作用指当调用函数时，除了返回函数值之外，还对主调用函数产生附加的影响。例如修改全局变量（函数外的变量）或修改参数。 函数副作用会给程序设计带来不必要的麻烦，给程序带来十分难以查找的错误，并降低程序的可读性。严格的函数式语言要求函数必须无副作用。 如果一个函数通过隐式（Implicit）方式，从外界获取数据，或者向外部输出数据，那么，该函数就不是纯函数，叫作非纯函数（Impure Function）。 隐式（Implicit）的意思是，函数通过参数和返回值以外的渠道，和外界进行数据交换。比如，读取全局变量，修改全局变量，都叫作以隐式的方式和外界进行数据交换；比如，利用 I/O API（输入输出系统函数库）读取配置文件，或者输出到文件，打印到屏幕，都叫做隐式的方式和外界进行数据交换。 纯函数的定义也可以写为「没有副作用的函数」。 I/O API 可以看作是一种特殊的全局变量。文件、屏幕、数据库等输入输出结构可以看作是独立于运行环境之外的系统外全局变量，而不是应用程序自己定义的全局变量。 有些函数的参数是一种 In/Out 作用的参数，即函数可能改变参数里面的内容，把一些信息通过输入参数，夹带到外界。这种情况，严格来说，也是副作用。也是非纯函数。 纯函数的好处主要有几点： 无状态。线程安全。不需要线程同步。纯函数相互调用组装起来的函数，还是纯函数。应用程序或者运行环境（Runtime）可以对纯函数的运算结果进行缓存，运算加快速度。","categories":[],"tags":[]},{"title":"git 命令","slug":"git 命令","date":"2016-11-22T03:11:13.000Z","updated":"2017-06-14T08:06:33.000Z","comments":true,"path":"2016/11/22/git 命令/","link":"","permalink":"https://entimm.com/2016/11/22/git 命令/","excerpt":"如果要对某些代码的commit重新整理 可以记住某个commit号 git rebase -i commit号 123456## 删除远程分支# As of Git v1.7.0, you can delete a remote branch usinggit push origin --delete &lt;branch_name&gt;# which is easier to remember thangit push origin :&lt;branch_name&gt; 1234567891011121314151617181920212223git push origin test:test # 提交本地test分支作为远程的test分支git push origin :test # 刚提交到远程的test将被删除，但是本地还会保存的，不用担心git push --tags # 上传所有标签git remote set-url --push [name] [newUrl] # 修改远程仓库git pull [remoteName] [localBranchName]git push [remoteName] [localBranchName]git merge [name] # 将名称为[name]的分支与当前分支合并git rebase [name] #会将[name]分支的代码合并过来，并按照提交的顺序排序(衍合指定分支到分支到当前分支)git merge-base branchA branchB #查看2分支的公共节点git diff $(git-merge-base A B) B# 按时间逆序列出提交对象，常用于查找涉及到某些文件的提交的hash。例如，查找所有关系到文件readme的提交git rev-listgit shortlog# 查看在branch上的，但不在master上的记录git log branch --not master View a file in a different Git branch without changing branchesgit checkout $REVISION – $FILEgit checkout $REVISION – “*” switch all files without changing brnachesgit show $REVISION:$FILEgit checkout –orphan $BRANCH Make an existing Git branch track a remote branchgit branch -u $UPSTREAM/$REMOTE_BRANCH $LOCAL_BRANCHgit branch –set-upstream-to=$UPSTREAM/$REMOTE_BRANCH git push -u $UPSTREAM $REMOTE_BRANCH git remote add $UPSTREAM git fetch $UPSTREAMgit branch -f –track $LOCAL_BRANCH $UPSTREAM/$REMOTE_BRANCH","text":"如果要对某些代码的commit重新整理 可以记住某个commit号 git rebase -i commit号 123456## 删除远程分支# As of Git v1.7.0, you can delete a remote branch usinggit push origin --delete &lt;branch_name&gt;# which is easier to remember thangit push origin :&lt;branch_name&gt; 1234567891011121314151617181920212223git push origin test:test # 提交本地test分支作为远程的test分支git push origin :test # 刚提交到远程的test将被删除，但是本地还会保存的，不用担心git push --tags # 上传所有标签git remote set-url --push [name] [newUrl] # 修改远程仓库git pull [remoteName] [localBranchName]git push [remoteName] [localBranchName]git merge [name] # 将名称为[name]的分支与当前分支合并git rebase [name] #会将[name]分支的代码合并过来，并按照提交的顺序排序(衍合指定分支到分支到当前分支)git merge-base branchA branchB #查看2分支的公共节点git diff $(git-merge-base A B) B# 按时间逆序列出提交对象，常用于查找涉及到某些文件的提交的hash。例如，查找所有关系到文件readme的提交git rev-listgit shortlog# 查看在branch上的，但不在master上的记录git log branch --not master View a file in a different Git branch without changing branchesgit checkout $REVISION – $FILEgit checkout $REVISION – “*” switch all files without changing brnachesgit show $REVISION:$FILEgit checkout –orphan $BRANCH Make an existing Git branch track a remote branchgit branch -u $UPSTREAM/$REMOTE_BRANCH $LOCAL_BRANCHgit branch –set-upstream-to=$UPSTREAM/$REMOTE_BRANCH git push -u $UPSTREAM $REMOTE_BRANCH git remote add $UPSTREAM git fetch $UPSTREAMgit branch -f –track $LOCAL_BRANCH $UPSTREAM/$REMOTE_BRANCH OR:git branch –set-upstream $LOCAL_BRANCH $UPSTREAM/$REMOTE_BRANCH diff changes only among certain file(s)git diff $BRANCH1 $BRANCH2 – $FILE1 $FILE2(branch1 is optional and your current branch (the branch you are on) will be considered by default if branch1 is not provided) git diff $REVISION $FILE view git tree viewgit ls-tree other commandbisect //Find by binary search the change that introduced a buggrep //Print lines matching a patterngit log –since=”two weeks ago” –until=”two days ago”git log –since=four.days –until=two.daysgit instaweb checkout remote branchgit checkout –track $UPSTREAM/$REMOTE_BRANCH Delete everything in the orphan branchgit rm -rf . 列出当天某人的所有提交记录git log –author=AUTHOR –oneline –since=”6am” –graph –all –decorate 判断当前分支git rev-parse –abbrev-ref HEAD Find the nearest parent branch of the current git branch#!/usr/bin/env zsh123456789101112131415branch=`git rev-parse --abbrev-ref HEAD`git show-branch | ack &apos;\\*&apos; | ack -v &quot;$branch&quot; | head -n1 | sed &apos;s/.*\\[\\(.*\\)\\].*/\\1/&apos; | sed &apos;s/[\\^~].*//&apos;`# How it works:# 1| Display a textual history of all commits.# 2| Ancestors of the current commit are indicated# by a star. Filter out everything else.# 3| Ignore all the commits in the current branch.# 4| The first result will be the nearest ancestor branch.# Ignore the other results.# 5| Branch names are displayed [in brackets]. Ignore # everything outside the brackets, and the brackets.# 6| Sometimes the branch name will include a ~2 or ^1 to# indicate how many commits are between the referenced# commit and the branch tip. We don&apos;t care. Ignore them. or12branch=`git rev-parse --abbrev-ref HEAD`git show-branch -a 2&gt;/dev/null | grep &apos;\\*&apos; | grep -v &quot;$branch&quot; | head -n1 | sed &apos;s/.*\\[\\(.*\\)\\].*/\\1/&apos; | sed &apos;s/[\\^~].*//&apos; git stash save –keep-index # stash only unstaged files 忽略追踪文件中的变更git update-index –assume-unchanged $FILE git merge –squash $BRANCH “^”代表父提交,当一个提交有多个父提交时，可以通过在”^”后面跟上一个数字，表示第几个父提交，”^”相当于”^1” checkout只会移动HEAD指针，reset会改变HEAD的引用值 git用得时间多了，会变慢。 那么可以用下面的命令优化一下。12git gc - Cleanup unnecessary files and optimize the local repositorygit-repack - Pack unpacked objects in a repository git add负责将文件内容存入blob对象，并更新index，git commit负责根据index生成tree对象，然后生成commit对象指向这个tree对象 git fsck –lost-found //检查丢失的提交git ls-files –stage //可以显示出索引的内容git checkout . //撤销所有修改git clean -xfd //连 gitignore 的untrack 文件/目录也一起删掉git branch –merged | xargs git branch -d //删除已经合并的分支 分支管理两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种： 功能（feature）分支 预发布（release）分支 * 修补bug（fixbug）分支这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。 git loggit log –graph –abbrev-commit –decorate –format=format:’%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)’ git log –graph –abbrev-commit –decorate –format=format:’%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n’’ %C(white)%s%C(reset) %C(dim white)- %an%C(reset)’ git log –graph –abbrev-commit –decorate –format=format:’%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(bold yellow)%d%C(reset)%n’’ %C(white)%s%C(reset)%n’’ %C(dim white)- %an &lt;%ae&gt; %C(reset) %C(dim white)(committer: %cn &lt;%ce&gt;)%C(reset)’ 如果想按照提交时间顺序查看分支历史，可以使用以下命令：–follow可以跟踪文件的重命名。-p可以跟踪文件内容变化。 https://api.github.com/users/entimm/starredpage=2&amp;per_page=100sort string One of created (when the repository was starred) or updated (when it was last pushed to). Default: createddirection string One of asc (ascending) or desc (descending). Default: desc git ls-files –other –ignored –exclude-stanard # list all ignored files in this projectgit reset –keep $COMMIT # reset and preserve uncommitted local changesgit checkout –track $REMOTE_BRANCH # create a new tracking branch based on a remote branch","categories":[],"tags":[]},{"title":"iTerm2奇淫技巧","slug":"iTerm2奇淫技巧","date":"2016-10-24T17:08:29.000Z","updated":"2017-05-18T15:28:00.000Z","comments":true,"path":"2016/10/25/iTerm2奇淫技巧/","link":"","permalink":"https://entimm.com/2016/10/25/iTerm2奇淫技巧/","excerpt":"control + a回到行首。这个对于用过unix系统的童鞋来说再熟悉不过。 control + e有了回到行首，当然不能错过光标回到行尾，写文章，打命令，这两个快捷键都是用的很频繁的。 control + w删除之前一个单词。这个快捷键是我意外发现的，既然有删除之前一个单词，我觉得应该会有删除后面一个单词，但我至今没发现，如果你会请告诉我，重金打赏。 control + u清除当前行。 control + p上一条命令。 control + k删除命令行文本到末尾。 control + l清屏。 control + r搜索命令历史。这个也是我经常用的快捷键，有时候你忘了正行命令，用这个命令很不错的，当然history | grep ** 会更有用些。 前一标签页⌘ + shift + Left 后一标签页⌘ + shift + Right","text":"control + a回到行首。这个对于用过unix系统的童鞋来说再熟悉不过。 control + e有了回到行首，当然不能错过光标回到行尾，写文章，打命令，这两个快捷键都是用的很频繁的。 control + w删除之前一个单词。这个快捷键是我意外发现的，既然有删除之前一个单词，我觉得应该会有删除后面一个单词，但我至今没发现，如果你会请告诉我，重金打赏。 control + u清除当前行。 control + p上一条命令。 control + k删除命令行文本到末尾。 control + l清屏。 control + r搜索命令历史。这个也是我经常用的快捷键，有时候你忘了正行命令，用这个命令很不错的，当然history | grep ** 会更有用些。 前一标签页⌘ + shift + Left 后一标签页⌘ + shift + Right Go to Tab⌘ + Number Go to Window⌘ + Option + Number Go to Split Pane by Direction⌘ + Option + Arrow Go to Split Pane by Order of Use⌘ + ] , ⌘ + [ UndoCtrl + - Ctrl + yCtrl + g 查看历史命令：command + ;查看剪贴板历史：command + shift + h搜索命令历史：ctrl + r","categories":[],"tags":[]},{"title":"配置linux服务器常用命令","slug":"配置linux服务器常用命令","date":"2016-09-28T02:17:30.000Z","updated":"2017-05-18T16:14:52.000Z","comments":true,"path":"2016/09/28/配置linux服务器常用命令/","link":"","permalink":"https://entimm.com/2016/09/28/配置linux服务器常用命令/","excerpt":"安装lnmp123456789sudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/phpsudo apt install -y language-pack-en-baselocale-gen en_US.UTF-8sudo apt -y install php7.1sudo apt install -y php7.1-fpm php7.1-mysql php7.1-curl php7.1-xml php7.1-mcrypt php7.1-json php7.1-gd php7.1-mbstringsudo apt install mysql-server-5.7sudo apt install nginxsudo apt install redis-server php-redis 安装composer123php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"php -r \"if (hash_file('SHA384', 'composer-setup.php') === 'e115a8dc7871f15d853148a7fbac7da27d6c0030b848d9b3dc09e2a0388afed865e6a3d6b3c0fad45c48e2b5fc1196ae') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;\"\\nphp composer-setup.phpphp -r \"unlink('composer-setup.php');\" 配置 www \\ www-data 用户权限12345sudo -Hu www-data ssh-keygen -t rsa -C \"entimm@gmail.com\"sudo chown -R www-data:www-data /var/www/sudo visudosudo passwd www-datavim /etc/passwd 安装ohmyzsh12apt install zshsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" 安装配置node环境12345curl --silent --location https://deb.nodesource.com/setup_4.x | bash -apt install -y nodejsnpm install -g gulpnpm install -g bowerecho '\\n#alias for cnpm\\nalias cnpm=\"npm --registry=https://registry.npm.taobao.org \\\\n --cache=$HOME/.npm/.cache/cnpm \\\\n --disturl=https://npm.taobao.org/dist \\\\n --userconfig=$HOME/.cnpmrc\"' &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc","text":"安装lnmp123456789sudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/phpsudo apt install -y language-pack-en-baselocale-gen en_US.UTF-8sudo apt -y install php7.1sudo apt install -y php7.1-fpm php7.1-mysql php7.1-curl php7.1-xml php7.1-mcrypt php7.1-json php7.1-gd php7.1-mbstringsudo apt install mysql-server-5.7sudo apt install nginxsudo apt install redis-server php-redis 安装composer123php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"php -r \"if (hash_file('SHA384', 'composer-setup.php') === 'e115a8dc7871f15d853148a7fbac7da27d6c0030b848d9b3dc09e2a0388afed865e6a3d6b3c0fad45c48e2b5fc1196ae') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;\"\\nphp composer-setup.phpphp -r \"unlink('composer-setup.php');\" 配置 www \\ www-data 用户权限12345sudo -Hu www-data ssh-keygen -t rsa -C \"entimm@gmail.com\"sudo chown -R www-data:www-data /var/www/sudo visudosudo passwd www-datavim /etc/passwd 安装ohmyzsh12apt install zshsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" 安装配置node环境12345curl --silent --location https://deb.nodesource.com/setup_4.x | bash -apt install -y nodejsnpm install -g gulpnpm install -g bowerecho '\\n#alias for cnpm\\nalias cnpm=\"npm --registry=https://registry.npm.taobao.org \\\\n --cache=$HOME/.npm/.cache/cnpm \\\\n --disturl=https://npm.taobao.org/dist \\\\n --userconfig=$HOME/.cnpmrc\"' &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc 配置git12git config --global user.name entimmgit config --global user.email entimm@gmial.com","categories":[],"tags":[]},{"title":"shell","slug":"shell","date":"2016-09-24T01:30:30.000Z","updated":"2017-05-18T16:11:31.000Z","comments":true,"path":"2016/09/24/shell/","link":"","permalink":"https://entimm.com/2016/09/24/shell/","excerpt":"shell 中的判断 字符串判断 str1 = str2 当两个串有相同内容、长度时为真str1 != str2 当串str1和str2不等时为真-n str1 当串的长度大于0时为真(串非空)-z str1 当串的长度为0时为真(空串)str1 当串str1为非空时为真 数字的判断 int1 -eq int2 两数相等为真int1 -ne int2 两数不等为真int1 -gt int2 int1大于int2为真int1 -ge int2 int1大于等于int2为真int1 -lt int2 int1小于int2为真int1 -le int2 int1小于等于int2为真 -n “$var” 判断一个变量是否有值 3 文件的判断 -r file 用户可读为真-w file 用户可写为真-x file 用户可执行为真-f file 文件为正规文件为真-d file 文件为目录为真-c file 文件为字符特殊文件为真-b file 文件为块特殊文件为真-s file 文件大小非0时为真-t file 当文件描述符(默认为1)指定的设备为终端时为真 3、复杂逻辑判断 -a 与-o 或 ! 非","text":"shell 中的判断 字符串判断 str1 = str2 当两个串有相同内容、长度时为真str1 != str2 当串str1和str2不等时为真-n str1 当串的长度大于0时为真(串非空)-z str1 当串的长度为0时为真(空串)str1 当串str1为非空时为真 数字的判断 int1 -eq int2 两数相等为真int1 -ne int2 两数不等为真int1 -gt int2 int1大于int2为真int1 -ge int2 int1大于等于int2为真int1 -lt int2 int1小于int2为真int1 -le int2 int1小于等于int2为真 -n “$var” 判断一个变量是否有值 3 文件的判断 -r file 用户可读为真-w file 用户可写为真-x file 用户可执行为真-f file 文件为正规文件为真-d file 文件为目录为真-c file 文件为字符特殊文件为真-b file 文件为块特殊文件为真-s file 文件大小非0时为真-t file 当文件描述符(默认为1)指定的设备为终端时为真 3、复杂逻辑判断 -a 与-o 或 ! 非 tip$0 当前脚本的文件名$n 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。$# 传递给脚本或函数的参数个数。$ 传递给脚本或函数的所有参数。$@ 传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $ 稍有不同，下面将会讲到。$? 上个命令的退出状态，或函数的返回值。$$ 当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。","categories":[],"tags":[]},{"title":"ssh保持链接","slug":"ssh保持链接","date":"2016-09-23T08:08:33.000Z","updated":"2017-05-18T15:26:08.000Z","comments":true,"path":"2016/09/23/ssh保持链接/","link":"","permalink":"https://entimm.com/2016/09/23/ssh保持链接/","excerpt":"Client configurationTry creating the file: ~/.ssh/configAdd the contents:123Host * ServerAliveInterval 30 ServerAliveCountMax 5 Server configurationEdit configuration file: /etc/ssh/sshd_config12ClientAliveInterval 20ClientAliveCountMax 5","text":"Client configurationTry creating the file: ~/.ssh/configAdd the contents:123Host * ServerAliveInterval 30 ServerAliveCountMax 5 Server configurationEdit configuration file: /etc/ssh/sshd_config12ClientAliveInterval 20ClientAliveCountMax 5","categories":[],"tags":[]},{"title":"快速搭建vpn","slug":"快速搭建vpn","date":"2016-09-22T07:33:41.000Z","updated":"2017-05-18T15:36:05.000Z","comments":true,"path":"2016/09/22/快速搭建vpn/","link":"","permalink":"https://entimm.com/2016/09/22/快速搭建vpn/","excerpt":"VPS端一键安装Shadowsocks (SS Python版一键安装脚本支持CentOS 6，7，Debian所有版本，Ubuntu所有版本)，123wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.shchmod +x shadowsocks.sh./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log 中间会提示输入SS SERVER使用的端口和连接密码。不输入则是系统默认. 安装完成后，脚本提示如下(记得记录下来)：Congratulations, shadowsocks install completed!Your Server IP:your_server_ipYour Server Port:your_server_portYour Password:your_passwordYour Local IP:127.0.0.1Your Local Port:1080Your Encryption Method:aes-256-cfb 看到以上提示后就表明VPS上SS已经安装成功，并且已经设置了开机启动，VPS重启后不用手工启动SS。到此就安装成功可以科学上网了 卸载方法：使用root用户登录，运行以下命令：1./shadowsocks.sh uninstall 单用户配置文件 Sample：配置文件路径：/etc/shadowsocks.json12345678910&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:8989, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;yourpassword&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false&#125; 多用户多端口配置文件 Sample：配置文件路径：/etc/shadowsocks.json```{ “server”:”0.0.0.0”, “local_address”:”127.0.0.1”, “local_port”:1080, “port_password”:{ “8989”:”password0”, “9001”:”password1”, “9002”:”password2”, “9003”:”password3”, “9004”:”password4” }, “timeout”:300, “method”:”aes-256-cfb”, “fast_open”: false} 使用命令：启动：/etc/init.d/shadowsocks start停止：/etc/init.d/shadowsocks stop重启：/etc/init.d/shadowsocks restart状态：/etc/init.d/shadowsocks status","text":"VPS端一键安装Shadowsocks (SS Python版一键安装脚本支持CentOS 6，7，Debian所有版本，Ubuntu所有版本)，123wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.shchmod +x shadowsocks.sh./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log 中间会提示输入SS SERVER使用的端口和连接密码。不输入则是系统默认. 安装完成后，脚本提示如下(记得记录下来)：Congratulations, shadowsocks install completed!Your Server IP:your_server_ipYour Server Port:your_server_portYour Password:your_passwordYour Local IP:127.0.0.1Your Local Port:1080Your Encryption Method:aes-256-cfb 看到以上提示后就表明VPS上SS已经安装成功，并且已经设置了开机启动，VPS重启后不用手工启动SS。到此就安装成功可以科学上网了 卸载方法：使用root用户登录，运行以下命令：1./shadowsocks.sh uninstall 单用户配置文件 Sample：配置文件路径：/etc/shadowsocks.json12345678910&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:8989, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;yourpassword&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false&#125; 多用户多端口配置文件 Sample：配置文件路径：/etc/shadowsocks.json```{ “server”:”0.0.0.0”, “local_address”:”127.0.0.1”, “local_port”:1080, “port_password”:{ “8989”:”password0”, “9001”:”password1”, “9002”:”password2”, “9003”:”password3”, “9004”:”password4” }, “timeout”:300, “method”:”aes-256-cfb”, “fast_open”: false} 使用命令：启动：/etc/init.d/shadowsocks start停止：/etc/init.d/shadowsocks stop重启：/etc/init.d/shadowsocks restart状态：/etc/init.d/shadowsocks status","categories":[],"tags":[]},{"title":"那些配置","slug":"那些配置","date":"2016-09-22T02:34:46.000Z","updated":"2017-05-18T16:37:08.000Z","comments":true,"path":"2016/09/22/那些配置/","link":"","permalink":"https://entimm.com/2016/09/22/那些配置/","excerpt":"phpstorm 外部工具Open Project With Sublinesubl$ProjectFileDir$$ProjectFileDir$ Open File With Sublimesubl$FilePath$:$LineNumber$$ProjectFileDir$ PHP CS Fixer/usr/local/bin/php-cs-fixer–level=psr2 –verbose fix $FileDir$/$FileName$$ProjectFileDir$ 从连接中使用subl打开所连接文件https://github.com/dhoulb/subl.git","text":"phpstorm 外部工具Open Project With Sublinesubl$ProjectFileDir$$ProjectFileDir$ Open File With Sublimesubl$FilePath$:$LineNumber$$ProjectFileDir$ PHP CS Fixer/usr/local/bin/php-cs-fixer–level=psr2 –verbose fix $FileDir$/$FileName$$ProjectFileDir$ 从连接中使用subl打开所连接文件https://github.com/dhoulb/subl.git","categories":[],"tags":[]},{"title":"接替app端的请求","slug":"接替app端的请求","date":"2016-09-22T02:17:18.000Z","updated":"2017-05-18T16:28:55.000Z","comments":true,"path":"2016/09/22/接替app端的请求/","link":"","permalink":"https://entimm.com/2016/09/22/接替app端的请求/","excerpt":"电脑安装抓包工具(使用charles/fiddler)同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑改电脑的hosts123192.168.0.100 test.api.entimm.com# 反向代理用的127.0.0.1 api.entimm.com 最后上nginx的反向代理1234567891011server &#123; listen 80; listen [::]:80; server_name api.entimm.com; location / &#123; proxy_pass http://test.api.entimm.com; &#125;&#125; 搞定！","text":"电脑安装抓包工具(使用charles/fiddler)同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑改电脑的hosts123192.168.0.100 test.api.entimm.com# 反向代理用的127.0.0.1 api.entimm.com 最后上nginx的反向代理1234567891011server &#123; listen 80; listen [::]:80; server_name api.entimm.com; location / &#123; proxy_pass http://test.api.entimm.com; &#125;&#125; 搞定！","categories":[],"tags":[]},{"title":"快速搭建服务器","slug":"快速搭建服务器","date":"2016-09-22T01:45:00.000Z","updated":"2017-05-18T15:54:44.000Z","comments":true,"path":"2016/09/22/快速搭建服务器/","link":"","permalink":"https://entimm.com/2016/09/22/快速搭建服务器/","excerpt":"下载 deploy.sh 脚本14.04安装脚本wget https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy.sh 16.04安装脚本wget https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy-16.sh 设置 MYSQL 密码vi deploy.sh:1234# ConfigureMYSQL_ROOT_PASSWORD=&quot;&quot;MYSQL_NORMAL_USER=&quot;estuser&quot;MYSQL_NORMAL_USER_PASSWORD=&quot;&quot; 开始安装有需要的话可以使用网易镜像加速：wget http://mirrors.163.com/.help/sources.list.trusty -O /etc/apt/sources.list 运行脚本:12chmod +x deploy.sh./deploy.sh 注：请使用 root 运行。 安装完以后的配置和注意事项","text":"下载 deploy.sh 脚本14.04安装脚本wget https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy.sh 16.04安装脚本wget https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy-16.sh 设置 MYSQL 密码vi deploy.sh:1234# ConfigureMYSQL_ROOT_PASSWORD=&quot;&quot;MYSQL_NORMAL_USER=&quot;estuser&quot;MYSQL_NORMAL_USER_PASSWORD=&quot;&quot; 开始安装有需要的话可以使用网易镜像加速：wget http://mirrors.163.com/.help/sources.list.trusty -O /etc/apt/sources.list 运行脚本:12chmod +x deploy.sh./deploy.sh 注：请使用 root 运行。 安装完以后的配置和注意事项修改站点目录权限通过此脚本配置的 Nginx 将使用 www 用户权限，因此需要在你的站点根目录下运行以下命令更新权限。12cd /var/www/chown www:www -R ./ 添加站点的 Nginx 配置下面是站点的 Nginx 配置模板，写入按照域名命名的文件中，并放入到 /etc/nginx/sites-enabled 目录下。如：/etc/nginx/sites-enabled/phphub.org12345678910111213141516171819202122232425262728293031323334353637server &#123; listen 80; server_name YOU-DOMAIN-NAME; root YOU-PROJECT-FOLDER; index index.php index.html index.htm; charset utf-8; location / &#123; try_files $uri $uri/ /index.php?$query_string; &#125; location = /favicon.ico &#123; access_log off; log_not_found off; &#125; location = /robots.txt &#123; access_log off; log_not_found off; &#125; access_log /data/log/nginx/YOU-PROJECT-NAME-access.log; error_log /data/log/nginx/YOU-PROJECT-NAME-error.log error; sendfile off; client_max_body_size 100m; include fastcgi.conf; location ~ /\\.ht &#123; deny all; &#125; location ~ \\.php$ &#123; fastcgi_pass 127.0.0.1:9000; #fastcgi_pass /run/php/php7.0-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;&#125; 或者直接修改default123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103### You should look at the following URL&apos;s in order to grasp a solid understanding# of Nginx configuration files in order to fully unleash the power of Nginx.# http://wiki.nginx.org/Pitfalls# http://wiki.nginx.org/QuickStart# http://wiki.nginx.org/Configuration## Generally, you will want to move this file somewhere, and start with a clean# file but keep this around for reference. Or just disable in sites-enabled.## Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.### Default server configuration#server &#123; listen 80 default_server; listen [::]:80 default_server; # SSL configuration # # listen 443 ssl default_server; # listen [::]:443 ssl default_server; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 # # Read up on ssl_ciphers to ensure a secure configuration. # See: https://bugs.debian.org/765782 # # Self signed certs generated by the ssl-cert package # Don&apos;t use them in a production server! # # include snippets/snakeoil.conf; root /var/www/html; # Add index.php to the list if you are using PHP index index.php index.html index.htm; server_name _; charset utf-8; location / &#123; # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; &#125; location = /favicon.ico &#123; access_log off; log_not_found off; &#125; location = /robots.txt &#123; access_log off; log_not_found off; &#125; access_log /var/log/nginx/default.access.log; error_log /var/log/nginx/default.error.log error; sendfile off; client_max_body_size 100m; include fastcgi.conf; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # location ~ \\.php$ &#123; # include snippets/fastcgi-php.conf; # # # With php7.0-cgi alone: fastcgi_pass 127.0.0.1:9000; # # With php7.0-fpm: # fastcgi_pass unix:/var/run/php7.0-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; # deny access to .htaccess files, if Apache&apos;s document root # concurs with nginx&apos;s one # location ~ /\\.ht &#123; deny all; &#125;&#125;# Virtual Host configuration for example.com## You can move that to a different file under sites-available/ and symlink that# to sites-enabled/ to enable it.##server &#123;# listen 80;# listen [::]:80;## server_name example.com;## root /var/www/example.com;# index index.html;## location / &#123;# try_files $uri $uri/ =404;# &#125;#&#125;","categories":[],"tags":[]},{"title":"php tips","slug":"php-tip","date":"2016-09-18T23:44:51.000Z","updated":"2017-05-18T16:13:12.000Z","comments":true,"path":"2016/09/19/php-tip/","link":"","permalink":"https://entimm.com/2016/09/19/php-tip/","excerpt":"explode 分割字符可以不是单字符 强制类型转换的值不论是否有定义，转换后都会有值 E_ALL ^ E_NOTICE 和 E_ALL &amp; ~E_NOTICE 是等效的 无论是函数调用还是文件包含，像 FILE 这种变量，他写在哪个文件，那么他的值就在哪个文件，而不受调用者影响 静态变量是在编译时解析的，不能跟表达式，比如：static $int = sqrt(121) 子类重载父类的属性和方法时，可见性不能比父类小 自 PHP 5.4 起可用 callable 类型指定回调类型 callback 一个 PHP 的函数以 string 类型传递其名称。可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset() 一个已实例化的对象的方法被作为数组传递，下标 0 包含该对象，下标 1 包含方法名 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’ 也可传递 closure 给回调参数 对浮点数，数字字符串，纯字母都能进行自增/减运算，对其他类型的值进行自增/减运算不会产生什么效果 call_user_func_array 如果回调函数默认设置需要接受的参数是引用传递的时候，按值传递，结果将会输出一个警告, 这时数组参数中的参数需要按引用传递 call_user_func 如果回调函数默认设置需要接受的参数是引用传递的时候,无论怎样传参都无法满足 常量NAMESPACE的值是包含当前命名空间名称的字符串。在全局的，不包括在任何命名空间中的代码，它包含一个空的字符串 关键字 namespace 可用来显式访问当前命名空间或子命名空间中的元素。它等价于类中的 self 操作符 命名空间不会因为被包含而影响其在包含文件中的使用方式 mysqli::real_escape_string 相比 addslashes 会针对真实数据库环境的字符集做出更好的处理，但是必须在建立数据库链接的基础上 字符串类型变量可以直接当做一个数组，通过数字下面来访问字符串中的字符或者是通过 str_split 函数把字符串分割成单字符数组 那些有趣的代码片段123function multi ($a, $b) &#123; $b = is_array($b) ? $b : array_slice(func_get_args(), 1);&#125; 1234567891011121314function incr()&#123; static $count = 0; $count++; echo $count; if ($count &lt; 10) &#123; incr(); &#125; echo $count; $count--;&#125;incr();// 结果输出：1234567891010987654321 不使用临时变量，交换2数的数值下面三种方法不能对自身进行交换1234567891011121314151617181920212223// 不仅对数字有效，对字符串也是有效的function swap1(&amp;$x, &amp;$y)&#123; $x = $x ^ $y; $y = $x ^ $y; $x = $x ^ $y;&#125;// 当心越界function swap2(&amp;$x, &amp;$y)&#123; $x = $x + $y; $y = $x - $y; $x = $x - $y;&#125;// 当心越界、第二个数不能为0function swap3(&amp;$x, &amp;$y)&#123; $x = $x * $y; $y = $x / $y; $x = $x / $y;&#125; 命名空间12345678910111213141516171819202122namespace Myns;class Test&#123;&#125;// oknew namespace\\Test;// oknew Test;// ok$a = __NAMESPACE__ . '\\Test';new $a;// ok$a = 'Myns\\Test';new $a;// failed, Class 'Myns\\Myns\\Test' not foundnew Myns\\Test; 这样的自增运算1234567891011&lt;?php$i1 = 0;$i2 = 0;$a= ++$i1 + ++$i1 + ++$i1;$b= $i2++ + $i2++ + $i2++;echo $a;echo PHP_EOL;echo $b;// result:// 6// 3 安全两个原则 永远不要相信用户输入的东西。 将自己需要输出的数据进行转义。 对象的另一种理解","text":"explode 分割字符可以不是单字符 强制类型转换的值不论是否有定义，转换后都会有值 E_ALL ^ E_NOTICE 和 E_ALL &amp; ~E_NOTICE 是等效的 无论是函数调用还是文件包含，像 FILE 这种变量，他写在哪个文件，那么他的值就在哪个文件，而不受调用者影响 静态变量是在编译时解析的，不能跟表达式，比如：static $int = sqrt(121) 子类重载父类的属性和方法时，可见性不能比父类小 自 PHP 5.4 起可用 callable 类型指定回调类型 callback 一个 PHP 的函数以 string 类型传递其名称。可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset() 一个已实例化的对象的方法被作为数组传递，下标 0 包含该对象，下标 1 包含方法名 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’ 也可传递 closure 给回调参数 对浮点数，数字字符串，纯字母都能进行自增/减运算，对其他类型的值进行自增/减运算不会产生什么效果 call_user_func_array 如果回调函数默认设置需要接受的参数是引用传递的时候，按值传递，结果将会输出一个警告, 这时数组参数中的参数需要按引用传递 call_user_func 如果回调函数默认设置需要接受的参数是引用传递的时候,无论怎样传参都无法满足 常量NAMESPACE的值是包含当前命名空间名称的字符串。在全局的，不包括在任何命名空间中的代码，它包含一个空的字符串 关键字 namespace 可用来显式访问当前命名空间或子命名空间中的元素。它等价于类中的 self 操作符 命名空间不会因为被包含而影响其在包含文件中的使用方式 mysqli::real_escape_string 相比 addslashes 会针对真实数据库环境的字符集做出更好的处理，但是必须在建立数据库链接的基础上 字符串类型变量可以直接当做一个数组，通过数字下面来访问字符串中的字符或者是通过 str_split 函数把字符串分割成单字符数组 那些有趣的代码片段123function multi ($a, $b) &#123; $b = is_array($b) ? $b : array_slice(func_get_args(), 1);&#125; 1234567891011121314function incr()&#123; static $count = 0; $count++; echo $count; if ($count &lt; 10) &#123; incr(); &#125; echo $count; $count--;&#125;incr();// 结果输出：1234567891010987654321 不使用临时变量，交换2数的数值下面三种方法不能对自身进行交换1234567891011121314151617181920212223// 不仅对数字有效，对字符串也是有效的function swap1(&amp;$x, &amp;$y)&#123; $x = $x ^ $y; $y = $x ^ $y; $x = $x ^ $y;&#125;// 当心越界function swap2(&amp;$x, &amp;$y)&#123; $x = $x + $y; $y = $x - $y; $x = $x - $y;&#125;// 当心越界、第二个数不能为0function swap3(&amp;$x, &amp;$y)&#123; $x = $x * $y; $y = $x / $y; $x = $x / $y;&#125; 命名空间12345678910111213141516171819202122namespace Myns;class Test&#123;&#125;// oknew namespace\\Test;// oknew Test;// ok$a = __NAMESPACE__ . '\\Test';new $a;// ok$a = 'Myns\\Test';new $a;// failed, Class 'Myns\\Myns\\Test' not foundnew Myns\\Test; 这样的自增运算1234567891011&lt;?php$i1 = 0;$i2 = 0;$a= ++$i1 + ++$i1 + ++$i1;$b= $i2++ + $i2++ + $i2++;echo $a;echo PHP_EOL;echo $b;// result:// 6// 3 安全两个原则 永远不要相信用户输入的东西。 将自己需要输出的数据进行转义。 对象的另一种理解对象”是一个容器，封装了“属性”（property）和“方法”（method） 所谓“属性”，就是对象的状态；所谓“方法”，就是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，“属性”记录具体是那一种动物，“方法”表示动物的某种行为（奔跑、捕猎、休息等等） isset vs array_key_exist最准确的array_key_exists的效率确是最差，而empty和isset的效率相差无几 如果数组不可能出现值为NULL的情况，建议使用isset如果数组中经常出现值为NULL的情况，建议使用array_key_exists如果数组中可能出现值为NULL，但是较少的情况，建议结合isset与array_key_exists使用，如“if (isset($arr[‘key’]) || array_key_exists(‘key’, $arr)){/do somthing/}”。此方法兼顾了性能和准确性，但是代码变长了。 is_nullnull不区分大小写：$a = null; $a = NULL 没有任何区别仅在变量的值为“null”时，检测结果才为true，0、空字符串、false、空数组都检测为false变量未初始化时，程序将会报错 isset 主要用来判断变量是否被初始化过empty 可以将值为 “假”、“空”、“0”、“NULL”、“未初始化” 的变量都判断为TRUEis_null 仅把值为 “NULL” 的变量判断为TRUE print vs echoecho和print的区别php中echo和print的功能基本相同（输出），但是两者之间还是有细微差别的。echo输出后没有返回值，但print有返回值，当其执行失败时返回flase。因此可以作为一个普通函数来使用例如执行下面的代码后变量$r的值将为1。代码： $r = print “Hello World”; 这意味着print可用在一些复杂的表达式中，而echo则不行。但是，因为echo语句不要求返回任何数值，所已在代码中echo语句的运行效率要略微快于print语句。 include vs requireinclude()与require()的功能也基本相同（包含），但在用法上也有一些不同，include()是有条件包含函数，而require()则是无条件包含函数。例如在下面代码中，如果变量$a为真，则将包含文件a.php：代码：123if ($a) &#123; include(\"a.php\"); &#125; 而require()则和include()不同，不管$a取何值，下面的代码将把文件a.php包含进文件里：代码：123if ($a) &#123; require(\"a.php\"); &#125; if($args) 与 if(!empty($args)) 的区别第一种方法在$args未定义的情况下会出现警告，在PHP中出现任何Error都会造成不小的性能损失，这主要是因PHP存在错误处理机制造成的。 第二种方法下empty能够处理未定义的参数，可以避免警告。另外empty是指令而非函数，运行效率并不会比第一种慢太多。 简而言之，如果你能保证$args已经定义，大可使用第一种。如果不行，则建议使用第二种。 关于垃圾回收及composer(重要资料)[http://cn2.php.net/manual/zh/features.gc.php] gc_disable() 不是完全关闭 gc ，而是关闭检查循环引用计数。 检查循环引用计数是因为 php 的 gc 是基于引用计数，在 php 5.2 及以前循环引用会导致内存泄漏。 composer 的这个地方是在进行依赖包检查，对于安装了大量包的项目来说，这是比较耗时、耗内存的操作，并且这部分代码（依据设计/依据提交者的看法）无需考虑循环引用计数问题。 composer在运行的时候会创建大量的对象，这些对象会触发GC机制，而这些对象需要被使用，所以GC无法清除，因此，使用gc_disable禁用GC之后，会节省cpu时间，效率更高。因为占用内存太大，并且频繁触发 gc ，导致效率降低。 由于PHP的GC是基于引用计数的，为了能够回收循环引用的对象，会在ref count减少但不到0的时候，试图检测并回收循环引用的孤岛对象，但当有效对象的数量及互相引用较大（比如composer中代表包、版本和互相的依赖关系）的时候，这种搜索的开销就会变得非常巨大，造成大量的CPU计算 关于引用传递一般在输出参数有多个的时候可以考虑使用引用 php中的’0’和javascript中的’0’在php和js中转化布尔类型,php中被转换为false,而js中却是true strrev只能翻转英文 strlen()与mb_strlen()strlen 计算字符串的字节长度mb_strlen 根据编码计算字符串字符的长度 gbk 中 一个中文字符2个字节utf8中 一个中文字符3个字节 变量的8种类型整型 浮点型 字符串 布尔型 数组 对象 资源 null 关于时间复杂度PHP的时间复杂度还得算上php的自身函数所占用的时间复杂度","categories":[],"tags":[]},{"title":"tmux使用","slug":"tmux","date":"2016-09-18T23:41:25.000Z","updated":"2017-05-18T16:22:53.000Z","comments":true,"path":"2016/09/19/tmux/","link":"","permalink":"https://entimm.com/2016/09/19/tmux/","excerpt":"基本使用&lt;prefix&gt;$可以重命名当前Session&lt;prefix&gt;c可以创建新的窗口（Window）&lt;prefix&gt;%水平分割窗口（形成两个Pane）&lt;prefix&gt;&quot;垂直分割窗口。退出当前Session的快捷键是&lt;prefix&gt;d 在Bash中可以查看当前的tmux服务中有哪些Session：tmux ls根据Session的名字可以再回去：tmux a -t myname (or at, or attach) 基本配置默认的&lt;prefix&gt;是Ctrl+b，如果觉得不好按可以调整为Ctrl+a，只需要在配置文件~/.tmux.conf中加入：12unbind ^bset -g prefix &apos;C-a&apos; 为了能让Tmux动态载入配置而不是重启，我们设一个快捷键r来重新载入配置：1bind r source-file ~/.tmux.conf \\; display-message &quot;Config reloaded&quot; 当前tmux的设置，可通过tmux show -g 窗格切换可以把hjkl设置为切换窗格的快捷键：1234bind h select-pane -Lbind j select-pane -Dbind k select-pane -Ubind l select-pane -R 再给调整窗格大小设置快捷键：1234bind L resize-pane -L 10 # 向左扩展bind R resize-pane -R 10 # 向右扩展bind K resize-pane -U 5 # 向上扩展bind J resize-pane -D 5 # 向下扩展","text":"基本使用&lt;prefix&gt;$可以重命名当前Session&lt;prefix&gt;c可以创建新的窗口（Window）&lt;prefix&gt;%水平分割窗口（形成两个Pane）&lt;prefix&gt;&quot;垂直分割窗口。退出当前Session的快捷键是&lt;prefix&gt;d 在Bash中可以查看当前的tmux服务中有哪些Session：tmux ls根据Session的名字可以再回去：tmux a -t myname (or at, or attach) 基本配置默认的&lt;prefix&gt;是Ctrl+b，如果觉得不好按可以调整为Ctrl+a，只需要在配置文件~/.tmux.conf中加入：12unbind ^bset -g prefix &apos;C-a&apos; 为了能让Tmux动态载入配置而不是重启，我们设一个快捷键r来重新载入配置：1bind r source-file ~/.tmux.conf \\; display-message &quot;Config reloaded&quot; 当前tmux的设置，可通过tmux show -g 窗格切换可以把hjkl设置为切换窗格的快捷键：1234bind h select-pane -Lbind j select-pane -Dbind k select-pane -Ubind l select-pane -R 再给调整窗格大小设置快捷键：1234bind L resize-pane -L 10 # 向左扩展bind R resize-pane -R 10 # 向右扩展bind K resize-pane -U 5 # 向上扩展bind J resize-pane -D 5 # 向下扩展 我们发现当打开新窗格时Shell仍然在Home目录，可以设置为当前目录：12bind &apos;&quot;&apos; split-window -c &apos;#&#123;pane_current_path&#125;&apos;bind &apos;%&apos; split-window -h -c &apos;#&#123;pane_current_path&#125;&apos; 拷贝在Tmux中通过[进入拷贝模式，按下&lt;space&gt;开始拷贝。然后用Vim/Emacs快捷键选择文本，按下拷贝所选内容。然后通过]进行粘贴 上述所有快捷键中，只有[和]需要先按下&lt;prefix&gt;。我们可以让上述拷贝快捷键符合Vi风格：123456bind Escape copy-modebind -t vi-copy v begin-selectionbind -t vi-copy y copy-selectionunbind pbind p pastebsetw -g mode-keys vi # Vi风格选择文本 这样，按下&lt;Escape&gt;进入拷贝模式，v进行选择，y拷贝所选内容，p进行粘贴。 鼠标切换窗格Tmux和Vim风格非常像，也可以设置鼠标模式。下面的设置开启了所有鼠标功能： 通过点击选择窗格，通过拖动更改窗格大小，通过鼠标选择窗口，还可以通过鼠标选择复制区域。1234setw -g mode-mouse onset -g mouse-select-pane onset -g mouse-resize-pane onset -g mouse-select-window on 快捷键Sessions123:new&lt;CR&gt; new sessions list sessions$ name session :new -s 可以指定新Session的名字。 Windows (tabs)1234567c create windoww list windowsn next windowp previous windowf find window, name window&amp; kill window Panes (splits)12345678910111213% vertical split&quot; horizontal splito swap panesq show pane numbersx kill pane+ break pane into window (e.g. to select text by mouse to copy)- restore pane from window⍽ space - toggle between layouts&lt;prefix&gt; q (Show pane numbers, when the numbers show up type the key to goto that pane)&lt;prefix&gt; &#123; (Move the current pane left)&lt;prefix&gt; &#125; (Move the current pane right)&lt;prefix&gt; z toggle pane zoom Misc1234d detacht big clock? list shortcuts: prompt","categories":[],"tags":[]},{"title":"php中的坑","slug":"php中的坑","date":"2016-09-18T15:25:11.000Z","updated":"2017-05-18T16:23:15.000Z","comments":true,"path":"2016/09/18/php中的坑/","link":"","permalink":"https://entimm.com/2016/09/18/php中的坑/","excerpt":"路径的坑$path = ‘/a/m/../b’;假如 /a 存在不管 /a/m 目录存不存在, mkdir 都能成功但是如果不存在，那么 is_dir, realpath 等函数都会失败 计算的坑1234567$a = 5.1;$b = 5.1;$size = 100;$t1 = intval($a = floatval($a) * $size);$t2 = intval($b = floatval($b) * $size);$t = rand($t1, $t2);echo $t; // 计算结果是509，而不是510","text":"路径的坑$path = ‘/a/m/../b’;假如 /a 存在不管 /a/m 目录存不存在, mkdir 都能成功但是如果不存在，那么 is_dir, realpath 等函数都会失败 计算的坑1234567$a = 5.1;$b = 5.1;$size = 100;$t1 = intval($a = floatval($a) * $size);$t2 = intval($b = floatval($b) * $size);$t = rand($t1, $t2);echo $t; // 计算结果是509，而不是510","categories":[],"tags":[]},{"title":"图片资源优化","slug":"图片资源优化","date":"2016-09-18T15:23:34.000Z","updated":"2017-05-18T16:28:06.000Z","comments":true,"path":"2016/09/18/图片资源优化/","link":"","permalink":"https://entimm.com/2016/09/18/图片资源优化/","excerpt":"选择合适的图片格式 原理：对图片格式转换，在画质可以接受的情况下达到更好的压缩比效果 优势：减少图片加载流量，效果比较明显 劣势：服务器和浏览器压力增大，而且服务器需要额外的服务支持，格式转换要考虑浏览器的兼容性 图片大小小于2KB时可使用base64编码代替图片 不同终端对同一个图片需求不一样，可以根据终端加载不同的图片来节省没必要的流量 使用css、svg、canvas或iconfont代替图片 合并图片： 优势：可以有效的较少请求个数 劣势：生成的图片体积较大，减少请求个数同时也增加了图片大小，不合理拆分将不利于并行加载 图片压缩 原理：对图片进行无损、有损压缩，转为压缩后图片来实现 优势：减少图片加载流量，效果比较明显 劣势：服务器和浏览器压力增大，而且服务器需要额外的服务支持 使用 CDN 使用参数自动调节图片质量和大小的，最关键的还是，CDN 的每 G 流量价格普遍比 VPS 按流量付费的价格要低得多！ 部署到单独的服务器中","text":"选择合适的图片格式 原理：对图片格式转换，在画质可以接受的情况下达到更好的压缩比效果 优势：减少图片加载流量，效果比较明显 劣势：服务器和浏览器压力增大，而且服务器需要额外的服务支持，格式转换要考虑浏览器的兼容性 图片大小小于2KB时可使用base64编码代替图片 不同终端对同一个图片需求不一样，可以根据终端加载不同的图片来节省没必要的流量 使用css、svg、canvas或iconfont代替图片 合并图片： 优势：可以有效的较少请求个数 劣势：生成的图片体积较大，减少请求个数同时也增加了图片大小，不合理拆分将不利于并行加载 图片压缩 原理：对图片进行无损、有损压缩，转为压缩后图片来实现 优势：减少图片加载流量，效果比较明显 劣势：服务器和浏览器压力增大，而且服务器需要额外的服务支持 使用 CDN 使用参数自动调节图片质量和大小的，最关键的还是，CDN 的每 G 流量价格普遍比 VPS 按流量付费的价格要低得多！ 部署到单独的服务器中","categories":[],"tags":[]},{"title":"设计模式","slug":"设计模式","date":"2016-09-17T08:13:07.000Z","updated":"2017-05-18T16:29:05.000Z","comments":true,"path":"2016/09/17/设计模式/","link":"","permalink":"https://entimm.com/2016/09/17/设计模式/","excerpt":"3种基本设计模式 工厂模式，工厂方法或者类生成对象，而不是在代码中直接new 单例模式，使某个类的对象仅允许创建一个 注册模式，全局共享和交换对象 代理模式 在客户端与实体之间建立一个代理对象(proxy),客户端对实体进行操作全部委派给代理对象,隐藏实体的具体实现细节 proxy还可以与业务代码分离,部署到另外的服务器。业务代码中通过RPC来委派任务 迭代器模式 在不需要了解内部实现的前提下,遍历一个聚合对象的内部元素 相比于传统的编程模式,迭代器模式可以隐藏遍历元素的所需的操作 装饰器模式 可以动态的添加修改类的功能 一个类提供了一项功能，如果要修改并添加额外的功能，传统的编程模式，需要写一个子类继承它，并重新实现类的方法 使用装饰器模式，仅需在运行时添加一个装饰器对象即可实现，可以实现最大的灵活性 观察者模式 当一个对象状态发生改变时，依赖它的对象全部会受到通知，并自动更新 场景: 一个事件发生后，要执行一连串更新操作。传统的编程方式就是在事件的代码之后直接加入处理逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码 观察者模式实现了低耦合，非侵入的通知和更新机制","text":"3种基本设计模式 工厂模式，工厂方法或者类生成对象，而不是在代码中直接new 单例模式，使某个类的对象仅允许创建一个 注册模式，全局共享和交换对象 代理模式 在客户端与实体之间建立一个代理对象(proxy),客户端对实体进行操作全部委派给代理对象,隐藏实体的具体实现细节 proxy还可以与业务代码分离,部署到另外的服务器。业务代码中通过RPC来委派任务 迭代器模式 在不需要了解内部实现的前提下,遍历一个聚合对象的内部元素 相比于传统的编程模式,迭代器模式可以隐藏遍历元素的所需的操作 装饰器模式 可以动态的添加修改类的功能 一个类提供了一项功能，如果要修改并添加额外的功能，传统的编程模式，需要写一个子类继承它，并重新实现类的方法 使用装饰器模式，仅需在运行时添加一个装饰器对象即可实现，可以实现最大的灵活性 观察者模式 当一个对象状态发生改变时，依赖它的对象全部会受到通知，并自动更新 场景: 一个事件发生后，要执行一连串更新操作。传统的编程方式就是在事件的代码之后直接加入处理逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码 观察者模式实现了低耦合，非侵入的通知和更新机制 数据对象映射模式 数据对象映射模式，是将对象和数据存储映射起来，对一个对象的操作会映射为对数据存储的操作 在代码中实现数据对象映射操作模式，我们将实现一个ORM类，将复杂的SQL语句映射成对象属性的操作 结合使用数据对象映射模式、工厂模式、注册模式 策略模式 策略模式，将一组特定的行为和算法封装成类，以适应某些特定的上下文环境 实际应用举例，假如一个电商网站系统，针对男性女性用户要各自跳转到不同的商品类目，并且所有广告位展示不同的广告 使用策略模式可以实现IOC，依赖倒置、控制反转 适配器模式 适配器模式，可以将截然不同的函数接口封装成统一的API 实际应用举例，PHP的数据库操作有mysql,mysqli,pdo，可以用适配器模式统一成一致。类似的场景还有cache适配器，将memcache、redis、file、apc等不同的缓存函数，统一成一致","categories":[],"tags":[]},{"title":"高级 PHP","slug":"高级PHP","date":"2016-09-16T11:59:33.000Z","updated":"2017-05-18T16:29:49.000Z","comments":true,"path":"2016/09/16/高级PHP/","link":"","permalink":"https://entimm.com/2016/09/16/高级PHP/","excerpt":"面向对象5原则单一职责原则（single-resposibility principle）其核心思想为：一个类，最好只做一件事，只有一个引起它的变化的原因 开放-封闭原则（The Open-Close principle）其核心思想为：对扩展开放，对修改封闭软件实体（类、模块、函数）应该是可扩展的，但是不可修改的。也就是说，对于扩展是开放的，对于更改是封闭的。怎样可能在不改动模块源代码的情况下去更改它的行为呢？怎样才能在无需对模块进行改动的情况下改变它的功能呢？关键是抽象！因此在进行面向对象设计时要尽量考虑接口封装机制、抽象机制和多态技术。该原则同样适合于非面向对象的方法，是软件工程设计方法的重要原则之一 Liskov 替换原则（liskov-substitution principle）其核心思想：子类必须能够替换其基类子类应当可以替换父类出现在父类能够出现的任何地方 依赖倒置原则（dependency-inversion principle）其核心思想：依赖于抽象一个类不应该强依赖另外一个类，每个类对于另外一个类都是可替换的1、高层模块不应该依赖于低层模块，二者都应该依赖于抽象。2、抽象不应该依赖于细节。细节应该依赖于抽象。在进行业务设计时，于特定业务有关的依赖关系应该尽量依赖接口和抽象类，而不是依赖于具体类。具体类只负责相关业务的实现，修改具体类不影响与特定业务有关的依赖关系。 接口分离原则（interface-segregation principle）","text":"面向对象5原则单一职责原则（single-resposibility principle）其核心思想为：一个类，最好只做一件事，只有一个引起它的变化的原因 开放-封闭原则（The Open-Close principle）其核心思想为：对扩展开放，对修改封闭软件实体（类、模块、函数）应该是可扩展的，但是不可修改的。也就是说，对于扩展是开放的，对于更改是封闭的。怎样可能在不改动模块源代码的情况下去更改它的行为呢？怎样才能在无需对模块进行改动的情况下改变它的功能呢？关键是抽象！因此在进行面向对象设计时要尽量考虑接口封装机制、抽象机制和多态技术。该原则同样适合于非面向对象的方法，是软件工程设计方法的重要原则之一 Liskov 替换原则（liskov-substitution principle）其核心思想：子类必须能够替换其基类子类应当可以替换父类出现在父类能够出现的任何地方 依赖倒置原则（dependency-inversion principle）其核心思想：依赖于抽象一个类不应该强依赖另外一个类，每个类对于另外一个类都是可替换的1、高层模块不应该依赖于低层模块，二者都应该依赖于抽象。2、抽象不应该依赖于细节。细节应该依赖于抽象。在进行业务设计时，于特定业务有关的依赖关系应该尽量依赖接口和抽象类，而不是依赖于具体类。具体类只负责相关业务的实现，修改具体类不影响与特定业务有关的依赖关系。 接口分离原则（interface-segregation principle）其核心思想：使用多个小的专门的接口，而不要使用一个大的总接口具体而言，接口隔离原则体现在：接口应该是内聚的，应该避免“胖”接口。一个类对另外一个类的依赖应该建立在最小的接口上，不要强迫依赖不用的方法，这是一种接口污染 异常异常是运行中超出了你程序预期的一个东西。 异常就是一个意外，影响了你的程序正常运行。但是如果你用好异常，会让你的程序便于解耦，结构更加清晰明了。 异常对我们控制程序的流程来说非常重要。解耦了程序出现意想不到结果时信息传递的逻辑。每个业务模块发生异常最终通过 Laravel 的方便的异常处理，和友好的展示，并能根据情况来记录错误，这样让我们的程序更加健壮，方便开发和维护。 异常 vs if_else把这个大函数分成了若干小函数，在这个小函数里面抛异常，大函数里面扑获异常，不用再一个一个的判断小函数的返回值 任何好的语言都应该提供完善的异常支持服务, 来使程序结构更优美可读行更好可维护,而不是靠一大堆的if else来控制程序的流程. 要有上下层的概念，在上下层逻辑处理中,throw 是 Current Role 反馈给 Upper Role，try/catch 是 Current Role 处理 Lower Role 反馈 分层把业务逻辑处理部分抽象出来作为一层，这一层在M之上，C之下，名为 Logic 把可以作为公共的服务抽象出来作为一层，这一层不与任何一层耦合，仅提供自身的服务，名为Service小到文件上传，下载，图片处理，储存大到日志，错误处理，邮件，授权，队列，计划任务，支付，验证，加密，短信都可以做出单独的服务 业务变了，C层和M层都不需要改动，只需要改动中间的 Logic 就好了 验证在Controller里面，做外部来的请求数据包的合法性校验和部分用户接口权限校验用户相关逻辑放在logic层,做严格的数据合法性校验、业务逻辑约束校验、用户数据权限校验在Model里面做数据的物理合法性校验 多态多态性是面向对象设计的重要特性，它展现了动态绑定的功能,多态的功能可以让软件在开发和维护时，达到充分的延伸性通俗理解:让具有继承关系的不同类对象，可以对相同名称的成员函数调用，产生不同的反应结果 权限控制RBAC（Role-Based Access Control）基于角色的访问控制系统 用户表 权限表 角色表 角色权限表 用户角色表 ACL（Access Control List）访问控制列表，是前几年盛行的一种权限设计，它的核心在于用户直接和权限挂钩 RBAC的核心是用户只和角色关联，而角色代表对了权限，这样设计的优势在于使得对用户而言，只需角色即可以，而某角色可以拥有各种各样的权限并可继承ACL和RBAC相比缺点在于由于用户和权限直接挂钩，导致在授予时的复杂性，虽然可以利用组来简化这个复杂性，但仍然会导致系统不好理解，而且在取出判断用户是否有该权限时比较的困难，一定程度上影响了效率 ACL实质上是每一个权限接口维持一个权限列表，然后通过判断是否在列表中这个扁平快的方法，进行基础的权限控制，也有其不足：对于多人控制的某些系统，权限需要分为select，update，insert，delete等，人员需要分为管理员，用户，访客，超级管理员，这种情况下再使用ACL反而是增加工作量，增加后期维护难度，同时增加管理难度 在这种情况下，RBAC应运而生RBAC，基于组的权限控制，ACL的升级版 相比于ACL，RBAC的优势是将角色和角色绑定，将用户与权限之间的关联变为权限与角色之间的关联，从而简化了权限管理。当然普通的RBAC也有自身的缺点，就是权限是以角色为载体，单独用户的特殊的权限需要定制 使用 OpCache 提升 PHP 5.5+ 程序性能whatPHP 5.5 以后内建了 OpCache , OpCache 的加速原理是把编译后的 bytecode 存储在内存里面, 避免重复编译 PHP 所造成的资源浪费. how修改 php.ini 文件,在文件最后面加入:1234567891011; 开关打开opcache.enable=1; 可用内存, 酌情而定, 单位 megabytesopcache.memory_consumption=256; 对多缓存文件限制, 命中率不到 100% 的话, 可以试着提高这个值opcache.max_accelerated_files=5000; Opcache 会在一定时间内去检查文件的修改时间, 这里设置检查的时间周期, 默认为 2, 定位为秒opcache.revalidate_freq=240 APC VS OpCacheAPC 是将要被遗弃的项目, PHP 5.5 都不支持, 而在 PHP 5.5 和 5.6 版本, OpCache 是默认内建的, 并且支持 5.2 到 5.4 的安装. 关于composer.lockcomposer.lock什么是 composer.lock 文件?composer.lock 文件是当你第一次使用 composer install 或者 执行 composer update 后生成的文件, 此文件里定义了当前项目的代码依赖, 还有最重要的, 这些代码依赖的对应的版本. composer.lock 文件作用是什么?默认情况下, 当执行 composer install 的时候, Composer 会检查当前项目是否有 composer.lock 文件, 如果有的话, 就会按照此文件去下载代码依赖和其指定的版本. 把 composer.lock 文件加版本的好处有以下:团队开发的时, clone 下代码后, 使用 composer install 可以确保大家使用的依赖包都是同一个版本的, 避免没必要的混乱;在一个现有的项目上开发的时候, 执行 composer update 后, 偶尔会发现刚刚更新了某个代码包把程序整挂了, 这个时候, 如果 composer.lock 是加入版本控制器的话, 直接一个 git diff 命令, 就可以查看到这次更新了那个包, 快速定位到问题的所在;在线上部署的时候, 可以确保线上生成环境下使用所有代码是和开发时候使用的一致, 因为 composer.lock 会确保你在执行 composer install 命令后, 按照文件里面指定的版本去下载代码依赖包; php自身的性能优化 OPcache 通过 PHP 扩展代替原 PHP 代码中高频逻辑 Runtime优化:HHVM php周边问题 linux 运行环境 文件存储 数据库 缓存 网络 Disk IO优化RAID0: 也称为条带，就是把多个磁盘链接成一个硬盘使用，这个级别IO最好RAID1: 也称为镜像，要求至少有两个磁盘，每组磁盘存储的数据相同RAID5: 也是把多个（最少3个）硬盘合并成1个逻辑盘使用，数据读写时建立就效验信息，并且奇偶效验信息和相对应的数据分别存储于不同的磁盘上。当RAID5的一个磁盘数据发生损坏后，利用剩下的数据和响应的奇偶效验信息去恢复被损坏的数据RAID1+0: 就是RAID1和RAID0的结合。同时具备两个级别的优缺点。一般建议数据库使用这个级别 PHP文件执行阶段语法分析-&gt;编译-&gt;运行 配置与设计模式 PHP中使用ArrayAccess实现配置文件的加载 在工厂方法中读取配置，生成可配置化的对象 使用装饰器模式实现权限验证，模板渲染，JSON串化 使用观察者模式实现数据更新事件的一系列更新操作 使用代理模式实现数据库的主从自动切换 MVC 模型: 数据和存储的封装 视图: 展示层的封装，如Web系统中的模板文件 控制器: 逻辑层的封装","categories":[],"tags":[]},{"title":"linux相关操作","slug":"linux","date":"2016-09-15T10:02:33.000Z","updated":"2017-05-18T16:31:15.000Z","comments":true,"path":"2016/09/15/linux/","link":"","permalink":"https://entimm.com/2016/09/15/linux/","excerpt":"防火墙关闭防火墙/etc/init.d/iptables stopservice iptables stop # 停止服务 查看防火墙信息/etc/init.d/iptables status 开放端口:8080/sbin/iptables -I INPUT -p tcp –dport 8080 -j ACCEPT 重启防火墙以便改动生效:(或者直接重启系统)/etc/init.d/iptables restart 将更改进行保存","text":"防火墙关闭防火墙/etc/init.d/iptables stopservice iptables stop # 停止服务 查看防火墙信息/etc/init.d/iptables status 开放端口:8080/sbin/iptables -I INPUT -p tcp –dport 8080 -j ACCEPT 重启防火墙以便改动生效:(或者直接重启系统)/etc/init.d/iptables restart 将更改进行保存/etc/rc.d/init.d/iptables save 另外直接在/etc/sysconfig/iptables中增加一行：-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT 在当前文件夹中查找字串grep ‘search_str’ ./ -r linux 查看系统版本RedHat,CentOScat /proc/versioncat /etc/redhat-release ubuntucat /etc/issue","categories":[],"tags":[]},{"title":"通过网址自动部署web","slug":"通过网址自动部署web","date":"2016-09-15T09:36:20.000Z","updated":"2017-05-18T15:37:02.000Z","comments":true,"path":"2016/09/15/通过网址自动部署web/","link":"","permalink":"https://entimm.com/2016/09/15/通过网址自动部署web/","excerpt":"部署代码至单独的web站点 https://github.com/markomarkovic/simple-php-git-deploy.git 配置www-data用户 改/usr/sbin/nologin=&gt;/bin/bash,且可找到www-data用户的目录:/var/www 设置www-data登录密码 sudo passwd www-data 设置/var/www归属sudo chown -R www-data:www-data /var/www/ 切换到www-data用户 su /var/www 在/var/www/.ssh目录中生成ssh key sudo -Hu www-data ssh-keygen -t rsa -C “entimm@gmail.com” 登录git托管网址，把id_rsa.pub公约贴上去 设置webhook","text":"部署代码至单独的web站点 https://github.com/markomarkovic/simple-php-git-deploy.git 配置www-data用户 改/usr/sbin/nologin=&gt;/bin/bash,且可找到www-data用户的目录:/var/www 设置www-data登录密码 sudo passwd www-data 设置/var/www归属sudo chown -R www-data:www-data /var/www/ 切换到www-data用户 su /var/www 在/var/www/.ssh目录中生成ssh key sudo -Hu www-data ssh-keygen -t rsa -C “entimm@gmail.com” 登录git托管网址，把id_rsa.pub公约贴上去 设置webhook","categories":[],"tags":[]},{"title":"很有用的一些技巧","slug":"很有用的一些技巧","date":"2016-09-12T11:31:55.000Z","updated":"2017-05-18T16:28:31.000Z","comments":true,"path":"2016/09/12/很有用的一些技巧/","link":"","permalink":"https://entimm.com/2016/09/12/很有用的一些技巧/","excerpt":"在利用 xdebug 和 phpstorm 调试通过终端执行的 PHP 脚本时，在终端执行先语句，即可对该脚本进行调试1export XDEBUG_CONFIG = \"idekey=PHPSTORM\" 通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码123456789101112# 先在本机生成 authentication keys，注意不能输入 passphrase# 这里假设 A 是本机，B是远端a@A:~&gt; ssh-keygen -t rsa# 然后登录 B，并建立一个目录 ~/.ssha@A:~&gt; ssh b@B mkdir -p .ssh# 最后把 A 的 id_rsa.pub 追加到 B 的 ~/.ssh/authorized_keys 中去a@A:~&gt; cat ~/.ssh/id_rsa.pub | ssh b@B 'cat &gt;&gt; ~/.ssh/authorized_keys'# 然后就成功了a@A:~&gt; ssh b@B 使用的 PHP 的内建服务器1php -S 主机名或地址@端口号 -t 目录 svn 检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用1svn update --set-depth immediates git 新建一个全新的空白分支12git checkout --orphan 分支名git clean -f","text":"在利用 xdebug 和 phpstorm 调试通过终端执行的 PHP 脚本时，在终端执行先语句，即可对该脚本进行调试1export XDEBUG_CONFIG = \"idekey=PHPSTORM\" 通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码123456789101112# 先在本机生成 authentication keys，注意不能输入 passphrase# 这里假设 A 是本机，B是远端a@A:~&gt; ssh-keygen -t rsa# 然后登录 B，并建立一个目录 ~/.ssha@A:~&gt; ssh b@B mkdir -p .ssh# 最后把 A 的 id_rsa.pub 追加到 B 的 ~/.ssh/authorized_keys 中去a@A:~&gt; cat ~/.ssh/id_rsa.pub | ssh b@B 'cat &gt;&gt; ~/.ssh/authorized_keys'# 然后就成功了a@A:~&gt; ssh b@B 使用的 PHP 的内建服务器1php -S 主机名或地址@端口号 -t 目录 svn 检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用1svn update --set-depth immediates git 新建一个全新的空白分支12git checkout --orphan 分支名git clean -f 针对手机端 google chrome 的样式优化（很好看）1&lt;meta name=\"theme-color\" content=\"这里是你的 web 主题颜色\"&gt; 注释技巧 TODO说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明。 FIXME说明标识处代码需要修正，甚至代码是错误的，不能工作，需要修复，如何修正会在说明中简略说明。 XXX说明标识处代码虽然实现了功能，但是实现的方法有待商榷，希望将来能改进，要改进的地方会在说明中简略说明。 正则匹配中文123if(!preg_match(\"/^[\".chr(0xa1).\"-\".chr(0xff).\"A-Za-z0-9_]+$/\",$str)) //GB2312汉字字母数字下划线正则表达式if(!preg_match(\"/^[\\x&#123;4e00&#125;-\\x&#123;9fa5&#125;A-Za-z0-9_]+$/u\",$str)) //UTF-8汉字字母数字下划线正则表达式","categories":[],"tags":[]},{"title":"面试问题总结","slug":"面试问题总结","date":"2016-09-08T15:52:47.000Z","updated":"2017-05-18T16:26:38.000Z","comments":true,"path":"2016/09/08/面试问题总结/","link":"","permalink":"https://entimm.com/2016/09/08/面试问题总结/","excerpt":"php魔术方法(14项)1234567891011121314__construct() 实例化类时自动调用.__destruct() 类对象使用结束时自动调用.__set() 在给未定义的属性赋值的时候调用.__get() 调用未定义的属性时候调用.__isset() 使用isset()或empty()函数时候会调用.__unset() 使用unset()时候会调用.__sleep() 使用serialize序列化时候调用.__wakeup() 使用unserialize反序列化的时候调用.__call() 调用一个不存在的方法的时候调用.__callStatic()调用一个不存在的静态方法是调用.__toString() 把对象转换成字符串的时候会调用.比如 echo.__invoke() 当尝试把对象当方法调用时调用.__set_state() 当使用var_export()函数时候调用.接受一个数组参数.__clone() 当使用clone复制一个对象时候调用. HTTP协议中几个状态码的含义.12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455100 Continue 继续,一般在发送post请求时,已发送了http header之后服务端将返回此信息,表示确认,之后发送具体参数信息200 OK 正常返回信息201 Created 请求成功并且服务器创建了新的资源202 Accepted 服务器已接受请求,但尚未处理301 Moved Permanently 请求的网页已永久移动到新位置.302 Found 临时性重定向.303 See Other 临时性重定向,且总是使用 GET 请求新的 URI.304 Not Modified 自从上次请求后,请求的网页未修改过.400 Bad Request 服务器无法理解请求的格式,客户端不应当尝试再次使用相同的内容发起请求.401 Unauthorized 请求未授权.403 Forbidden 禁止访问.404 Not Found 找不到如何与 URI 相匹配的资源.500 Internal Server Error 最常见的服务器端错误.503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）.100 Continue101 Switching Protocols200 OK201 Created202 Accepted203 Non-Authoritative Information204 No Content205 Reset Content206 Partial Content300 Multiple Choices301 Moved Permanently302 Found303 See Other304 Not Modified305 Use Proxy307 Temporary Redirect400 Bad Request401 Unauthorized402 Payment Required403 Forbidden404 Not Found405 Method Not Allowed406 Not Acceptable407 Proxy Authentication Required408 Request Time-out409 Conflict410 Gone411 Length Required412 Precondition Failed413 Request Entity Too Large414 Request-URI Too Large415 Unsupported Media Type416 Requested range not satisfiable417 Expectation Failed500 Internal Server Error501 Not Implemented502 Bad Gateway503 Service Unavailable504 Gateway Time-out505 HTTP Version not supported 语句include和require的区别在失败的时候：include 产生一个 warning ,而 require 直接产生错误中断; require 在运行前载入;include 在运行时载入; require_once 和 include_once 可以避免重复包含同一文件. 如果网站框架的设计能避免重复引用的话,推荐用include/require,因为他们比_once速度稍快. 事务的特征(ACID)","text":"php魔术方法(14项)1234567891011121314__construct() 实例化类时自动调用.__destruct() 类对象使用结束时自动调用.__set() 在给未定义的属性赋值的时候调用.__get() 调用未定义的属性时候调用.__isset() 使用isset()或empty()函数时候会调用.__unset() 使用unset()时候会调用.__sleep() 使用serialize序列化时候调用.__wakeup() 使用unserialize反序列化的时候调用.__call() 调用一个不存在的方法的时候调用.__callStatic()调用一个不存在的静态方法是调用.__toString() 把对象转换成字符串的时候会调用.比如 echo.__invoke() 当尝试把对象当方法调用时调用.__set_state() 当使用var_export()函数时候调用.接受一个数组参数.__clone() 当使用clone复制一个对象时候调用. HTTP协议中几个状态码的含义.12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455100 Continue 继续,一般在发送post请求时,已发送了http header之后服务端将返回此信息,表示确认,之后发送具体参数信息200 OK 正常返回信息201 Created 请求成功并且服务器创建了新的资源202 Accepted 服务器已接受请求,但尚未处理301 Moved Permanently 请求的网页已永久移动到新位置.302 Found 临时性重定向.303 See Other 临时性重定向,且总是使用 GET 请求新的 URI.304 Not Modified 自从上次请求后,请求的网页未修改过.400 Bad Request 服务器无法理解请求的格式,客户端不应当尝试再次使用相同的内容发起请求.401 Unauthorized 请求未授权.403 Forbidden 禁止访问.404 Not Found 找不到如何与 URI 相匹配的资源.500 Internal Server Error 最常见的服务器端错误.503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）.100 Continue101 Switching Protocols200 OK201 Created202 Accepted203 Non-Authoritative Information204 No Content205 Reset Content206 Partial Content300 Multiple Choices301 Moved Permanently302 Found303 See Other304 Not Modified305 Use Proxy307 Temporary Redirect400 Bad Request401 Unauthorized402 Payment Required403 Forbidden404 Not Found405 Method Not Allowed406 Not Acceptable407 Proxy Authentication Required408 Request Time-out409 Conflict410 Gone411 Length Required412 Precondition Failed413 Request Entity Too Large414 Request-URI Too Large415 Unsupported Media Type416 Requested range not satisfiable417 Expectation Failed500 Internal Server Error501 Not Implemented502 Bad Gateway503 Service Unavailable504 Gateway Time-out505 HTTP Version not supported 语句include和require的区别在失败的时候：include 产生一个 warning ,而 require 直接产生错误中断; require 在运行前载入;include 在运行时载入; require_once 和 include_once 可以避免重复包含同一文件. 如果网站框架的设计能避免重复引用的话,推荐用include/require,因为他们比_once速度稍快. 事务的特征(ACID) 原子性(Atomicity) 构成事务的所有事件要么都完成要么都当什么也没发生过 一致性(Consistency) 事务的结果应该符合预期，不应当超出预期之外导致不合理的结果 隔离性(Isolation) 未完成的事务应当对其它事务不构成影响 持久性(Durability) 事务的结果应当被永久保存下来 TCP传输的三次握手发送端首先发送一个带SYN标志的数据包给对方。接收端收到后，回传一个带有SYN/ACK标志的数据包以示确认。最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。 断开一个TCP连接则需要”四次握手” 第一次握手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。 第二次握手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。 第三次握手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。 第四次握手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。 TCP和UDP的区别TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来 UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。 redis支持的数据类型 string list set order set hash asp,php,jsp的优缺点asp: 闭源且不跨平台php: 开源且跨平台，简单快速，作为网站初期的首选jsp: 这个题如果 uid 值为 10,2,5,6,3 的记录存在，那么 select uid from user where uid in (10,2,5,6,3);结果顺序为按 uid 升序排列 php之multicurlmulticurl所有的多线程就是异步、网络io支持并发，http请求支持并发pthread是真正正宗的多线程，也是php唯一的多线程 php优化 CPU 密集部分用 C++ 或者 C 写 PHP 的扩展模块。 OPcache 通过将PHP脚本预编译的字节码存储到共享内存中来提升PHP的性能,省去了每次加载和解析PHP脚本的开销。 php版本的差异 在 PHP 5.5 之前，empty() 仅支持变量；5.5以后支持表达式了 教训12345678错误的写法select uid from user group by uid where count(*) &gt; 60;`where` 子句后面不能跟聚合条件`group by` 应该写在 `where` 子句后面这种情况应该用 `having`正确的写法select uid from user group by uid having count(*) &gt; 60; get vs post get 数据量长度受限制，这主要是受 url 长度限制 安全 get限制表单中数据集的范围为asc2码，而post可以支持整个iso10646字符集 echo(),print(),print_r()的区别echo是语言结构，没有返回值print是函数，有返回值print_r是函数，递归调用，用于输出数组对象 跳转方法一：php函数跳转,缺点，header头之前不能有输出，跳转后的程序继续执行，可用exit中断执行后面的程序。12Header(\"Location: 网址\"); //直接跳转header(\"refresh:3;url=网址\"); //三秒后跳转 方法二：利用meta1echo \"&lt;meta http-equiv=refresh content='0; url=网址'&gt;\"; 遍历目录1234567891011121314151617181920212223242526272829303132function loaddir1($dirname)&#123; if($handle=opendir($dirname))&#123; while(false!==($files=readdir($handle)))&#123; if($files!=\".\"&amp;&amp;$files!=\"..\")&#123; if(is_file($dirname.'/'.$files))&#123; echo $dirname.'/'.$files.'&lt;br&gt;'; &#125; if(is_dir($dirname.\"/\".$files))&#123; loaddir($dirname.\"/\".$files); &#125; &#125; &#125; &#125;&#125;function loaddir2($path)&#123; $files = array(); if($handle = opendir($path))&#123; while(($f = readdir($handle)) !== false)&#123; $p = $path .'/'. $f; if($f == '..' || $f == '.') continue; if(is_file($p))&#123; $files[] = $f; &#125;elseif(is_dir($p))&#123; $files[$f] = loaddir2($p); &#125; &#125; closedir($handle); &#125; return $files;&#125; 限制上传文件大小 客户端的隐藏域MAX_FILE_SIZE的数值（可以被绕开）。 服务器端的upload_max_filesize，post_max_size和memory_limit。这几项不能够用脚本来设置。 sqla.删除没有任何订单客户:DELETE FROM customerinfo WHERE customerid NOT in (SELECT customerid FROM orderinfo)b.提取所有没有订单客户:SELECT FROM customerinfo WHERE customerid NOT in (SELECT customerid FROM orderinfo)c.提高b的速度优化:SELECT FROM customerinfo LEFT JOIN orderid ON customerinfo.customerid=orderinfo.customeridWHERE orderinfo.customerid IS NULL fopen打开文件1234$readcontents = fopen('http://www.phpres.com/index.html', 'rb');$contents = stream_get_contents($readcontents);fclose($readcontents);echo $contents; char vs varcharVarchar是变长，节省存储空间，char是固定长度。查找效率要char型快，因为varchar是非定长，必须先查找长度，然后进行数据的提取，比char定长类型多了一个步骤，所以效率低一些 这些这些协议的全称和中文解释（都是工作在应用层）SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议POP3 (Post Office Protocol 3) 邮局协议第3版HTTP (Hypertext Transfer Protocol) 超文本传输协议FTP (File Transfer Protocol）文件传输协议DNS (Domain Name System and Domain Name Service protocol) 域名系统（服务）协议 OSI七层网络模型的名称，由下到上物理层、数据链路层、网络层、传输层、会话层、表示层、应用层 find命令和grep命令的区别find：按照文件名查找grep：按照文件内容查找","categories":[],"tags":[]},{"title":"面试可能会被问到的问题","slug":"面试可能会问到的问题","date":"2016-09-08T15:47:56.000Z","updated":"2017-05-18T16:29:26.000Z","comments":true,"path":"2016/09/08/面试可能会问到的问题/","link":"","permalink":"https://entimm.com/2016/09/08/面试可能会问到的问题/","excerpt":"抽象 vs 接口抽象类是一种不能被实例化的类，只能作为其他类的父类来使用。抽象类是通过关键字 abstract 来声明的。抽象类与普通类相似，都包含成员变量和成员方法，两者的区别在于，抽象类中至少要包含一个抽象方法，抽象方法没有方法体，该方法天生就是要被子类重写的。抽象方法的格式为：abstract function abstractMethod(); 因为php中只支持单继承，如果想实现多重继承，就要使用接口。也就是说子类可以实现多个接口。接口是通过interface关键字来声明的，接口中的成员常量和方法都是public的，方法可以不写关键字public，接口中的方法也是没有方法体。接口中的方法也天生就是要被子类实现的。 抽象类和接口实现的功能十分相似，最大的不同是接口能实现多继承。在应用中选择抽象类还是接口要看具体实现。子类继承抽象类使用extends，子类实现接口使用implements。 文件上传注意事项 首现要在php.ini中开启文件上传； 在php.ini中有一个允许上传的最大值，默认是2MB。必要的时候可以更改； 上传表单一定要记住在form标签中写上enctype=”multipart/form-data”； cookie作用 记录用户访问的部分信息 在页面间传递变量 php 的数据类型php支持8种原始数据类型。包括： 四种标量类型（布尔型boolean，整型interger，浮点型float/double , 字符串string） 两种复合类型(数组array ， 对象object) 两种特殊类型（资源resource，NULL）","text":"抽象 vs 接口抽象类是一种不能被实例化的类，只能作为其他类的父类来使用。抽象类是通过关键字 abstract 来声明的。抽象类与普通类相似，都包含成员变量和成员方法，两者的区别在于，抽象类中至少要包含一个抽象方法，抽象方法没有方法体，该方法天生就是要被子类重写的。抽象方法的格式为：abstract function abstractMethod(); 因为php中只支持单继承，如果想实现多重继承，就要使用接口。也就是说子类可以实现多个接口。接口是通过interface关键字来声明的，接口中的成员常量和方法都是public的，方法可以不写关键字public，接口中的方法也是没有方法体。接口中的方法也天生就是要被子类实现的。 抽象类和接口实现的功能十分相似，最大的不同是接口能实现多继承。在应用中选择抽象类还是接口要看具体实现。子类继承抽象类使用extends，子类实现接口使用implements。 文件上传注意事项 首现要在php.ini中开启文件上传； 在php.ini中有一个允许上传的最大值，默认是2MB。必要的时候可以更改； 上传表单一定要记住在form标签中写上enctype=”multipart/form-data”； cookie作用 记录用户访问的部分信息 在页面间传递变量 php 的数据类型php支持8种原始数据类型。包括： 四种标量类型（布尔型boolean，整型interger，浮点型float/double , 字符串string） 两种复合类型(数组array ， 对象object) 两种特殊类型（资源resource，NULL） 页面乱码处理 查看当前页面meta标签的charset header函数指定的charset 数据库的字符集 ajax缺点不利于seo推广优化，因为搜索引擎无法直接访问到ajax请求的内容 字符串转整型 强制类型转换 settype(字符串变量,整型) intval(字符串变量) 处理正则表达式preg_quote -- 转义正则表达式字符 正则表达式的特殊字符包括：. \\ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : - preg_replace -- 执行正则表达式的搜索和替换 preg_replace_callback -- 用回调函数执行正则表达式的搜索和替换 preg_split -- 用正则表达式分割字符串 字符串的常用函数trim();--去除空格 strlen();--字符串长度 substr();--截取字符串 str_replace();--替换字符串函数 substr_replace() -- 对指定字符串中的部分字符串进行替换 strstr();--检索字符串函数 explode();--分割字符串函数 strcasecmp();--比较字符串函数 进程 线程进程和线程都是一个时间段的描述，是CPU工作时间段的描述，不过是颗粒大小不同进程的颗粒度太大，每次都要有上下文环境的调入，保存，调出。线程是共享了进程的上下文环境，的更为细小的CPU时间段 留意一下 count 可以递归计算数组 echo可以一次输出多个值，中间用逗号隔开。而print一次只能输出一个值 include 有返回值,require 没有 当对一个不可见的对象属性使用empty() 时，__isset()方法如果存在的话，它将会被调用","categories":[],"tags":[]},{"title":"Cgi、FastCgi 与 PHP-FPM","slug":"FastCgi 与 PHP-FPM 之间的区别","date":"2016-09-08T15:42:47.000Z","updated":"2017-05-18T16:25:47.000Z","comments":true,"path":"2016/09/08/FastCgi 与 PHP-FPM 之间的区别/","link":"","permalink":"https://entimm.com/2016/09/08/FastCgi 与 PHP-FPM 之间的区别/","excerpt":"CGI 的作用web server（比如说 nginx）只是内容的分发者。 如果请求 /index.html，那么 web server 会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。 如果现在请求的是 /index.php，根据配置文件，nginx 知道这个不是静态文件，需要去找 PHP 解析器来处理，那么他会把这个请求简单处理后交给 PHP 解析器。Nginx 会传哪些数据给 PHP 解析器呢？url、查询字符串、POST 数据、HTTP header等等，CGI就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。 当 web server 收到 /index.php 这个请求后，会启动对应的 CGI 程序，这里就是 PHP 的解析器。接下来 PHP 解析器会解析 php.ini 文件，初始化执行环境，然后处理请求，再以规定 CGI 规定的格式返回处理后的结果，退出进程。web server 再把结果返回给浏览器。 fastCgi 是什么fastCgi 是用来提高 CGI 程序性能的。 那么 CGI 程序的性能问题在哪呢？”PHP 解析器会解析 php.ini 文件，初始化执行环境”，就是这里了。标准的 CGI 对每个请求都会执行这些步骤，所以处理每个请求的时间会比较长。 那么 fastCgi 是怎么做的呢？首先，fastCgi 会先启一个 master，解析配置文件，初始化执行环境，然后再启动多个 worker。当请求过来时，master 会传递给一个 worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当 worker 不够用时，master 可以根据配置预先启动几个 worker 等着；当然空闲 worker 太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是 fastCgi 对进程的管理。 PHP-FPM 是什么PHP-FPM 是一个实现了 FastCgi 的程序，被 PHP 官方收录。","text":"CGI 的作用web server（比如说 nginx）只是内容的分发者。 如果请求 /index.html，那么 web server 会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。 如果现在请求的是 /index.php，根据配置文件，nginx 知道这个不是静态文件，需要去找 PHP 解析器来处理，那么他会把这个请求简单处理后交给 PHP 解析器。Nginx 会传哪些数据给 PHP 解析器呢？url、查询字符串、POST 数据、HTTP header等等，CGI就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。 当 web server 收到 /index.php 这个请求后，会启动对应的 CGI 程序，这里就是 PHP 的解析器。接下来 PHP 解析器会解析 php.ini 文件，初始化执行环境，然后处理请求，再以规定 CGI 规定的格式返回处理后的结果，退出进程。web server 再把结果返回给浏览器。 fastCgi 是什么fastCgi 是用来提高 CGI 程序性能的。 那么 CGI 程序的性能问题在哪呢？”PHP 解析器会解析 php.ini 文件，初始化执行环境”，就是这里了。标准的 CGI 对每个请求都会执行这些步骤，所以处理每个请求的时间会比较长。 那么 fastCgi 是怎么做的呢？首先，fastCgi 会先启一个 master，解析配置文件，初始化执行环境，然后再启动多个 worker。当请求过来时，master 会传递给一个 worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当 worker 不够用时，master 可以根据配置预先启动几个 worker 等着；当然空闲 worker 太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是 fastCgi 对进程的管理。 PHP-FPM 是什么PHP-FPM 是一个实现了 FastCgi 的程序，被 PHP 官方收录。 PHP 的解释器是 php-cgi，它只是个 CGI 程序，只能解析请求，返回结果，不会进程管理。所以就出现了一些能够调度 php-cgi 进程的程序","categories":[],"tags":[]},{"title":"mysql知识","slug":"mysql知识","date":"2016-09-07T16:10:30.000Z","updated":"2017-05-18T16:31:38.000Z","comments":true,"path":"2016/09/08/mysql知识/","link":"","permalink":"https://entimm.com/2016/09/08/mysql知识/","excerpt":"MySQL存储引擎 MyISAM 和 InnoDB 的区别 MyISAM类型不支持事务处理等高级处理,而InnoDB类型支持. InnoDB不支持FULLTEXT类型的索引. InnoDB中不保存表的具体行数,但是MyISAM只要简单的读出保存好的行数即可. MyISAM支持表锁，只有读读之间是并发的，写写之间和读写之间（读和插入之间是可以并发的，去设置concurrent_insert参数，定期执行表优化操作，更新操作就没有办法了）是串行的，所以写起来慢；InnoDB支持行锁，这个一般指的是sql用到索引的时候，行锁是加在索引上的，不是加在数据记录上的，如果sql没有用到索引，仍然会锁定表，普通的select是不需要锁的 MyISAM索引btree上的节点是一个指向数据物理位置的指针，所以查找起来很快；nnodb索引节点存的则是数据的主键，所以需要根据主键二次查找 因为在使用索引的时候用的是行锁，锁的粒度小，竞争相同锁的情况就少，就增加了并发处理，所以并发读写的效率还是很优秀的，问题在于索引查询后的根据主键的二次查找导致效率低 数据库设计范式第一范式:每个属性都不可再分解第二范式:每个属性都依赖与主键第三范式:除了主键外，其他属性都没有依赖关系 MYSQL 性能优化 选择合适的存储引擎,设计良好的数据库结构，选择合适的表字段数据类型,允许部分数据冗余（空间换时间） 适当的添加索引 优化 sql 语句，不同的语句，根据你选择的引擎、表中数据的分布情况、索引情况、数据库优化策略、查询中的锁策略等因素，最终查询的效率相差很大；优化要从整体去考虑，有时你优化一条语句后，其它查询反而效率被降低了，所以要取一个平衡点 Cache（缓存数据） 查询：查询之前，要在Memcached或Redis中查找结果，如果找到，则返回它；如果未找到，则到数据库服务器上执行查询，并将结果返回给Memcached或Redis 插入：先把数据插入数据库，在内存中受此影响的数据库将变成无效 读写分离 分布数据（分割数据）找规律分表,减少单表中的数据量提高查询速度 关于缓存 一般的首页不应当有查询，对首页生成静态页面 不经常改动的页面,生成静态页面. 切分 垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的 切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多 数据是否存在明显的冷热（考虑旧数据归档）","text":"MySQL存储引擎 MyISAM 和 InnoDB 的区别 MyISAM类型不支持事务处理等高级处理,而InnoDB类型支持. InnoDB不支持FULLTEXT类型的索引. InnoDB中不保存表的具体行数,但是MyISAM只要简单的读出保存好的行数即可. MyISAM支持表锁，只有读读之间是并发的，写写之间和读写之间（读和插入之间是可以并发的，去设置concurrent_insert参数，定期执行表优化操作，更新操作就没有办法了）是串行的，所以写起来慢；InnoDB支持行锁，这个一般指的是sql用到索引的时候，行锁是加在索引上的，不是加在数据记录上的，如果sql没有用到索引，仍然会锁定表，普通的select是不需要锁的 MyISAM索引btree上的节点是一个指向数据物理位置的指针，所以查找起来很快；nnodb索引节点存的则是数据的主键，所以需要根据主键二次查找 因为在使用索引的时候用的是行锁，锁的粒度小，竞争相同锁的情况就少，就增加了并发处理，所以并发读写的效率还是很优秀的，问题在于索引查询后的根据主键的二次查找导致效率低 数据库设计范式第一范式:每个属性都不可再分解第二范式:每个属性都依赖与主键第三范式:除了主键外，其他属性都没有依赖关系 MYSQL 性能优化 选择合适的存储引擎,设计良好的数据库结构，选择合适的表字段数据类型,允许部分数据冗余（空间换时间） 适当的添加索引 优化 sql 语句，不同的语句，根据你选择的引擎、表中数据的分布情况、索引情况、数据库优化策略、查询中的锁策略等因素，最终查询的效率相差很大；优化要从整体去考虑，有时你优化一条语句后，其它查询反而效率被降低了，所以要取一个平衡点 Cache（缓存数据） 查询：查询之前，要在Memcached或Redis中查找结果，如果找到，则返回它；如果未找到，则到数据库服务器上执行查询，并将结果返回给Memcached或Redis 插入：先把数据插入数据库，在内存中受此影响的数据库将变成无效 读写分离 分布数据（分割数据）找规律分表,减少单表中的数据量提高查询速度 关于缓存 一般的首页不应当有查询，对首页生成静态页面 不经常改动的页面,生成静态页面. 切分 垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的 切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多 数据是否存在明显的冷热（考虑旧数据归档） MySQL数据库基本的三个优化法则 系统服务优化，把MySQL的key_buffer、cache_buffer、query_cache等参数提高（sort_buffer_size,read_buffer_size,read_rnd_buffer_size,join_buffer_size ） 优化SQL语句，减少Ditinct、Group、Join等等语句的操作 给所有经常查询的字段增加适当的索引 mysql要注意的地方及技巧 需要utf8mb4才能显示emoji join查询不一定优于子查询 选取最适用的字段属性,尽可能减少定义字段长度,尽量把字段设置NOT NULL GUID替代AutoIncrement作为主键的唯一性保障 把update和访问频繁的数据cache在内存中 使用队列，控制消费速度 只存储英文字母时，该字段可不需要采用utf8, 可选择字符长度更小的字符集 使用mysql自带的query cache，对应用基本完全透明。但会受限于本机。而且只缓存查询结果，mc和redis可以缓存一些加工后的数据 不好操作 主主复制（主键值分配、数据冲突） 水平分表（如果将来一定会到这个规模，又可能用到，建议越早做越好） 关于主从复制、读写分离 增加了数据的冗余备份，提高了可用性 扩展读 从库可配置myisam引擎及其他针对性设置，提升查询性能以及节约系统开销 主库向从库发送binlog是异步的，从库恢复数据也是异步的 当节点比较多时，使用多级缓存，减轻主的压力 读产生了延迟，牺牲了一致性 关于数据库外键及其他高级特性(触发器、存储过程等) 增加数据库负担(外键作用：约束数据库的一致性) 用户量大，并发度高时数据库很容易成为性能瓶颈 数据库不容易水平伸缩，应用服务器能轻松地水平伸缩 将这些特性分离到程序中作为数据逻辑 不经常改的常数,可使用外键,来记录数据关系.而那些经常更改的,使用更高层的逻辑来记录数据关系. mysql vs oracle Oracle目前还是最先进的关系数据库，其传统使用方法：存储使用EMC阵列（容量大，数据安全），IBM服务器，即IOE组合，这三个组合很强大（高可用，高性能），但是也高价格 MySQL的优势: 省去了巨额license费用 MySQL代码开源，可以根据业务特点定制和优化 将MySQL运行在普通PC上，硬件费用大大降低 mysql中int、bigint、smallint 和 tinyint的区别与长度的含义 bigint从 -2^63 (-9223372036854775808) 到 2^63-1 (9223372036854775807) 的整型数据（所有数字）。存储大小为 8 个字节。P.S. bigint已经有长度了，在mysql建表中的length，只是用于显示的位数 int从 -2^31 (-2,147,483,648) 到 2^31 – 1 (2,147,483,647) 的整型数据（所有数字）。存储大小为 4 个字节。int 的 SQL-92 同义字为 integer。 smallint从 -2^15 (-32,768) 到 2^15 – 1 (32,767) 的整型数据。存储大小为 2 个字节。 tinyint从 0 到 255 的整型数据。存储大小为 1 字节。int(M) 在 integer 数据类型中，M 表示最大显示宽度。在 int(M) 中，M 的值跟 int(M) 所占多少存储空间并无任何关系。和数字位数也无关系 int(3)、int(4)、int(8) 在磁盘上都是占用 4 btyes 的存储空间。TinyINT(M) always has a range from -128..+127 signed or 0..255 unsigned. M is the display width. Importance of varchar length in MySQL tableThere’s one possible performance impact: in MySQL, temporary tables and MEMORY tables store a VARCHAR column as a fixed-length column, padded out to its maximum length. If you design VARCHAR columns much larger than the greatest size you need, you will consume more memory than you have to. This affects cache efficiency, sorting speed, etc. This is the var (variable) in varchar: you only store what you enter (and an extra 2 bytes to store length upto 65535) To be clear: Storing a string 100 characters in a varchar(200) field will take 101 bytes. Storing a string of 100 characters in a varchar(256) field will take 102 bytes. This is why you see varchar(255) so frequently; 255 characters is the longest string you can store in MySQL’s varchar type with only one byte of overhead. Anything larger requires two bytes of overhead. varchar(N) N is the number of characters, so varchar(255) charset utf8mb4 would actually use up to 1021 bytes Specifically, when doing sorting, larger column do take up more space, so if that hurts performance, then you need to worry about it and make them smaller. But if you only ever select 1 row from that table, then you can just make them all 255 and it won’t matter. 看看这个 选择合适的 MySQL 日期时间类型来存储你的时间范围timestamp（1970-2038）datetime （1000-9999）int 是从1970年开始累加的，但是 int 支持的范围是 1901-12-13 到 2038-01-19 03:14:07，如果需要更大的范围需要设置为 bigInt。但是这个时间不包含毫秒，如果需要毫秒，还需要定义为浮点数。datetime 和 timestamp 原生自带6位的微秒。 用处timestamp 是自带时区转换的,可记录经常变化的更新/创建/发布/日志时间/购买时间/登录时间/注册时间等，并且是近来的时间，够用，时区自动处理，比如说做海外购或者业务可能拓展到海外datetime 记录固定时间如服务器执行计划任务时间/健身锻炼计划时间等，在任何时区都是需要一个固定的时间要做某个事情。超出 timestamp 的时间，如果需要时区必须记得时区处理 sql状态值：tinyint；有限范围值：根据范围选择tinyint(不要用enum)，smallint，mediumint ,int, bigint, float, double；从技术上尽可能将字段设置成NOT NULL，但如果业务上要求该字段可以为NULL，而且如果该字段不会被建立索引，则保持NULL，否则可以用’’(空字符串)代替； 全文索引mysql5.6.4支持innodb的全文搜索","categories":[],"tags":[]},{"title":"关于高并发的处理","slug":"关于高并发的处理","date":"2016-09-05T15:57:49.000Z","updated":"2017-05-18T16:28:01.000Z","comments":true,"path":"2016/09/05/关于高并发的处理/","link":"","permalink":"https://entimm.com/2016/09/05/关于高并发的处理/","excerpt":"用同步队列，就可以实现。库存比如是1000，那就存1000个随机数到队列中，拿到随机数的人去换取真实的商品。这样数据库的压力都小。最多更新1000次。队列可以系统加载时创建，也可以做为持久化保存在文件中。 关于库存和秒杀的解决方案 用额外的单进程处理一个队列，下单请求放到队列里，一个个处理，就不会有并发的问题了，但是要额外的后台进程以及延迟问题，不予考虑。 根据update结果来判断，我们可以加一个判断条件update … where 库存&gt;0，如果返回false，则说明库存不足，并回滚事务。 借助文件排他锁，在处理下单请求的时候，用flock锁定一个文件，如果锁定失败说明有其他订单正在处理，此时要么等待要么直接提示用户”服务器繁忙” 123456789//阻塞(等待)模式$fp = fopen(\"lock.txt\", \"w+\");if(flock($fp,LOCK_EX))&#123; //..处理订单 flock($fp,LOCK_UN);&#125;fclose($fp); 123456789101112131415//非阻塞模式$fp = fopen(\"lock.txt\", \"w+\");if(flock($fp,LOCK_EX | LOCK_NB))&#123; //..处理订单 flock($fp,LOCK_UN);&#125;else&#123; echo \"系统繁忙，请稍后再试\";&#125;fclose($fp);//采用哪种方式，看并发数量吧。","text":"用同步队列，就可以实现。库存比如是1000，那就存1000个随机数到队列中，拿到随机数的人去换取真实的商品。这样数据库的压力都小。最多更新1000次。队列可以系统加载时创建，也可以做为持久化保存在文件中。 关于库存和秒杀的解决方案 用额外的单进程处理一个队列，下单请求放到队列里，一个个处理，就不会有并发的问题了，但是要额外的后台进程以及延迟问题，不予考虑。 根据update结果来判断，我们可以加一个判断条件update … where 库存&gt;0，如果返回false，则说明库存不足，并回滚事务。 借助文件排他锁，在处理下单请求的时候，用flock锁定一个文件，如果锁定失败说明有其他订单正在处理，此时要么等待要么直接提示用户”服务器繁忙” 123456789//阻塞(等待)模式$fp = fopen(\"lock.txt\", \"w+\");if(flock($fp,LOCK_EX))&#123; //..处理订单 flock($fp,LOCK_UN);&#125;fclose($fp); 123456789101112131415//非阻塞模式$fp = fopen(\"lock.txt\", \"w+\");if(flock($fp,LOCK_EX | LOCK_NB))&#123; //..处理订单 flock($fp,LOCK_UN);&#125;else&#123; echo \"系统繁忙，请稍后再试\";&#125;fclose($fp);//采用哪种方式，看并发数量吧。","categories":[],"tags":[]},{"title":"docker 技巧","slug":"docker技巧","date":"2016-09-05T15:55:19.000Z","updated":"2017-05-18T16:25:56.000Z","comments":true,"path":"2016/09/05/docker技巧/","link":"","permalink":"https://entimm.com/2016/09/05/docker技巧/","excerpt":"删除 none tag 镜像1docker rmi $(docker images | grep \"^&lt;none&gt;\" | awk '&#123;print $3&#125;') 1docker rmi $(docker images -q --filter \"dangling=true\") 删除所有镜像1docker images -q | xargs docker rmi 删除所有容器1docker ps -q -a | xargs docker rm 删除所有停止运行的容器1docker rm $( docker ps -q -f status=exited) 删除所有 dangling (unused) 的镜像","text":"删除 none tag 镜像1docker rmi $(docker images | grep \"^&lt;none&gt;\" | awk '&#123;print $3&#125;') 1docker rmi $(docker images -q --filter \"dangling=true\") 删除所有镜像1docker images -q | xargs docker rmi 删除所有容器1docker ps -q -a | xargs docker rm 删除所有停止运行的容器1docker rm $( docker ps -q -f status=exited) 删除所有 dangling (unused) 的镜像1docker rmi $( docker images -q -f dangling=true) xargs with –no-run-if-empty is even better as it does cleanly handle the case when there is nothing to be removed.1234# Delete all stopped containersdocker ps -q -f status=exited | xargs --no-run-if-empty docker rm# Delete all dangling (unused) imagesdocker images -q -f dangling=true | xargs --no-run-if-empty docker rmi","categories":[],"tags":[]},{"title":"php function","slug":"php-function","date":"2016-09-05T10:07:14.000Z","updated":"2017-05-18T16:00:30.000Z","comments":true,"path":"2016/09/05/php-function/","link":"","permalink":"https://entimm.com/2016/09/05/php-function/","excerpt":"url、路径parse_urlmixed parse_url ( string $url [, int $component = -1 ] ) 解析 URL，返回其组成部分 本函数不是用来验证给定 URL 的合法性的本函数不能用于相对 URL对严重不合格的 URL，parse_url() 可能会返回 FALSE parse_strvoid parse_str ( string $str [, array &amp;$arr ] ) 将字符串解析成多个变量 获取当前的 QUERY_STRING，你可以使用 $_SERVER[‘QUERY_STRING’] 变量magic_quotes_gpc 影响到了 parse_str() 这个函数的输出，和 PHP 用于填充 $_GET、 $_POST 及其他变量的机制一致 pathinfo","text":"url、路径parse_urlmixed parse_url ( string $url [, int $component = -1 ] ) 解析 URL，返回其组成部分 本函数不是用来验证给定 URL 的合法性的本函数不能用于相对 URL对严重不合格的 URL，parse_url() 可能会返回 FALSE parse_strvoid parse_str ( string $str [, array &amp;$arr ] ) 将字符串解析成多个变量 获取当前的 QUERY_STRING，你可以使用 $_SERVER[‘QUERY_STRING’] 变量magic_quotes_gpc 影响到了 parse_str() 这个函数的输出，和 PHP 用于填充 $_GET、 $_POST 及其他变量的机制一致 pathinfomixed pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] ) 返回一个关联数组包含有 path 的信息 realpathstring realpath ( string $path ) 返回规范化的绝对路径名 realpath() 失败时返回 FALSE，比如说文件不存在的话 basenamestring basename ( string $path [, string $suffix ] ) 返回路径中的文件名部分 dirnamestring dirname ( string $path ) 返回路径中的目录部分,返回 path 的父目录 如果在 path 中没有斜线，则返回一个点（’.’），表示当前目录 http_build_querystring http_build_query ( mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]] ) 生成 URL-encode 之后的请求字符串 arrayarray_walkbool array_walk ( array &amp;$array , callable $funcname [, mixed $userdata = NULL ] ) 使用用户自定义函数对数组中的每个元素做回调处理 如果 funcname 需要直接作用于数组中的值，则给 funcname 的第一个参数指定为引用。这样任何对这些单元的改变也将会改变原始数组本身成功时返回 TRUE， 或者在失败时返回 FALSE array_maparray array_map ( callable $callback , array $arr1 [, array $… ] ) 将回调函数作用到给定数组的单元上 callback 接受的参数数目应该和传递给 array_map() 函数的数组数目一致 array_filterarray array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) 用回调函数过滤数组中的单元 array_padarray array_pad ( array $input , int $pad_size , mixed $pad_value ) 用值将数组填补到指定长度 如果 pad_size 为正，则填补到数组的右侧，如果为负则从左侧开始填补。 如果 pad_size 的绝对值小于或等于 input 数组的长度则没有任何填补 array_fillarray array_fill ( int $start_index , int $num , mixed $value ) 用 value 参数的值将一个数组填充 num 个条目，键名由 start_index 参数指定的开始。 array_chunkarray array_chunk ( array $input , int $size [, bool $preserve_keys = false ] ) 将一个数组分割成多个 如果 size 小于 1，会抛出一个 E_WARNING 错误并返回 NULL。 array_shiftmixed array_shift ( array &amp;$array ) 将数组开头的单元移出数组 返回移出的值，如果 array 为 空或不是一个数组则返回 NULL。 array_unshiftint array_unshift ( array &amp;$array , mixed $var [, mixed $… ] ) 在数组开头插入一个或多个单元 返回 array 数组新的单元数目。 array_slicearray array_slice ( array $array , int $offset [, int $length = NULL [, bool $preserve_keys = false ]] ) 从数组中取出一段 array_splicearray array_splice ( array &amp;$input , int $offset [, int $length = 0 [, mixed $replacement ]] ) 把数组中的一部分去掉并用其它值取代 返回一个包含有被移除单元的数组 rangearray range ( mixed $start , mixed $limit [, number $step = 1 ] ) 建立一个包含指定范围单元的数组。 输出控制函数flush — 刷新输出缓冲ob_clean — 清空（擦掉）输出缓冲区ob_end_clean — 清空（擦除）缓冲区并关闭输出缓冲ob_end_flush — 冲刷出（送出）输出缓冲区内容并关闭缓冲ob_flush — 冲刷出（送出）输出缓冲区中的内容ob_get_clean — 得到当前缓冲区的内容并删除当前输出缓。ob_get_contents — 返回输出缓冲区的内容ob_get_flush — 刷出（送出）缓冲区内容，以字符串形式返回内容，并关闭输出缓冲区。ob_get_length — 返回输出缓冲区内容的长度ob_get_status — 得到所有输出缓冲区的状态ob_start — 打开输出控制缓冲 错误处理set_error_handlermixed set_error_handler ( callable $error_handler [, int $error_types = E_ALL | E_STRICT ] ) 设置一个用户定义的错误处理函数 error_handler 函数可以表示为： handler ( int $errno , string $errstr [, string $errfile [, int $errline [, array $errcontext ]]] )如果函数返回 FALSE，标准错误处理处理程序将会继续调用 set_exception_handler设置一个用户定义的异常处理函数,用于没有用 try/catch 块来捕获的异常。 在 exception_handler 调用后异常会中止 register_shutdown_function Register a function for execution on shutdown void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $… ]] )","categories":[],"tags":[]},{"title":"快捷键","slug":"快捷键","date":"2016-09-04T05:15:30.000Z","updated":"2017-05-18T15:35:34.000Z","comments":true,"path":"2016/09/04/快捷键/","link":"","permalink":"https://entimm.com/2016/09/04/快捷键/","excerpt":"macCMD-Shift-3 全屏截图 CMD-Shift-4 区域截图：选区 ⇧Shift － 重新定义截图区域的纵向高度或横向长度，不能同时实现。 ⌥Option － 重新定义截图区域的尺寸，可以同时实现纵向和横向的改变，但只能围绕中心区域展开。 ⌴空格键 － 按住并拖动鼠标，可以移动截图选框位置。 Escape(Esc)键 － 退出截图模式。 CMD-Shift-4 + 空格键 区域截图：窗口 screencapture -T ＋等待时间（秒）＋保存的截图名称及格式 抓图 phpStorm command + r 查找替换 command + e 打开最近的文件 command + shift + o 快速查询文件 command + shift + f 关键字查找,更强大的查询器(机器不好的，最好还是先确定一下目录) command + shift + r 高级替换 command + alt + b 找到当前类的所有子类 alt + shift + c 查找最近修改的文件 alt + f7 直接查询选中的字符 ctrl + f7 文件中查询选中字符 command + shift + +,- 展开或缩起 command + . 折叠或展开选中的代码 alt + 回车 导入包，自动修正 command + n 快事为每个成员属性生成 getter 及 setter 方法 ctrl + i 快速生成插入魔术方法 ctrol + o 复写父类方法 command + alt + l 对当前文件进行格式化排版 command + d 复制当剪行 command + / // 注释 command + shift + / // 注释 command + k 提交代码 command + shif + k 提交远程分支","text":"macCMD-Shift-3 全屏截图 CMD-Shift-4 区域截图：选区 ⇧Shift － 重新定义截图区域的纵向高度或横向长度，不能同时实现。 ⌥Option － 重新定义截图区域的尺寸，可以同时实现纵向和横向的改变，但只能围绕中心区域展开。 ⌴空格键 － 按住并拖动鼠标，可以移动截图选框位置。 Escape(Esc)键 － 退出截图模式。 CMD-Shift-4 + 空格键 区域截图：窗口 screencapture -T ＋等待时间（秒）＋保存的截图名称及格式 抓图 phpStorm command + r 查找替换 command + e 打开最近的文件 command + shift + o 快速查询文件 command + shift + f 关键字查找,更强大的查询器(机器不好的，最好还是先确定一下目录) command + shift + r 高级替换 command + alt + b 找到当前类的所有子类 alt + shift + c 查找最近修改的文件 alt + f7 直接查询选中的字符 ctrl + f7 文件中查询选中字符 command + shift + +,- 展开或缩起 command + . 折叠或展开选中的代码 alt + 回车 导入包，自动修正 command + n 快事为每个成员属性生成 getter 及 setter 方法 ctrl + i 快速生成插入魔术方法 ctrol + o 复写父类方法 command + alt + l 对当前文件进行格式化排版 command + d 复制当剪行 command + / // 注释 command + shift + / // 注释 command + k 提交代码 command + shif + k 提交远程分支","categories":[],"tags":[]},{"title":"利用 CURL 进行数据抓取总结","slug":"PHP cURL 应用","date":"2016-08-30T06:08:16.000Z","updated":"2017-05-18T16:23:06.000Z","comments":true,"path":"2016/08/30/PHP cURL 应用/","link":"","permalink":"https://entimm.com/2016/08/30/PHP cURL 应用/","excerpt":"POSTCURLOPT_POST 的设置可以指定当前提交是否为POST方式 CURLOPT_POSTFIELDS则用于设定提交的参数，可以是参数串，也可以是参数数组 Referer对于一些程序，它可能判断来源网址，如果发现referer不是自己的网站，则拒绝访问，这时候，我们就需要添加CURLOPT_REFERER参数 cookie支持对于模拟登录的应用，单单提交参数和模拟来路并不能解决问题，这时候我们就需要保存或者提交相应的Cookie参数 CURLOPT_COOKIE： 直接使用字符串方式提交cookie参数 CURLOPT_COOKIEFILE： 使用文件方式提交cookie参数 CURLOPT_COOKIEJAR： 保存提交后反馈的cookie数据","text":"POSTCURLOPT_POST 的设置可以指定当前提交是否为POST方式 CURLOPT_POSTFIELDS则用于设定提交的参数，可以是参数串，也可以是参数数组 Referer对于一些程序，它可能判断来源网址，如果发现referer不是自己的网站，则拒绝访问，这时候，我们就需要添加CURLOPT_REFERER参数 cookie支持对于模拟登录的应用，单单提交参数和模拟来路并不能解决问题，这时候我们就需要保存或者提交相应的Cookie参数 CURLOPT_COOKIE： 直接使用字符串方式提交cookie参数 CURLOPT_COOKIEFILE： 使用文件方式提交cookie参数 CURLOPT_COOKIEJAR： 保存提交后反馈的cookie数据 1234567891011121314151617181920212223header(\"content-Type: text/html; charset=UTF-8\");$cookie_file = tempnam('./temp', 'cookie');$login_url=\"http://somesite.com/login.php\";$post_fields=\"cktime=36000&amp;step=2&amp;pwuser=username&amp;pwpwd=password\";//提交登录表单请求$ch=curl_init($login_url);curl_setopt($ch,CURLOPT_HEADER,0);curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);curl_setopt($ch,CURLOPT_POST,1);curl_setopt($ch,CURLOPT_POSTFIELDS,$post_fields);curl_setopt($ch,CURLOPT_COOKIEJAR,$cookie_file); //存储提交后得到的cookie数据curl_exec($ch);curl_close($ch);//登录成功后，获取bbs首页数据$url=\"http://somesite.com/index.php\";$ch=curl_init($url);curl_setopt($ch,CURLOPT_HEADER,0);curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);curl_setopt($ch,CURLOPT_COOKIEFILE,$cookie_file); //使用提交后得到的cookie数据做参数$contents=curl_exec($ch);curl_close($ch);//转码显示echo iconv('gbk', 'UTF-8', $contents); 压缩网页gzip有些没有接触过压缩页面的朋友估计会在这里被坑死，因为他们会发现采集回来的内容是乱码，并且无论使用iconv还是强大的mb_convert_encoding都无法还原数据，然后又没有概念，各种抓狂却找不到方法 1234567$url = 'http://news.sohu.com/';$ch = curl_init($url);curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //返回数据不直接输出curl_setopt($ch, CURLOPT_ENCODING, \"gzip\"); //指定gzip压缩$content = curl_exec($ch); //执行并存储结果curl_close($ch);echo $content; 支持的编码有”identity”，”deflate”和”gzip” 如果为空字符串””，请求头会发送所有支持的编码类型。后面一句表明，使用curl_setopt($ch, CURLOPT_ENCODING, “”);也是可以的，但是不能不加这个参数。 SSLvar_dump(curl_error($ch));的方法打印错误提示，然后根据错误提示查找相应的解决方案。比如SSL错误常见提示：SSL certificate problem: unable to get local issuer certificate，这时候，我们就需要利用参数：CURLOPT_SSL_VERIFYPEER 和 CURLOPT_SSL_VERIFYHOST 来禁用SSL证书的验证，我尝试过只使用CURLOPT_SSL_VERIFYPEER参数禁用失败，所以大家最好同时使用两个参数。 代理国内存在万恶的墙，所以，假如我们需要获取某些被墙数据时，就需要用到国外代理服务器；又或者我们需要采集大量数据时，需要不断切换IP，也会用到代理。 使用代理在PHP cURL里面有几个相对应的参数：CURLOPT_PROXY、CURLOPT_PROXYPORT 和 CURLOPT_PROXYUSERPWD，还有另外几个，这里不列举。 CURLOPT_PROXY 指定代理IP参数 CURLOPT_PROXYPORT 指定代理端口参数 CURLOPT_PROXYUSERPWD 指定需要验证的代理的账号密码，”[username]:[password]”格式的字符串 多线程curl_multi 跳转CURLOPT_FOLLOWLOCATION 上传文件全部数据使用HTTP协议中的”POST”操作来发送。要发送文件，在文件名前面加上@前缀并使用完整路径。这个参数可以通过urlencoded后的query字符串或使用一个以字段名为键值，字段数据为值的数组。如果value是一个数组，Content-Type头将会被设置成multipart/form-data。 关于CURLOPT_POSTFIELDS的赋值，另外补充一句描述： 传递一个URL-encoded字符串时，数据会被编码成 application/x-www-form-urlencoded传递一个数组到CURLOPT_POSTFIELDS，cURL会把数据编码成 multipart/form-data即： 1234567curl_setopt($ch, CURLOPT_POSTFIELDS, 'param1=val1&amp;param2=val2&amp;...');// 相当于// &lt;form method=\"post\" action=\"upload.php\"&gt;curl_setopt($ch, CURLOPT_POSTFIELDS, array('param1' =&gt; 'val1', 'param2' =&gt; 'val2', ...));// 相当于// &lt;form method=\"post\" action=\"upload.php\" enctype=\"multipart/form-data\"&gt;","categories":[],"tags":[]},{"title":"js 中对 checkbox 的操作","slug":"js 中对 checkbox 的操作","date":"2016-08-30T05:17:51.000Z","updated":"2017-05-18T16:25:28.000Z","comments":true,"path":"2016/08/30/js 中对 checkbox 的操作/","link":"","permalink":"https://entimm.com/2016/08/30/js 中对 checkbox 的操作/","excerpt":"设置值原生js1234// Checkdocument.getElementById(\"checkbox\").checked = true;// Uncheckdocument.getElementById(\"checkbox\").checked = false; jQuery (1.6+):1234// Check$(\"#checkbox\").prop(\"checked\", true);// Uncheck$(\"#checkbox\").prop(\"checked\", false); jQuery (1.5-):1234// Check$(\"#checkbox\").attr(\"checked\", true);// Uncheck$(\"#checkbox\").attr(\"checked\", false); 1234//Checkdocument.getElementById('checkbox').setAttribute('checked', 'checked');//UnCheckdocument.getElementById('checkbox').removeAttribute('checked'); get checked1234567// traditional attr$('#checkMeOut').attr('checked'); // \"checked\"// new property method$('#checkMeOut').prop('checked'); // true$(\"#txtAge\").get(0).checked$(\"#txtAge\").is(\":checked\")","text":"设置值原生js1234// Checkdocument.getElementById(\"checkbox\").checked = true;// Uncheckdocument.getElementById(\"checkbox\").checked = false; jQuery (1.6+):1234// Check$(\"#checkbox\").prop(\"checked\", true);// Uncheck$(\"#checkbox\").prop(\"checked\", false); jQuery (1.5-):1234// Check$(\"#checkbox\").attr(\"checked\", true);// Uncheck$(\"#checkbox\").attr(\"checked\", false); 1234//Checkdocument.getElementById('checkbox').setAttribute('checked', 'checked');//UnCheckdocument.getElementById('checkbox').removeAttribute('checked'); get checked1234567// traditional attr$('#checkMeOut').attr('checked'); // \"checked\"// new property method$('#checkMeOut').prop('checked'); // true$(\"#txtAge\").get(0).checked$(\"#txtAge\").is(\":checked\")","categories":[],"tags":[]},{"title":"常用代码片段","slug":"常用代码片段","date":"2016-08-30T05:17:42.000Z","updated":"2017-05-18T16:28:16.000Z","comments":true,"path":"2016/08/30/常用代码片段/","link":"","permalink":"https://entimm.com/2016/08/30/常用代码片段/","excerpt":"html utf-81&lt;meta http-equiv='Content-Type' content='text/html; charset=utf-8' /&gt; header123header('Content-Type: application/json; charset=utf-8');header('Content-Type: text/html; charset=utf-8');","text":"html utf-81&lt;meta http-equiv='Content-Type' content='text/html; charset=utf-8' /&gt; header123header('Content-Type: application/json; charset=utf-8');header('Content-Type: text/html; charset=utf-8');","categories":[],"tags":[]},{"title":"常用正则技巧总结","slug":"常用正则技巧总结","date":"2016-08-30T05:17:40.000Z","updated":"2016-08-30T05:17:40.000Z","comments":true,"path":"2016/08/30/常用正则技巧总结/","link":"","permalink":"https://entimm.com/2016/08/30/常用正则技巧总结/","excerpt":"正则字符 .匹配不包括换行的任意字符,在php的s修饰符下面可以匹配换行 \\s空格、tab []单字符取一个，比如[abc]会匹配a或b或c |多个数据选一（常用于多字符）|的作用域是一直往后直到遇到括号 (?:)非捕获组 技巧 如果源字符串有换行，使用[\\s\\S]替换 注意[]内符号 ^在首位时候才有特殊意义 -在不是首尾的时候有特殊意义 \\本身是转义符，有特殊意义 高级技巧 从大到小，一块块分解 65530-65535 ==&gt; 6553[0-5] 末位区间0-5 65500-65529 ==&gt; 655[0-2][0-9] 第四位区间0-2，末位区间0-9 65000-65499 ==&gt; 65[0-4][0-9]{2} 第三位区间0-4，后两位0-9 60000-64999 ==&gt; 6[0-4][0-9]{3} 第二位区间0-4，后三位0-9 10000-59999 ==&gt; [1-5][0-9]{4} 第一位区间1-5，后四位0-9 1-9999 ==&gt; [1-9][0-9]{0,3} 第一位只能是1-9，后三位可有可无 最后组合起来：(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{0,3}) 根据数据处理需求，可以在正则前后加上^和$，以匹配整个数据串，或者前后加入\\b，把它当做单词边界处理。没有限定字符的边界往往是js正则判断中常见的错误之一。 贪婪模式与非贪婪模式 什么时候使用贪婪模式，什么时候使用非贪婪模式，哪个性能好，哪个性能不好，不能一概而论，要根据情况分析。 不过，在平时的时候用，一般使用非贪婪模式较多，因为贪婪模式经常会由于元字符范围限制不严谨而导致匹配越界，得到非预期结果。 在确定的数据结构里，可以尝试使用[^&gt;]*&gt;这样的排除字符贪婪模式替换非贪婪模式，提升匹配的效率 无论使用贪婪模式还是非贪婪模式，在不同语言需要注意回溯次数和嵌套次数的限制，比如在PHP中，pcre.backtrack_limit=100000，pcre.recursion_limit=100000。 环视（断言/零宽断言） 环视，在不同的地方又称之为零宽断言，简称断言。 环视主要有以下4个用法： (?&lt;=exp) 匹配前面是exp的数据 (?=exp) 匹配后面是exp的数据 (?!exp) 匹配后面不是exp的数据 (?&lt;!exp) 匹配前面不是exp的数据 另外，还会看到(?!B)[A-Z]这种写法，其实它是[A-Z]范围里，排除B的意思，前置的(?!B)只是对后面数据的一个限定，从而达到过滤匹配的效果。 环视部分是不占宽度的，所以有零宽断言的叫法。 所谓不占宽度，可以分成两部分理解： 1、环视的匹配结果不纳入数据结果 2、环视它匹配过的地方，下次还能用它继续匹配。 模式修饰符 i不区分大小写 s的作用主要是让·能够匹配换行","text":"正则字符 .匹配不包括换行的任意字符,在php的s修饰符下面可以匹配换行 \\s空格、tab []单字符取一个，比如[abc]会匹配a或b或c |多个数据选一（常用于多字符）|的作用域是一直往后直到遇到括号 (?:)非捕获组 技巧 如果源字符串有换行，使用[\\s\\S]替换 注意[]内符号 ^在首位时候才有特殊意义 -在不是首尾的时候有特殊意义 \\本身是转义符，有特殊意义 高级技巧 从大到小，一块块分解 65530-65535 ==&gt; 6553[0-5] 末位区间0-5 65500-65529 ==&gt; 655[0-2][0-9] 第四位区间0-2，末位区间0-9 65000-65499 ==&gt; 65[0-4][0-9]{2} 第三位区间0-4，后两位0-9 60000-64999 ==&gt; 6[0-4][0-9]{3} 第二位区间0-4，后三位0-9 10000-59999 ==&gt; [1-5][0-9]{4} 第一位区间1-5，后四位0-9 1-9999 ==&gt; [1-9][0-9]{0,3} 第一位只能是1-9，后三位可有可无 最后组合起来：(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{0,3}) 根据数据处理需求，可以在正则前后加上^和$，以匹配整个数据串，或者前后加入\\b，把它当做单词边界处理。没有限定字符的边界往往是js正则判断中常见的错误之一。 贪婪模式与非贪婪模式 什么时候使用贪婪模式，什么时候使用非贪婪模式，哪个性能好，哪个性能不好，不能一概而论，要根据情况分析。 不过，在平时的时候用，一般使用非贪婪模式较多，因为贪婪模式经常会由于元字符范围限制不严谨而导致匹配越界，得到非预期结果。 在确定的数据结构里，可以尝试使用[^&gt;]*&gt;这样的排除字符贪婪模式替换非贪婪模式，提升匹配的效率 无论使用贪婪模式还是非贪婪模式，在不同语言需要注意回溯次数和嵌套次数的限制，比如在PHP中，pcre.backtrack_limit=100000，pcre.recursion_limit=100000。 环视（断言/零宽断言） 环视，在不同的地方又称之为零宽断言，简称断言。 环视主要有以下4个用法： (?&lt;=exp) 匹配前面是exp的数据 (?=exp) 匹配后面是exp的数据 (?!exp) 匹配后面不是exp的数据 (?&lt;!exp) 匹配前面不是exp的数据 另外，还会看到(?!B)[A-Z]这种写法，其实它是[A-Z]范围里，排除B的意思，前置的(?!B)只是对后面数据的一个限定，从而达到过滤匹配的效果。 环视部分是不占宽度的，所以有零宽断言的叫法。 所谓不占宽度，可以分成两部分理解： 1、环视的匹配结果不纳入数据结果 2、环视它匹配过的地方，下次还能用它继续匹配。 模式修饰符 i不区分大小写 s的作用主要是让·能够匹配换行","categories":[],"tags":[]},{"title":"欢快的使用谷歌搜索","slug":"欢快的使用谷歌搜索","date":"2016-08-30T05:17:36.000Z","updated":"2016-08-30T05:17:36.000Z","comments":true,"path":"2016/08/30/欢快的使用谷歌搜索/","link":"","permalink":"https://entimm.com/2016/08/30/欢快的使用谷歌搜索/","excerpt":"无障碍使用使用谷歌搜索的时候，要么无法访问，要么谷歌会将你的 google.com 重定向到具有特定国家或地区后缀的谷歌搜索地址，如 google.com.hk 等当然，我们可以直接输入这类带地区后缀的地址, 这样有时也能实现访问, 当是很多时候却并不好用，也常有无法访问的时候 避免谷歌重定向的方法是使用 google.com/ncr , 这种方法屡试不爽非常可靠，但是停止搜索一会后却又不行了，然后又得继续手动的输入这个地址 那么有没有办法自动在 google.com 后面加入 ncr 呢，万能的谷歌插件没让人失望这个插件便是 NoCountryRedirect (NCR) 谷歌使用是 https 协议，我们还需要让我们的输入 google.com 自动使用 https, 这样我们还需要1款插件 HTTPS Everywhere 好了，这样我们就能用谷歌愉快的进行各种搜索了 hosts来一计https://github.com/racaljk/hosts 更好的使用编辑 hosts 文件，在末尾加入 2 行","text":"无障碍使用使用谷歌搜索的时候，要么无法访问，要么谷歌会将你的 google.com 重定向到具有特定国家或地区后缀的谷歌搜索地址，如 google.com.hk 等当然，我们可以直接输入这类带地区后缀的地址, 这样有时也能实现访问, 当是很多时候却并不好用，也常有无法访问的时候 避免谷歌重定向的方法是使用 google.com/ncr , 这种方法屡试不爽非常可靠，但是停止搜索一会后却又不行了，然后又得继续手动的输入这个地址 那么有没有办法自动在 google.com 后面加入 ncr 呢，万能的谷歌插件没让人失望这个插件便是 NoCountryRedirect (NCR) 谷歌使用是 https 协议，我们还需要让我们的输入 google.com 自动使用 https, 这样我们还需要1款插件 HTTPS Everywhere 好了，这样我们就能用谷歌愉快的进行各种搜索了 hosts来一计https://github.com/racaljk/hosts 更好的使用编辑 hosts 文件，在末尾加入 2 行 127.0.0.1 baidu.com 127.0.0.1 www.baidu.com 启动 nginx ,加入如下配置 server { listen 80; server_name baidu.com www.baidu.com; return 301 $scheme://www.google.com$request_uri; }","categories":[],"tags":[]},{"title":"mac os系统问题解决","slug":"mac os系统问题解决","date":"2016-08-29T16:29:03.000Z","updated":"2017-05-18T16:23:25.000Z","comments":true,"path":"2016/08/30/mac os系统问题解决/","link":"","permalink":"https://entimm.com/2016/08/30/mac os系统问题解决/","excerpt":"在 OS X El Capitan 安装 git-svn在 Mountain Lion 和 Mavericks 系统中，安装 git-svn 中断的解决办法如下不幸的是，由于 El Capitan 系统保护机制，上述操作无效了12$ sudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.18/darwin-thread-multi-2level/SVN /System/Library/Perl/Extras/5.18/SVNln: /System/Library/Perl/Extras/5.18/SVN: Operation not permitted 下面操作是新的有效的解决办法因为虽然不能写入 /System, 但是可以写入 /Library123sudo mkdir /Library/Perl/5.18/autosudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.18/darwin-thread-multi-2level/SVN /Library/Perl/5.18/darwin-thread-multi-2levelsudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.18/darwin-thread-multi-2level/auto/SVN /Library/Perl/5.18/auto/","text":"在 OS X El Capitan 安装 git-svn在 Mountain Lion 和 Mavericks 系统中，安装 git-svn 中断的解决办法如下不幸的是，由于 El Capitan 系统保护机制，上述操作无效了12$ sudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.18/darwin-thread-multi-2level/SVN /System/Library/Perl/Extras/5.18/SVNln: /System/Library/Perl/Extras/5.18/SVN: Operation not permitted 下面操作是新的有效的解决办法因为虽然不能写入 /System, 但是可以写入 /Library123sudo mkdir /Library/Perl/5.18/autosudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.18/darwin-thread-multi-2level/SVN /Library/Perl/5.18/darwin-thread-multi-2levelsudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.18/darwin-thread-multi-2level/auto/SVN /Library/Perl/5.18/auto/","categories":[],"tags":[]},{"title":"web相关","slug":"web相关","date":"2016-08-29T15:41:10.000Z","updated":"2017-05-18T16:32:38.000Z","comments":true,"path":"2016/08/29/web相关/","link":"","permalink":"https://entimm.com/2016/08/29/web相关/","excerpt":"js对象的定义无序属性的集合，其属性可以包含基本值、对象或者函数一个Javascript函数也是一个对象，并且，所有的对象从技术上讲也只不过是函数 123456789var Person=function()&#123; this.name=\"phodal\"; this.weight=50; this.height=166; this.future=function dream()&#123; return \"future\"; &#125;;&#125;;var person=new Person(); 123456789101112131415var calc=&#123; add: function(a,b)&#123; return a+b; &#125;, sub: function(a,b)&#123; return a-b; &#125;, dif: function(a,b)&#123; if(a&gt;b)&#123; return a; &#125;else&#123; return b; &#125; &#125;&#125; 123456789function Calc()&#123;&#125;Calc.prototype.add=function(a,b)&#123; return a+b;&#125;;Calc.prototype.sub=function(a,b)&#123; return a-b;&#125;; 原型继承123456789101112131415var Chinese=function()&#123; this.country=\"China\";&#125;var Person=function(name,weight,height)&#123; this.name=name; this.weight=weight; this.height=height; this.futrue=function()&#123; return \"future\"; &#125;&#125;Chinese.prototype=new Person();var phodal=new Chinese(\"phodal\",50,166); 浏览器渲染过程 解析HTML去构建DOM树 渲染树形结构 生成渲染的树形图布局 绘制树形图 第一步 Parse HTML，而 Parse HTML 实质上就是将其将解析为 DOM Tree。与此同时，CSS 解析器会解析 CSS 会产生 CSS 规则树。随后会根据生成的 DOM 树和 CSS 规则树来构建 Render Tree，接着生成 Render Tree的布局，最后就是绘制出 Render Tree。","text":"js对象的定义无序属性的集合，其属性可以包含基本值、对象或者函数一个Javascript函数也是一个对象，并且，所有的对象从技术上讲也只不过是函数 123456789var Person=function()&#123; this.name=\"phodal\"; this.weight=50; this.height=166; this.future=function dream()&#123; return \"future\"; &#125;;&#125;;var person=new Person(); 123456789101112131415var calc=&#123; add: function(a,b)&#123; return a+b; &#125;, sub: function(a,b)&#123; return a-b; &#125;, dif: function(a,b)&#123; if(a&gt;b)&#123; return a; &#125;else&#123; return b; &#125; &#125;&#125; 123456789function Calc()&#123;&#125;Calc.prototype.add=function(a,b)&#123; return a+b;&#125;;Calc.prototype.sub=function(a,b)&#123; return a-b;&#125;; 原型继承123456789101112131415var Chinese=function()&#123; this.country=\"China\";&#125;var Person=function(name,weight,height)&#123; this.name=name; this.weight=weight; this.height=height; this.futrue=function()&#123; return \"future\"; &#125;&#125;Chinese.prototype=new Person();var phodal=new Chinese(\"phodal\",50,166); 浏览器渲染过程 解析HTML去构建DOM树 渲染树形结构 生成渲染的树形图布局 绘制树形图 第一步 Parse HTML，而 Parse HTML 实质上就是将其将解析为 DOM Tree。与此同时，CSS 解析器会解析 CSS 会产生 CSS 规则树。随后会根据生成的 DOM 树和 CSS 规则树来构建 Render Tree，接着生成 Render Tree的布局，最后就是绘制出 Render Tree。 写好HTML应该会有下面的要点 了解标准及遵守绝大多数标准 注重可读性，从ID及CLASS的命名 关注SEO与代码的联系 notice 对于行内非替换元素，其占用空间（行高）由 line-height 决定，即使有内边距与边框。 操作系统以现代标准而言，一个标准PC的操作系统应该提供以下的功能： + 进程管理（Processing management） + 内存管理（Memory management） + 文件系统（File system） + 网络通信（Networking） + 安全机制（Security） + 用户界面（User interface） + 驱动程序（Device drivers） WEB服务WEB服务实际上是一组工具，并有多种不同的方法调用之。三种最普遍的手段是： + 远程过程调用（RPC） + 面向服务架构（SOA） + 表述性状态转移（REST） HTTP是用于客户端与服务端之间的通信。 传输层的TCP是基于网络层的IP协议的,而应用层的HTTP协议又是基于传输层的TCP协议的。 打开网页时发生了什么 浏览器需要查找域名的IP，从不同的缓存直至DNS服务器。 浏览器会给web服务器发送一个HTTP请求 服务器“处理”请求 服务器发回一个HTML响应 浏览器渲染HTML到页面。 StackOverflow’s Answer: browser checks cache; if requested object is in cache and is fresh, skip to #9 browser asks OS for server’s IP address OS makes a DNS lookup and replies the IP address to the browser browser opens a TCP connection to server (this step is much more complex with HTTPS) browser sends the HTTP request through TCP connection browser receives HTTP response and may close the TCP connection, or reuse it for another request browser checks if the response is a redirect (3xx result status codes), authorization request (401), error (4xx and 5xx), etc.; these are handled differently from normal responses (2xx) if cacheable, response is stored in cache browser decodes response (e.g. if it’s gzipped) browser determines what to do with response (e.g. is it a HTML page, is it an image, is it a sound clip?) browser renders response, or offers a download dialog for unrecognized types 一个HTTP响应由三部分组成 状态行(状态码) 消息报头(响应报头) 响应正文(消息体) 互联网上的一切信息都可以看作是一种资源。 Laravel Resources Verb Path Action Route Name GET /resource index resource.index GET /resource/create create resource.create POST /resource store resource.store GET /resource/{resource} show resource.show GET /resource/{resource}/edit edit resource.edit PUT/PATCH /resource/{resource} update resource.update DELETE /resource/{resource} destroy resource.destroy MVC在 Controller 层应该做的事: 处理请求的参数 渲染和重定向 选择 Model 和 Service 处理 Session 和 Cookies 控制器层起到不同层面间的组织作用，用于控制应用程序的流程。 业务是善变的,Controller 是不容易变化的 模型用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法 cookie 问题Cookie 存在一些明显的问题：不支持跨域、并且不是无状态的、不能使用CDN、与系统耦合等等 JSON Web Token (JWT) 是一种基于 token 的认证方案 测试一般来说，自动测试应该从两部分考虑： 单元测试 功能测试 可读的代码 确保我们的变量名、函数名是易读的 没有复杂的逻辑判断 没有多层嵌套 (事不过三) 减少复杂函数的出现（如,不超过三十行） 然后，你要去测试它。这样你就知道需要什么，实际上要做到这些也不是一些难事 短的精巧的函数有以下的特点： 如果每个函数的粒度都很小，那么函数被复用的机会就更大； 是这会让高层函数读起来就像一系列注释一样，容易理解； 是如果函数都是细粒度，那么函数的复写也会更加容易。 在提炼函数中我们所要做的就是——判断出原有的函数的意图，再依据我们的新意图来命名新的函数。然后判断依赖——变量值，处理这些变量。提取出函数，再对其测试。 Intellij IDEA 提炼函数: Mac: alt+command+M Windows/Linux: Ctrl+Alt+M 鼠标: Refactor | Extract | Method 内联函数: Mac: alt+command+N Windows/Linux: Ctrl+Alt+N 鼠标: Refactor | Inline 查询取代临时变量: Refactor | Replace Temp with Query httpshttp 协议下的网络连接都是基于明文的，信息很有可能被泄露篡改理论上 https 是安全的 XSS(Cross-Site Script)跨站脚本攻击本质上是一种注入攻击简单的说就是利用各种手段把恶意代码添加到网页中，并让受害者执行这段脚本。 XSS 能做用户使用浏览器能做的一切事情。可以看到同源策略无法保证不受 XSS 攻击，因为此时攻击者就在同源之内。 可以分为以下两类：client(客户端型)server(服务端型)当一端 XSS 代码是在服务端被插入的，那么这就是服务端型 XSS ，同理，如果代码在客户端插入，就是客户端型 XSS 。 其实只要做好无论任何情况下保证代码不被执行就能完全杜绝 XSS 攻击任何时候都不要把不受信任的数据直接插入到 dom 中的任何位置,一定要做转义。 Http-Only使用 Http-only 保护 cookie ，可以保证即使发生了 XSS ，用户的 cookie 也是安全的。使用 Http-only 保护的 cookie 是不会被 javascript 读写的。 其它 textarea 的值通过 innerHTML 属性获取不了，得通过 value属性 获取父窗口: window.opener.document 根据 document.attachEvent 可判断出是否为 ie","categories":[],"tags":[]},{"title":"macos查看网络端口情况","slug":"macos查看网络端口情况","date":"2016-08-29T15:11:34.000Z","updated":"2017-05-18T16:31:26.000Z","comments":true,"path":"2016/08/29/macos查看网络端口情况/","link":"","permalink":"https://entimm.com/2016/08/29/macos查看网络端口情况/","excerpt":"使用 netstat 命令1netstat -nat | grep &lt;port&gt; 1netstat -nat |grep LISTEN 使用 lsof 命令123456lsof -n -P -i TCP -s TCP:LISTEN-n 表示主机以ip地址显示-P 表示端口以数字形式显示，默认为端口名称-i 意义较多，具体 man lsof, 主要是用来过滤lsof的输出结果-s 和 -i 配合使用，用于过滤输出 使用 telnet 命令1telnet 127.0.0.1 &lt;port&gt; 使用 nc 命令1234567nc -w &lt;time&gt; -n -z &lt;ip&gt; &lt;port_start-port_end&gt;-w 表示等待连接时间-n 尽量将端口号名称转换为端口号数字-z 对需要检查的端口没有输入输出，用于端口扫描模式ip 需要检查的ip地址port_start-port_end 可以是一个端口，也可以是一段端口,返回结果为开放的端口","text":"使用 netstat 命令1netstat -nat | grep &lt;port&gt; 1netstat -nat |grep LISTEN 使用 lsof 命令123456lsof -n -P -i TCP -s TCP:LISTEN-n 表示主机以ip地址显示-P 表示端口以数字形式显示，默认为端口名称-i 意义较多，具体 man lsof, 主要是用来过滤lsof的输出结果-s 和 -i 配合使用，用于过滤输出 使用 telnet 命令1telnet 127.0.0.1 &lt;port&gt; 使用 nc 命令1234567nc -w &lt;time&gt; -n -z &lt;ip&gt; &lt;port_start-port_end&gt;-w 表示等待连接时间-n 尽量将端口号名称转换为端口号数字-z 对需要检查的端口没有输入输出，用于端口扫描模式ip 需要检查的ip地址port_start-port_end 可以是一个端口，也可以是一段端口,返回结果为开放的端口","categories":[],"tags":[]},{"title":"vagrant 常用操作","slug":"vagrant","date":"2016-08-29T15:11:06.000Z","updated":"2017-05-18T16:22:49.000Z","comments":true,"path":"2016/08/29/vagrant/","link":"","permalink":"https://entimm.com/2016/08/29/vagrant/","excerpt":"查看全局状态vagrant global-status 基本安装流程，以centos为例vagrant add centos cent.box vagrant init centos vagrant up vagrant ssh 销毁vagrant destroy vagrant box remove centos","text":"查看全局状态vagrant global-status 基本安装流程，以centos为例vagrant add centos cent.box vagrant init centos vagrant up vagrant ssh 销毁vagrant destroy vagrant box remove centos 打包vagrant package –output newcentos.box 状态vagrant halt # 关闭虚拟机vagrant reload # 重启虚拟机","categories":[],"tags":[]},{"title":"PHP代码重构","slug":"PHP代码重构","date":"2016-08-28T11:53:48.000Z","updated":"2017-05-18T16:23:11.000Z","comments":true,"path":"2016/08/28/PHP代码重构/","link":"","permalink":"https://entimm.com/2016/08/28/PHP代码重构/","excerpt":"删除 else12345678function test($arg)&#123; if($arg == 'foobar')&#123; return true; &#125;else&#123; return false; &#125;&#125; 更好的写法 12345678function test($arg)&#123; if($arg == 'foobar')&#123; return true; &#125; return false;&#125; 拆分为多个函数这种方式需要将函数名取的尽量清晰易懂，不要嫌长。 12345678if($age &gt; 18)&#123; doSomeThingA(); doSomeThingB(); doSomeThingC();&#125;else&#123; doSomeThingD(); doSomeThingE();&#125; 多层 if 嵌套的语法，把他写成线性的，就像写规则一样将其一条条罗列出来12345678910111213function match($age, $salary, $pretty)&#123; if($age &gt; 18)&#123; // do some thing A; if($salary &gt; 5000)&#123; // do some thing B; if($pretty == true)&#123; return true; &#125; &#125; &#125; return false;&#125; 改写成这样","text":"删除 else12345678function test($arg)&#123; if($arg == 'foobar')&#123; return true; &#125;else&#123; return false; &#125;&#125; 更好的写法 12345678function test($arg)&#123; if($arg == 'foobar')&#123; return true; &#125; return false;&#125; 拆分为多个函数这种方式需要将函数名取的尽量清晰易懂，不要嫌长。 12345678if($age &gt; 18)&#123; doSomeThingA(); doSomeThingB(); doSomeThingC();&#125;else&#123; doSomeThingD(); doSomeThingE();&#125; 多层 if 嵌套的语法，把他写成线性的，就像写规则一样将其一条条罗列出来12345678910111213function match($age, $salary, $pretty)&#123; if($age &gt; 18)&#123; // do some thing A; if($salary &gt; 5000)&#123; // do some thing B; if($pretty == true)&#123; return true; &#125; &#125; &#125; return false;&#125; 改写成这样 123456789101112131415function match($age, $salary, $pretty)&#123; if($age &lt; 18)&#123; return false; &#125; // do some thing A; if($salary &lt; 5000)&#123; return false; &#125; // do some thing B; return $pretty == true;&#125; 1234567891011function contry_initial($country)&#123; if ($country===\"China\" )&#123; return \"CHN\"; &#125;else if($country===\"America\")&#123; return \"USA\"; &#125;else if($country===\"Japna\")&#123; return \"JPN\"; &#125;else&#123; return \"OTHER\"; &#125;&#125; 更好的写法 1234567891011121314function contry_initial($country)&#123; $countryList=[ \"China\"=&gt; \"CHN\", \"America\"=&gt; \"USA\", \"Japna\"=&gt; \"JPN\", ]; // 也可以：array_key_exists($country, $countryList) if(in_array($country, array_keys($countryList))) &#123; return $countryList[$country]; &#125; return \"Other\";&#125; 如果需要更加自由的定义映射表的话，可以这样写 123456function contry_initial($country, array $countryList)&#123; if(in_array($country, array_keys($countryList))) &#123; return $countryList[$country]; &#125; return \"Other\";&#125; 完全去掉if语句可以写成 123function contry_initial($country, array $countryList)&#123; return in_array($country, array_keys($countryList))?$countryList[$country]:\"Other\";&#125; 最好的写法 12345678function contry_initial($country)&#123; $countryList=[ \"China\"=&gt; \"CHN\", \"America\"=&gt; \"USA\", \"Japna\"=&gt; \"JPN\", ]; return isset($countryList[$country]) ? $countryList[$country] : \"Other\";&#125; 总结 return能越早越好,少用 else 提前中断（return） if else 语句越少越好，可以用condition?a:b 表达的，就不要用if else 有一一对应关系的，使用映射表。","categories":[],"tags":[]},{"title":"laravel中用到的ServiceProvide","slug":"laravel中用到的ServiceProvide","date":"2016-08-04T13:55:02.000Z","updated":"2017-05-18T16:25:20.000Z","comments":true,"path":"2016/08/04/laravel中用到的ServiceProvide/","link":"","permalink":"https://entimm.com/2016/08/04/laravel中用到的ServiceProvide/","excerpt":"路由全局限制如果你希望路由参数可以总是遵循正则表达式，则可以使用 pattern 方法。你应该在 RouteServiceProvider 的 boot 方法里定义这些模式： 123456789101112/** * 定义你的路由模型绑定，模式过滤器等。 * * @param \\Illuminate\\Routing\\Router $router * @return void */public function boot(Router $router)&#123; $router-&gt;pattern('id', '[0-9]+'); parent::boot($router);&#125; 模式一旦被定义，便会自动应用到所有使用该参数名称的路由上： 123Route::get('user/&#123;id&#125;', function ($id) &#123; // Only called if &#123;id&#125; is numeric.&#125;); 路由模型绑定Laravel 路由模型绑定提供了一个方便的方式来注入类实例到你的路由中。例如，除了注入一个用户的 ID，你也可以注入与指定 ID 相符的完整 User 类实例。 首先，使用路由的 model 方法为指定参数指定类。必须在 RouteServiceProvider::boot 方法中定义你的模型绑定： 绑定参数至模型","text":"路由全局限制如果你希望路由参数可以总是遵循正则表达式，则可以使用 pattern 方法。你应该在 RouteServiceProvider 的 boot 方法里定义这些模式： 123456789101112/** * 定义你的路由模型绑定，模式过滤器等。 * * @param \\Illuminate\\Routing\\Router $router * @return void */public function boot(Router $router)&#123; $router-&gt;pattern('id', '[0-9]+'); parent::boot($router);&#125; 模式一旦被定义，便会自动应用到所有使用该参数名称的路由上： 123Route::get('user/&#123;id&#125;', function ($id) &#123; // Only called if &#123;id&#125; is numeric.&#125;); 路由模型绑定Laravel 路由模型绑定提供了一个方便的方式来注入类实例到你的路由中。例如，除了注入一个用户的 ID，你也可以注入与指定 ID 相符的完整 User 类实例。 首先，使用路由的 model 方法为指定参数指定类。必须在 RouteServiceProvider::boot 方法中定义你的模型绑定： 绑定参数至模型 123456public function boot(Router $router)&#123; parent::boot($router); $router-&gt;model('user', 'App\\User');&#125; 接着，定义包含 {user} 参数的路由： 123$router-&gt;get('profile/&#123;user&#125;', function(App\\User $user) &#123; //&#125;); 因为我们已经绑定 {user} 参数至 App\\User 模型，所以 User 实例会被注入至该路由。所以，举个例子，一个至 profile/1 的请求会注入 ID 为 1 的 User 实例。 注意：如果符合的模型不存在于数据库中，就会自动抛出一个 404 异常。 如果你希望指定你自己的「不存在」行为，只需传递一个闭包作为 model 方法的第三个参数： 123$router-&gt;model('user', 'App\\User', function() &#123; throw new NotFoundHttpException;&#125;); 如果你希望使用你自己的解析逻辑，那么你必须使用 Route::bind 方法。你传递至 bind 方法的闭包会获取 URI 的部分值，且会返回你想注入至路由的类实例： 123$router-&gt;bind('user', function($value) &#123; return App\\User::where('name', $value)-&gt;first();&#125;); 响应响应宏如果你想要自定义可以在很多路由和控制器重复使用的响应，可以使用 Illuminate\\Contracts\\Routing\\ResponseFactory 实现的方法 macro。 举个例子，来自 服务提供者的 boot 方法 12345678910111213141516171819202122&lt;?phpnamespace App\\Providers;use Illuminate\\Support\\ServiceProvider;use Illuminate\\Contracts\\Routing\\ResponseFactory;class ResponseMacroServiceProvider extends ServiceProvider&#123; /** * 提供注册后运行的服务。 * * @param ResponseFactory $factory * @return void */ public function boot(ResponseFactory $factory) &#123; $factory-&gt;macro('caps', function ($value) use ($factory) &#123; return $factory-&gt;make(strtoupper($value)); &#125;); &#125;&#125; macro 函数第一个参数为宏名称，第二个参数为闭包函数。宏的闭包函数会在 ResponseFactory 的实现或者辅助函数 response 调用宏名称的时候被运行： 1return response()-&gt;caps('foo'); 视图把数据共享给所有视图有时候你可能需要共享一些数据给应用程序的所有渲染视图，这时可以通过使用视图 factory 的 share 方法来完成。通常情况下，你会把这些调用 share 方法的代码放在一个服务提供者的 boot 方法内。你可以选择直接写在 AppServiceProvider 或是自己生成一个不同的服务提供者来放置这些代码：1234567891011121314151617181920212223242526&lt;?phpnamespace App\\Providers;class AppServiceProvider extends ServiceProvider&#123; /** * 启动任何应用程序的服务。 * * @return void */ public function boot() &#123; view()-&gt;share('key', 'value'); &#125; /** * 注册服务提供者。 * * @return void */ public function register() &#123; // &#125;&#125; 视图组件视图组件就是在视图被渲染前，会被调用的闭包或类方法。如果你想在每次渲染某些视图时绑定数据，视图组件可以帮你把这样的程序逻辑都组织到同一个地方。 让我们在 服务提供者 内注册我们的视图组件。下面例子将使用 View 辅助函数来获取底层 Illuminate\\Contracts\\View\\Factory contract 实现。请注意，Laravel 没有默认的目录来放置视图组件。你可以随意把它们放到任何地方。举例来说，你可以创建一个 App\\Http\\ViewComposers 目录： 123456789101112131415161718192021222324252627282930313233343536&lt;?phpnamespace App\\Providers;use Illuminate\\Support\\ServiceProvider;class ComposerServiceProvider extends ServiceProvider&#123; /** * 在容器内注册所有绑定。 * * @return void */ public function boot() &#123; // 使用对象型态的视图组件... view()-&gt;composer( 'profile', 'App\\Http\\ViewComposers\\ProfileComposer' ); // 使用闭包型态的视图组件... view()-&gt;composer('dashboard', function ($view) &#123; &#125;); &#125; /** * 注册服务提供者。 * * @return void */ public function register() &#123; // &#125;&#125; 现在我们已经注册好了视图组件，在每次 profile 视图渲染的时候，ProfileComposer@compose 方法都将会被运行。接下来我们来看看这个视图组件类要如何定义： 123456789101112131415161718192021222324252627282930313233343536373839&lt;?phpnamespace App\\Http\\ViewComposers;use Illuminate\\Contracts\\View\\View;use Illuminate\\Users\\Repository as UserRepository;class ProfileComposer&#123; /** * 用户对象的实例。 * * @var UserRepository */ protected $users; /** * 创建一个新的个人数据视图组件。 * * @param UserRepository $users * @return void */ public function __construct(UserRepository $users) &#123; // 所有依赖都会自动地被服务容器解析... $this-&gt;users = $users; &#125; /** * 将数据绑定到视图。 * * @param View $view * @return void */ public function compose(View $view) &#123; $view-&gt;with('count', $this-&gt;users-&gt;count()); &#125;&#125; 在视图被渲染之前，视图组件的 compose 方法会被调用，并传入一个 Illuminate\\Contracts\\View\\View 实例。你可以使用 with 方法来把数据绑定到视图。 备注：所有的 视图组件 都会被服务容器所解析，因此你可以在视图组件的构造器、类型提示中注入所需的任何依赖。 在视图组件内使用通配符你可以在 composer 方法的第一个参数中传递一个视图数组，来同时对多个视图附加同一个视图组件： 1234view()-&gt;composer( ['profile', 'dashboard'], 'App\\Http\\ViewComposers\\MyViewComposer'); 视图的 composer 方法可以接受 * 作为通配符，所以你可以对所有视图附加 composer。如下： 123view()-&gt;composer('*', function ($view) &#123; //&#125;); 视图创建者视图 创建者 几乎和视图组件运作方式一样；只是视图创建者会在视图初始化后就立即运行，而不是像视图组件一样要一直等到视图即将被渲染完成时才会被运行。要注册一个创建者，只要使用 creator 方法即可： 1view()-&gt;creator('profile', 'App\\Http\\ViewCreators\\ProfileCreator'); 模板服务注入@inject 命令可以取出 Laravel 服务容器 中的服务。传递给 @inject 的第一个参数为置放该服务的变量名称，而第二个参数为你想要解析的服务的类或是接口的名称： 12345@inject('metrics', 'App\\Services\\MetricsService')&lt;div&gt; 每月收入：&#123;&#123; $metrics-&gt;monthlyRevenue() &#125;&#125;。&lt;/div&gt; 扩充 BladeBlade 甚至允许你自定义命令，你可以使用 directive 方法注册命令。当 Blade 编译器遇到该命令时，它将会带参数调用提供的回调函数。 以下例子会创建一个把指定的 $var 格式化的 @datetime($var) 命令： 12345678910111213141516171819202122232425262728293031&lt;?phpnamespace App\\Providers;use Blade;use Illuminate\\Support\\ServiceProvider;class AppServiceProvider extends ServiceProvider&#123; /** * 运行服务注册后的启动进程。 * * @return void */ public function boot() &#123; Blade::directive('datetime', function($expression) &#123; return \"&lt;?php echo with&#123;$expression&#125;-&gt;format('m/d/Y H:i'); ?&gt;\"; &#125;); &#125; /** * 在容器注册绑定。 * * @return void */ public function register() &#123; // &#125;&#125; 如你所见，Laravel 的 with 辅助函数被用在这个命令中。with 辅助函数会简单地返回指定的对象或值，并允许使用便利的链式调用。最后此命令生成的 PHP 会是： 1&lt;?php echo with($var)-&gt;format('m/d/Y H:i'); ?&gt;","categories":[],"tags":[]},{"title":"laravel 技巧","slug":"laravel 技巧","date":"2016-05-21T03:03:19.000Z","updated":"2017-05-18T16:31:05.000Z","comments":true,"path":"2016/05/21/laravel 技巧/","link":"","permalink":"https://entimm.com/2016/05/21/laravel 技巧/","excerpt":"快速找到 facade 中对应的类123Route::get('test', function()&#123; dd(get_class(HTML::getFacadeRoot()));&#125;); 或者使用 idehelper 将数据表里的数据导出成 Seeder 文件 composer require orangehill/iseed 在 config/app.php 文件中添加 Service Provider php artisan iseed 后面带上本地数据表的名称, 可直接将数据库表的内容转换为 seeder 文件 强制覆盖导出文件 – force 建议 使用模型工厂来填充数据模型工厂避免1factory(\\App\\Models\\User::class)-&gt;times(300)-&gt;create(); 正确的做法：使用 make 方法12$users = factory(\\App\\Models\\User::class)-&gt;times(1000)-&gt;make();\\App\\Models\\User::insert($users-&gt;toArray()); 传统方式","text":"快速找到 facade 中对应的类123Route::get('test', function()&#123; dd(get_class(HTML::getFacadeRoot()));&#125;); 或者使用 idehelper 将数据表里的数据导出成 Seeder 文件 composer require orangehill/iseed 在 config/app.php 文件中添加 Service Provider php artisan iseed 后面带上本地数据表的名称, 可直接将数据库表的内容转换为 seeder 文件 强制覆盖导出文件 – force 建议 使用模型工厂来填充数据模型工厂避免1factory(\\App\\Models\\User::class)-&gt;times(300)-&gt;create(); 正确的做法：使用 make 方法12$users = factory(\\App\\Models\\User::class)-&gt;times(1000)-&gt;make();\\App\\Models\\User::insert($users-&gt;toArray()); 传统方式避免1234567891011$faker = Faker::create();$users = User::lists('id');foreach (range(1, 1000) as $index)&#123; Topic::create([ 'user_id' =&gt; $faker-&gt;randomElement($users), 'title' =&gt; $faker-&gt;sentence(), 'description' =&gt; $faker-&gt;text(), ]);&#125; 解决方案,使用 DB:insert123456789101112131415$faker = Faker::create();$users = User::lists('id');$datas = [];foreach (range(1, 1000) as $index)&#123; $datas[] = [ 'user_id' =&gt; $faker-&gt;randomElement($users), 'title' =&gt; $faker-&gt;sentence(), 'description' =&gt; $faker-&gt;text(), 'created_at' =&gt; Carbon::now()-&gt;toDateTimeString(), 'updated_at' =&gt; Carbon::now()-&gt;toDateTimeString(), ];&#125;DB::table('topics')-&gt;insert($datas); 坑如果通过 PECL 安装 Redis PHP 扩展，则需要重命名 config/app.php 文件里的 Redis 别名。","categories":[],"tags":[]}]}