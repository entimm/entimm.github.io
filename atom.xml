<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Entimm&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://entimm.com/"/>
  <updated>2017-05-18T15:43:55.000Z</updated>
  <id>https://entimm.com/</id>
  
  <author>
    <name>entimm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>那些概念</title>
    <link href="https://entimm.com/2017/05/18/%E9%82%A3%E4%BA%9B%E6%A6%82%E5%BF%B5/"/>
    <id>https://entimm.com/2017/05/18/那些概念/</id>
    <published>2017-05-18T15:43:36.000Z</published>
    <updated>2017-05-18T15:43:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="全局变量的缺点"><a href="#全局变量的缺点" class="headerlink" title="全局变量的缺点"></a>全局变量的缺点</h3><p>全局变量的优点是使用方便。 其缺点也是明显的，这里指针对两点说明</p>
<ul>
<li><p>不能保证值的正确性；因为其作用域是全局，所以程序范围内都可以修改它的值，如果出现错误非常难以发现。</p>
</li>
<li><p>如果在多线程中使用全局变量，你的程序将会错的一塌糊涂。多线程会修改另一个线程使用的全局变量的值，如果不注意，一旦出错后果不堪设想。所以在这种情况下万不得意不要使用全局变量。</p>
</li>
<li><p>增加了模块的偶合</p>
</li>
<li><p>全局变量保存在静态存贮区，程序开始运行时为其分配内存，程序结束释放该内存。与局部变量的动态分配、动态释放相比，生存期比较长，因此过多的全局变量会占用较多的内存单元。 </p>
</li>
<li><p>全局变量破坏了函数的封装性能。前面的章节曾经讲过，函数象一个黑匣子，一般是通过函数参数和返回值进行输入输出，函数内部实现相对独立。但函数中如果使用了全局变量，那么函数体内的语句就可以绕过函数参数和返回值进行存取，这种情况破坏了函数的独立性，使函数对全局变量产生依赖。同时，也降低了该函数的可移植性。</p>
</li>
<li><p>全局变量使函数的代码可读性降低。由于多个函数都可能使用全局变量，函数执行时全局变量的值可能随时发生变化，对于程序的查错和调试都非常不利。 </p>
</li>
</ul>
<h3 id="全局函数-静态方法"><a href="#全局函数-静态方法" class="headerlink" title="全局函数 静态方法"></a>全局函数 静态方法</h3><p>global method适合定义一种与任何对象无紧密联系的服务</p>
<p>static method适合定义与对象类型关系密切，但是与单一对象不十分密切的服务。</p>
<h3 id="函数副作用-amp-纯函数"><a href="#函数副作用-amp-纯函数" class="headerlink" title="函数副作用&amp;纯函数"></a>函数副作用&amp;纯函数</h3><p>在计算机科学中，函数副作用指当调用函数时，除了返回函数值之外，还对主调用函数产生附加的影响。例如修改全局变量（函数外的变量）或修改参数。</p>
<p>函数副作用会给程序设计带来不必要的麻烦，给程序带来十分难以查找的错误，并降低程序的可读性。严格的函数式语言要求函数必须无副作用。</p>
<p>如果一个函数通过隐式（Implicit）方式，从外界获取数据，或者向外部输出数据，那么，该函数就不是纯函数，叫作非纯函数（Impure Function）。</p>
<p>隐式（Implicit）的意思是，函数通过参数和返回值以外的渠道，和外界进行数据交换。比如，读取全局变量，修改全局变量，都叫作以隐式的方式和外界进行数据交换；比如，利用 I/O API（输入输出系统函数库）读取配置文件，或者输出到文件，打印到屏幕，都叫做隐式的方式和外界进行数据交换。</p>
<p>纯函数的定义也可以写为「没有副作用的函数」。</p>
<p>I/O API 可以看作是一种特殊的全局变量。文件、屏幕、数据库等输入输出结构可以看作是独立于运行环境之外的系统外全局变量，而不是应用程序自己定义的全局变量。</p>
<p>有些函数的参数是一种 In/Out 作用的参数，即函数可能改变参数里面的内容，把一些信息通过输入参数，夹带到外界。这种情况，严格来说，也是副作用。也是非纯函数。</p>
<p>纯函数的好处主要有几点：</p>
<p>无状态。线程安全。不需要线程同步。<br>纯函数相互调用组装起来的函数，还是纯函数。<br>应用程序或者运行环境（Runtime）可以对纯函数的运算结果进行缓存，运算加快速度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;全局变量的缺点&quot;&gt;&lt;a href=&quot;#全局变量的缺点&quot; class=&quot;headerlink&quot; title=&quot;全局变量的缺点&quot;&gt;&lt;/a&gt;全局变量的缺点&lt;/h3&gt;&lt;p&gt;全局变量的优点是使用方便。 其缺点也是明显的，这里指针对两点说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不能保证值的正确性；因为其作用域是全局，所以程序范围内都可以修改它的值，如果出现错误非常难以发现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果在多线程中使用全局变量，你的程序将会错的一塌糊涂。多线程会修改另一个线程使用的全局变量的值，如果不注意，一旦出错后果不堪设想。所以在这种情况下万不得意不要使用全局变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;增加了模块的偶合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全局变量保存在静态存贮区，程序开始运行时为其分配内存，程序结束释放该内存。与局部变量的动态分配、动态释放相比，生存期比较长，因此过多的全局变量会占用较多的内存单元。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全局变量破坏了函数的封装性能。前面的章节曾经讲过，函数象一个黑匣子，一般是通过函数参数和返回值进行输入输出，函数内部实现相对独立。但函数中如果使用了全局变量，那么函数体内的语句就可以绕过函数参数和返回值进行存取，这种情况破坏了函数的独立性，使函数对全局变量产生依赖。同时，也降低了该函数的可移植性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全局变量使函数的代码可读性降低。由于多个函数都可能使用全局变量，函数执行时全局变量的值可能随时发生变化，对于程序的查错和调试都非常不利。 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;全局函数-静态方法&quot;&gt;&lt;a href=&quot;#全局函数-静态方法&quot; class=&quot;headerlink&quot; title=&quot;全局函数 静态方法&quot;&gt;&lt;/a&gt;全局函数 静态方法&lt;/h3&gt;&lt;p&gt;global method适合定义一种与任何对象无紧密联系的服务&lt;/p&gt;
&lt;p&gt;static method适合定义与对象类型关系密切，但是与单一对象不十分密切的服务。&lt;/p&gt;
&lt;h3 id=&quot;函数副作用-amp-纯函数&quot;&gt;&lt;a href=&quot;#函数副作用-amp-纯函数&quot; class=&quot;headerlink&quot; title=&quot;函数副作用&amp;amp;纯函数&quot;&gt;&lt;/a&gt;函数副作用&amp;amp;纯函数&lt;/h3&gt;&lt;p&gt;在计算机科学中，函数副作用指当调用函数时，除了返回函数值之外，还对主调用函数产生附加的影响。例如修改全局变量（函数外的变量）或修改参数。&lt;/p&gt;
&lt;p&gt;函数副作用会给程序设计带来不必要的麻烦，给程序带来十分难以查找的错误，并降低程序的可读性。严格的函数式语言要求函数必须无副作用。&lt;/p&gt;
&lt;p&gt;如果一个函数通过隐式（Implicit）方式，从外界获取数据，或者向外部输出数据，那么，该函数就不是纯函数，叫作非纯函数（Impure Function）。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git 命令</title>
    <link href="https://entimm.com/2016/11/22/git%20%E5%91%BD%E4%BB%A4/"/>
    <id>https://entimm.com/2016/11/22/git 命令/</id>
    <published>2016-11-22T03:11:13.000Z</published>
    <updated>2017-05-18T16:30:37.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">git push origin test:master  # 提交本地test分支作为远程的master分支</div><div class="line">git push origin test:test    # 提交本地test分支作为远程的test分支</div><div class="line">git push origin :test        # 刚提交到远程的test将被删除，但是本地还会保存的，不用担心</div><div class="line"></div><div class="line">git push --tags # 上传所有标签</div><div class="line"></div><div class="line">git remote set-url --push [name] [newUrl] # 修改远程仓库</div><div class="line">git pull [remoteName] [localBranchName]</div><div class="line">git push [remoteName] [localBranchName]</div><div class="line"></div><div class="line">git merge [name]   # 将名称为[name]的分支与当前分支合并</div><div class="line">git rebase [name]  #会将[name]分支的代码合并过来，并按照提交的顺序排序(衍合指定分支到分支到当前分支)</div><div class="line"></div><div class="line">如果要对某些代码的commit重新整理</div><div class="line">1. 可以记住某个commit号</div><div class="line">2. git rebase -i commit号</div><div class="line"></div><div class="line">git merge-base branchA branchB #查看2分支的公告节点</div><div class="line"></div><div class="line">git diff $(git-merge-base A B) B</div><div class="line"><span class="meta"></span></div><div class="line"># 按时间逆序列出提交对象，常用于查找涉及到某些文件的提交的hash。例如，查找所有关系到文件readme的提交</div><div class="line">git rev-list</div><div class="line"><span class="meta"></span></div><div class="line"># As of Git v1.7.0, you can delete a remote branch using</div><div class="line">git push origin --delete &lt;branch_name&gt;</div><div class="line"><span class="meta">#</span> which is easier to remember than</div><div class="line">git push origin :&lt;branch_name&gt;</div><div class="line"></div><div class="line">git shortlog</div><div class="line"></div><div class="line">git log branch --not master # 查看在branch上的，但不在master上的记录</div></pre></td></tr></table></figure>
<h3 id="View-a-file-in-a-different-Git-branch-without-changing-branches"><a href="#View-a-file-in-a-different-Git-branch-without-changing-branches" class="headerlink" title="View a file in a different Git branch without changing branches"></a>View a file in a different Git branch without changing branches</h3><p>git checkout $REVISION – $FILE<br>git checkout $REVISION – “*” switch all files without changing brnaches<br>git show $REVISION:$FILE<br>git checkout –orphan $BRANCH</p>
<h3 id="Make-an-existing-Git-branch-track-a-remote-branch"><a href="#Make-an-existing-Git-branch-track-a-remote-branch" class="headerlink" title="Make an existing Git branch track a remote branch"></a>Make an existing Git branch track a remote branch</h3><p>git branch -u $UPSTREAM/$REMOTE_BRANCH $LOCAL_BRANCH<br>git branch –set-upstream-to=$UPSTREAM/$REMOTE_BRANCH</p>
<p>git push -u $UPSTREAM $REMOTE_BRANCH</p>
<p>git remote add $UPSTREAM <remote-url><br>git fetch $UPSTREAM<br>git branch -f –track $LOCAL_BRANCH $UPSTREAM/$REMOTE_BRANCH</remote-url></p>
<h1 id="OR"><a href="#OR" class="headerlink" title="OR:"></a>OR:</h1><p>git branch –set-upstream $LOCAL_BRANCH $UPSTREAM/$REMOTE_BRANCH</p>
<h3 id="diff-changes-only-among-certain-file-s"><a href="#diff-changes-only-among-certain-file-s" class="headerlink" title="diff changes only among certain file(s)"></a>diff changes only among certain file(s)</h3><p>git diff $BRANCH1 $BRANCH2 – $FILE1 $FILE2<br>(branch1 is optional and your current branch (the branch you are on) will be considered by default if branch1 is not provided)</p>
<p>git diff $REVISION $FILE</p>
<h3 id="view-git-tree-view"><a href="#view-git-tree-view" class="headerlink" title="view git tree view"></a>view git tree view</h3><p>git ls-tree</p>
<h3 id="other-command"><a href="#other-command" class="headerlink" title="other command"></a>other command</h3><p>bisect     //Find by binary search the change that introduced a bug<br>grep       //Print lines matching a pattern<br>git log –since=”two weeks ago” –until=”two days ago”<br>git log –since=four.days –until=two.days<br>git instaweb</p>
<h3 id="checkout-remote-branch"><a href="#checkout-remote-branch" class="headerlink" title="checkout remote branch"></a>checkout remote branch</h3><p>git checkout –track $UPSTREAM/$REMOTE_BRANCH</p>
<h3 id="Delete-everything-in-the-orphan-branch"><a href="#Delete-everything-in-the-orphan-branch" class="headerlink" title="Delete everything in the orphan branch"></a>Delete everything in the orphan branch</h3><p>git rm -rf .</p>
<h3 id="列出当天某人的所有提交记录"><a href="#列出当天某人的所有提交记录" class="headerlink" title="列出当天某人的所有提交记录"></a>列出当天某人的所有提交记录</h3><p>git log –author=AUTHOR –oneline –since=”6am” –graph –all –decorate</p>
<h3 id="判断当前分支"><a href="#判断当前分支" class="headerlink" title="判断当前分支"></a>判断当前分支</h3><p>git rev-parse –abbrev-ref HEAD</p>
<h3 id="Find-the-nearest-parent-branch-of-the-current-git-branch"><a href="#Find-the-nearest-parent-branch-of-the-current-git-branch" class="headerlink" title="Find the nearest parent branch of the current git branch"></a>Find the nearest parent branch of the current git branch</h3><p>#!/usr/bin/env zsh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">branch=`git rev-parse --abbrev-ref HEAD`</div><div class="line"></div><div class="line">git show-branch | ack &apos;\*&apos; | ack -v &quot;$branch&quot; | head -n1 | sed &apos;s/.*\[\(.*\)\].*/\1/&apos; | sed &apos;s/[\^~].*//&apos;`</div><div class="line"># How it works:</div><div class="line"># 1| Display a textual history of all commits.</div><div class="line"># 2| Ancestors of the current commit are indicated</div><div class="line">#    by a star. Filter out everything else.</div><div class="line"># 3| Ignore all the commits in the current branch.</div><div class="line"># 4| The first result will be the nearest ancestor branch.</div><div class="line">#    Ignore the other results.</div><div class="line"># 5| Branch names are displayed [in brackets]. Ignore </div><div class="line">#    everything outside the brackets, and the brackets.</div><div class="line"># 6| Sometimes the branch name will include a ~2 or ^1 to</div><div class="line">#    indicate how many commits are between the referenced</div><div class="line">#    commit and the branch tip. We don&apos;t care. Ignore them.</div></pre></td></tr></table></figure></p>
<p>or<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">branch=`git rev-parse --abbrev-ref HEAD`</div><div class="line">git show-branch -a 2&gt;/dev/null | grep &apos;\*&apos; | grep -v &quot;$branch&quot; | head -n1 | sed &apos;s/.*\[\(.*\)\].*/\1/&apos; | sed &apos;s/[\^~].*//&apos;</div></pre></td></tr></table></figure></p>
<p>git stash save –keep-index    # stash only unstaged files</p>
<h3 id="忽略追踪文件中的变更"><a href="#忽略追踪文件中的变更" class="headerlink" title="忽略追踪文件中的变更"></a>忽略追踪文件中的变更</h3><p>git update-index –assume-unchanged $FILE</p>
<p>git merge –squash $BRANCH</p>
<p>“^”代表父提交,当一个提交有多个父提交时，可以通过在”^”后面跟上一个数字，表示第几个父提交，”^”相当于”^1”</p>
<p>checkout只会移动HEAD指针，reset会改变HEAD的引用值</p>
<p>git用得时间多了，会变慢。 那么可以用下面的命令优化一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git gc   - Cleanup unnecessary files and optimize the local repository</div><div class="line">git-repack - Pack unpacked objects in a repository</div></pre></td></tr></table></figure></p>
<p>git add负责将文件内容存入blob对象，并更新index，git commit负责根据index生成tree对象，然后生成commit对象指向这个tree对象</p>
<p>git fsck –lost-found //检查丢失的提交<br>git ls-files –stage //可以显示出索引的内容<br>git checkout . //撤销所有修改<br>git clean -xfd //连 gitignore 的untrack 文件/目录也一起删掉<br>git branch –merged | xargs git branch -d //删除已经合并的分支</p>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。<br>但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：<br>　　<em> 功能（feature）分支
　　</em> 预发布（release）分支<br>　　* 修补bug（fixbug）分支<br>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p>
<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p>git log –graph –abbrev-commit –decorate –format=format:’%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)’</p>
<p>git log –graph –abbrev-commit –decorate –format=format:’%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n’’          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)’</p>
<p>git log –graph –abbrev-commit –decorate –format=format:’%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(bold yellow)%d%C(reset)%n’’          %C(white)%s%C(reset)%n’’          %C(dim white)- %an &lt;%ae&gt; %C(reset) %C(dim white)(committer: %cn &lt;%ce&gt;)%C(reset)’</p>
<p>如果想按照提交时间顺序查看分支历史，可以使用以下命令：<br>–follow可以跟踪文件的重命名。<br>-p可以跟踪文件内容变化。</p>
<p><a href="https://api.github.com/users/entimm/starred" target="_blank" rel="external">https://api.github.com/users/entimm/starred</a><br>page=2&amp;per_page=100<br>sort    string  One of created (when the repository was starred) or updated (when it was last pushed to). Default: created<br>direction   string  One of asc (ascending) or desc (descending). Default: desc</p>
<p>git ls-files –other –ignored –exclude-stanard # list all ignored files in this project<br>git reset –keep $COMMIT # reset and preserve uncommitted local changes<br>git checkout –track $REMOTE_BRANCH # create a new tracking branch based on a remote branch</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git push origin test:master  # 提交本地test分支作为远程的master分支&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git push origin test:test    # 提交本地test分支作为远程的test分支&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git push origin :test        # 刚提交到远程的test将被删除，但是本地还会保存的，不用担心&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git push --tags # 上传所有标签&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git remote set-url --push [name] [newUrl] # 修改远程仓库&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git pull [remoteName] [localBranchName]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git push [remoteName] [localBranchName]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git merge [name]   # 将名称为[name]的分支与当前分支合并&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git rebase [name]  #会将[name]分支的代码合并过来，并按照提交的顺序排序(衍合指定分支到分支到当前分支)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;如果要对某些代码的commit重新整理&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1. 可以记住某个commit号&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2. git rebase -i commit号&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git merge-base branchA branchB #查看2分支的公告节点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git diff $(git-merge-base A B) B&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 按时间逆序列出提交对象，常用于查找涉及到某些文件的提交的hash。例如，查找所有关系到文件readme的提交&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git rev-list&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# As of Git v1.7.0, you can delete a remote branch using&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git push origin --delete &amp;lt;branch_name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; which is easier to remember than&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git push origin :&amp;lt;branch_name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git shortlog&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git log branch --not master # 查看在branch上的，但不在master上的记录&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;View-a-file-in-a-different-Git-branch-without-changing-branches&quot;&gt;&lt;a href=&quot;#View-a-file-in-a-different-Git-branch-without-changing-branches&quot; class=&quot;headerlink&quot; title=&quot;View a file in a different Git branch without changing branches&quot;&gt;&lt;/a&gt;View a file in a different Git branch without changing branches&lt;/h3&gt;&lt;p&gt;git checkout $REVISION – $FILE&lt;br&gt;git checkout $REVISION – “*” switch all files without changing brnaches&lt;br&gt;git show $REVISION:$FILE&lt;br&gt;git checkout –orphan $BRANCH&lt;/p&gt;
&lt;h3 id=&quot;Make-an-existing-Git-branch-track-a-remote-branch&quot;&gt;&lt;a href=&quot;#Make-an-existing-Git-branch-track-a-remote-branch&quot; class=&quot;headerlink&quot; title=&quot;Make an existing Git branch track a remote branch&quot;&gt;&lt;/a&gt;Make an existing Git branch track a remote branch&lt;/h3&gt;&lt;p&gt;git branch -u $UPSTREAM/$REMOTE_BRANCH $LOCAL_BRANCH&lt;br&gt;git branch –set-upstream-to=$UPSTREAM/$REMOTE_BRANCH&lt;/p&gt;
&lt;p&gt;git push -u $UPSTREAM $REMOTE_BRANCH&lt;/p&gt;
&lt;p&gt;git remote add $UPSTREAM &lt;remote-url&gt;&lt;br&gt;git fetch $UPSTREAM&lt;br&gt;git branch -f –track $LOCAL_BRANCH $UPSTREAM/$REMOTE_BRANCH&lt;/remote-url&gt;&lt;/p&gt;
&lt;h1 id=&quot;OR&quot;&gt;&lt;a href=&quot;#OR&quot; class=&quot;headerlink&quot; title=&quot;OR:&quot;&gt;&lt;/a&gt;OR:&lt;/h1&gt;&lt;p&gt;git branch –set-upstream $LOCAL_BRANCH $UPSTREAM/$REMOTE_BRANCH&lt;/p&gt;
&lt;h3 id=&quot;diff-changes-only-among-certain-file-s&quot;&gt;&lt;a href=&quot;#diff-changes-only-among-certain-file-s&quot; class=&quot;headerlink&quot; title=&quot;diff changes only among certain file(s)&quot;&gt;&lt;/a&gt;diff changes only among certain file(s)&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iTerm2奇淫技巧</title>
    <link href="https://entimm.com/2016/10/25/iTerm2%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    <id>https://entimm.com/2016/10/25/iTerm2奇淫技巧/</id>
    <published>2016-10-24T17:08:29.000Z</published>
    <updated>2017-05-18T15:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>control + a<br>回到行首。这个对于用过unix系统的童鞋来说再熟悉不过。</p>
<p>control + e<br>有了回到行首，当然不能错过光标回到行尾，写文章，打命令，这两个快捷键都是用的很频繁的。</p>
<p>control + w<br>删除之前一个单词。这个快捷键是我意外发现的，既然有删除之前一个单词，我觉得应该会有删除后面一个单词，但我至今没发现，如果你会请告诉我，重金打赏。</p>
<p>control + u<br>清除当前行。</p>
<p>control + p<br>上一条命令。</p>
<p>control + k<br>删除命令行文本到末尾。</p>
<p>control + l<br>清屏。</p>
<p>control + r<br>搜索命令历史。这个也是我经常用的快捷键，有时候你忘了正行命令，用这个命令很不错的，当然history | grep ** 会更有用些。</p>
<p>前一标签页<br><code>⌘</code> + <code>shift</code> + <code>Left</code></p>
<p>后一标签页<br><code>⌘</code> + <code>shift</code> + <code>Right</code></p>
<p>Go to Tab<br><code>⌘</code> + <code>Number</code></p>
<p>Go to Window<br><code>⌘</code> + <code>Option</code> + <code>Number</code></p>
<p>Go to Split Pane by Direction<br><code>⌘</code> + <code>Option</code> + <code>Arrow</code></p>
<p>Go to Split Pane by Order of Use<br><code>⌘</code> + <code>]</code> , <code>⌘</code> + <code>[</code></p>
<p>Undo<br><code>Ctrl</code> + <code>-</code></p>
<p><code>Ctrl</code> + <code>y</code><br><code>Ctrl</code> + <code>g</code></p>
<p>查看历史命令：command + ;<br>查看剪贴板历史：command + shift + h<br>搜索命令历史：ctrl + r</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;control + a&lt;br&gt;回到行首。这个对于用过unix系统的童鞋来说再熟悉不过。&lt;/p&gt;
&lt;p&gt;control + e&lt;br&gt;有了回到行首，当然不能错过光标回到行尾，写文章，打命令，这两个快捷键都是用的很频繁的。&lt;/p&gt;
&lt;p&gt;control + w&lt;br&gt;删除之前一个单词。这个快捷键是我意外发现的，既然有删除之前一个单词，我觉得应该会有删除后面一个单词，但我至今没发现，如果你会请告诉我，重金打赏。&lt;/p&gt;
&lt;p&gt;control + u&lt;br&gt;清除当前行。&lt;/p&gt;
&lt;p&gt;control + p&lt;br&gt;上一条命令。&lt;/p&gt;
&lt;p&gt;control + k&lt;br&gt;删除命令行文本到末尾。&lt;/p&gt;
&lt;p&gt;control + l&lt;br&gt;清屏。&lt;/p&gt;
&lt;p&gt;control + r&lt;br&gt;搜索命令历史。这个也是我经常用的快捷键，有时候你忘了正行命令，用这个命令很不错的，当然history | grep ** 会更有用些。&lt;/p&gt;
&lt;p&gt;前一标签页&lt;br&gt;&lt;code&gt;⌘&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;Left&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;后一标签页&lt;br&gt;&lt;code&gt;⌘&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;Right&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>配置linux服务器常用命令</title>
    <link href="https://entimm.com/2016/09/28/%E9%85%8D%E7%BD%AElinux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://entimm.com/2016/09/28/配置linux服务器常用命令/</id>
    <published>2016-09-28T02:17:30.000Z</published>
    <updated>2017-05-18T16:14:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装lnmp"><a href="#安装lnmp" class="headerlink" title="安装lnmp"></a>安装lnmp</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/php</div><div class="line">sudo apt install -y language-pack-en-base</div><div class="line">locale-gen en_US.UTF-8</div><div class="line"></div><div class="line">sudo apt -y install php7.1</div><div class="line">sudo apt install -y php7.1-fpm php7.1-mysql php7.1-curl php7.1-xml php7.1-mcrypt php7.1-json php7.1-gd php7.1-mbstring</div><div class="line">sudo apt install mysql-server-5.7</div><div class="line">sudo apt install nginx</div><div class="line">sudo apt install redis-server php-redis</div></pre></td></tr></table></figure>
<h3 id="安装composer"><a href="#安装composer" class="headerlink" title="安装composer"></a>安装composer</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"</div><div class="line">php -r "if (hash_file('SHA384', 'composer-setup.php') === 'e115a8dc7871f15d853148a7fbac7da27d6c0030b848d9b3dc09e2a0388afed865e6a3d6b3c0fad45c48e2b5fc1196ae') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;"\nphp composer-setup.php</div><div class="line">php -r "unlink('composer-setup.php');"</div></pre></td></tr></table></figure>
<h3 id="配置-www-www-data-用户权限"><a href="#配置-www-www-data-用户权限" class="headerlink" title="配置 www \ www-data 用户权限"></a>配置 www \ www-data 用户权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo -Hu www-data ssh-keygen -t rsa -C "entimm@gmail.com"</div><div class="line">sudo chown -R www-data:www-data /var/www/</div><div class="line">sudo visudo</div><div class="line">sudo passwd www-data</div><div class="line">vim /etc/passwd</div></pre></td></tr></table></figure>
<h3 id="安装ohmyzsh"><a href="#安装ohmyzsh" class="headerlink" title="安装ohmyzsh"></a>安装ohmyzsh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt install zsh</div><div class="line">sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</div></pre></td></tr></table></figure>
<h3 id="安装配置node环境"><a href="#安装配置node环境" class="headerlink" title="安装配置node环境"></a>安装配置node环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl --silent --location https://deb.nodesource.com/setup_4.x | bash -</div><div class="line">apt install -y nodejs</div><div class="line">npm install -g gulp</div><div class="line">npm install -g bower</div><div class="line">echo '\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \\n  --cache=$HOME/.npm/.cache/cnpm \\n  --disturl=https://npm.taobao.org/dist \\n  --userconfig=$HOME/.cnpmrc"' &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</div></pre></td></tr></table></figure>
<h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name entimm</div><div class="line">git config --global user.email entimm@gmial.com</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装lnmp&quot;&gt;&lt;a href=&quot;#安装lnmp&quot; class=&quot;headerlink&quot; title=&quot;安装lnmp&quot;&gt;&lt;/a&gt;安装lnmp&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/php&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo apt install -y language-pack-en-base&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;locale-gen en_US.UTF-8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo apt -y install php7.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo apt install -y php7.1-fpm php7.1-mysql php7.1-curl php7.1-xml php7.1-mcrypt php7.1-json php7.1-gd php7.1-mbstring&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo apt install mysql-server-5.7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo apt install nginx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo apt install redis-server php-redis&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;安装composer&quot;&gt;&lt;a href=&quot;#安装composer&quot; class=&quot;headerlink&quot; title=&quot;安装composer&quot;&gt;&lt;/a&gt;安装composer&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;php -r &quot;copy(&#39;https://getcomposer.org/installer&#39;, &#39;composer-setup.php&#39;);&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;php -r &quot;if (hash_file(&#39;SHA384&#39;, &#39;composer-setup.php&#39;) === &#39;e115a8dc7871f15d853148a7fbac7da27d6c0030b848d9b3dc09e2a0388afed865e6a3d6b3c0fad45c48e2b5fc1196ae&#39;) &amp;#123; echo &#39;Installer verified&#39;; &amp;#125; else &amp;#123; echo &#39;Installer corrupt&#39;; unlink(&#39;composer-setup.php&#39;); &amp;#125; echo PHP_EOL;&quot;\nphp composer-setup.php&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;php -r &quot;unlink(&#39;composer-setup.php&#39;);&quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置-www-www-data-用户权限&quot;&gt;&lt;a href=&quot;#配置-www-www-data-用户权限&quot; class=&quot;headerlink&quot; title=&quot;配置 www \ www-data 用户权限&quot;&gt;&lt;/a&gt;配置 www \ www-data 用户权限&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo -Hu www-data ssh-keygen -t rsa -C &quot;entimm@gmail.com&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo chown -R www-data:www-data /var/www/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo visudo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo passwd www-data&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vim /etc/passwd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;安装ohmyzsh&quot;&gt;&lt;a href=&quot;#安装ohmyzsh&quot; class=&quot;headerlink&quot; title=&quot;安装ohmyzsh&quot;&gt;&lt;/a&gt;安装ohmyzsh&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apt install zsh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;安装配置node环境&quot;&gt;&lt;a href=&quot;#安装配置node环境&quot; class=&quot;headerlink&quot; title=&quot;安装配置node环境&quot;&gt;&lt;/a&gt;安装配置node环境&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;curl --silent --location https://deb.nodesource.com/setup_4.x | bash -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apt install -y nodejs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install -g gulp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install -g bower&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &#39;\n#alias for cnpm\nalias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \\n  --cache=$HOME/.npm/.cache/cnpm \\n  --disturl=https://npm.taobao.org/dist \\n  --userconfig=$HOME/.cnpmrc&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc &amp;amp;&amp;amp; source ~/.zshrc&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>shell</title>
    <link href="https://entimm.com/2016/09/24/shell/"/>
    <id>https://entimm.com/2016/09/24/shell/</id>
    <published>2016-09-24T01:30:30.000Z</published>
    <updated>2017-05-18T16:11:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shell-中的判断"><a href="#shell-中的判断" class="headerlink" title="shell 中的判断"></a>shell 中的判断</h2><ol>
<li>字符串判断</li>
</ol>
<p>str1 = str2　　　　 当两个串有相同内容、长度时为真<br>str1 != str2　　　　当串str1和str2不等时为真<br>-n str1　　　　　　　当串的长度大于0时为真(串非空)<br>-z str1　　　　　　  当串的长度为0时为真(空串)<br>str1　　　　　　　　  当串str1为非空时为真</p>
<ol>
<li>数字的判断</li>
</ol>
<p>int1 -eq int2　　　　两数相等为真<br>int1 -ne int2　　　　两数不等为真<br>int1 -gt int2　　　　int1大于int2为真<br>int1 -ge int2　　　　int1大于等于int2为真<br>int1 -lt int2　　　　int1小于int2为真<br>int1 -le int2　　　　int1小于等于int2为真</p>
<p>-n “$var” 判断一个变量是否有值</p>
<p>3 文件的判断</p>
<p>-r file　　　　　用户可读为真<br>-w file　　　　　用户可写为真<br>-x file　　　　　用户可执行为真<br>-f file　　　　　文件为正规文件为真<br>-d file　　　　　文件为目录为真<br>-c file　　　　　文件为字符特殊文件为真<br>-b file　　　　　文件为块特殊文件为真<br>-s file　　　　　文件大小非0时为真<br>-t file　　　　　当文件描述符(默认为1)指定的设备为终端时为真</p>
<p>3、复杂逻辑判断</p>
<p>-a 　 　　　　　  与<br>-o　　　　　　　   或<br> !　　　　　　　　 非</p>
<h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><p>$0  当前脚本的文件名<br>$n  传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。<br>$#  传递给脚本或函数的参数个数。<br>$<em>  传递给脚本或函数的所有参数。<br>$@  传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $</em> 稍有不同，下面将会讲到。<br>$?  上个命令的退出状态，或函数的返回值。<br>$$  当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;shell-中的判断&quot;&gt;&lt;a href=&quot;#shell-中的判断&quot; class=&quot;headerlink&quot; title=&quot;shell 中的判断&quot;&gt;&lt;/a&gt;shell 中的判断&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;字符串判断&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;str1 = str2　　　　 当两个串有相同内容、长度时为真&lt;br&gt;str1 != str2　　　　当串str1和str2不等时为真&lt;br&gt;-n str1　　　　　　　当串的长度大于0时为真(串非空)&lt;br&gt;-z str1　　　　　　  当串的长度为0时为真(空串)&lt;br&gt;str1　　　　　　　　  当串str1为非空时为真&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数字的判断&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;int1 -eq int2　　　　两数相等为真&lt;br&gt;int1 -ne int2　　　　两数不等为真&lt;br&gt;int1 -gt int2　　　　int1大于int2为真&lt;br&gt;int1 -ge int2　　　　int1大于等于int2为真&lt;br&gt;int1 -lt int2　　　　int1小于int2为真&lt;br&gt;int1 -le int2　　　　int1小于等于int2为真&lt;/p&gt;
&lt;p&gt;-n “$var” 判断一个变量是否有值&lt;/p&gt;
&lt;p&gt;3 文件的判断&lt;/p&gt;
&lt;p&gt;-r file　　　　　用户可读为真&lt;br&gt;-w file　　　　　用户可写为真&lt;br&gt;-x file　　　　　用户可执行为真&lt;br&gt;-f file　　　　　文件为正规文件为真&lt;br&gt;-d file　　　　　文件为目录为真&lt;br&gt;-c file　　　　　文件为字符特殊文件为真&lt;br&gt;-b file　　　　　文件为块特殊文件为真&lt;br&gt;-s file　　　　　文件大小非0时为真&lt;br&gt;-t file　　　　　当文件描述符(默认为1)指定的设备为终端时为真&lt;/p&gt;
&lt;p&gt;3、复杂逻辑判断&lt;/p&gt;
&lt;p&gt;-a 　 　　　　　  与&lt;br&gt;-o　　　　　　　   或&lt;br&gt; !　　　　　　　　 非&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ssh保持链接</title>
    <link href="https://entimm.com/2016/09/23/ssh%E4%BF%9D%E6%8C%81%E9%93%BE%E6%8E%A5/"/>
    <id>https://entimm.com/2016/09/23/ssh保持链接/</id>
    <published>2016-09-23T08:08:33.000Z</published>
    <updated>2017-05-18T15:26:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Client-configuration"><a href="#Client-configuration" class="headerlink" title="Client configuration"></a>Client configuration</h2><p>Try creating the file: ~/.ssh/config<br>Add the contents:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Host *</div><div class="line">  ServerAliveInterval 30</div><div class="line">  ServerAliveCountMax 5</div></pre></td></tr></table></figure></p>
<h2 id="Server-configuration"><a href="#Server-configuration" class="headerlink" title="Server configuration"></a>Server configuration</h2><p>Edit configuration file: /etc/ssh/sshd_config<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ClientAliveInterval 20</div><div class="line">ClientAliveCountMax 5</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Client-configuration&quot;&gt;&lt;a href=&quot;#Client-configuration&quot; class=&quot;headerlink&quot; title=&quot;Client configuration&quot;&gt;&lt;/a&gt;Client configuration&lt;/h2&gt;&lt;p&gt;Try creating the file: ~/.ssh/config&lt;br&gt;Add the contents:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Host *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ServerAliveInterval 30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ServerAliveCountMax 5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Server-configuration&quot;&gt;&lt;a href=&quot;#Server-configuration&quot; class=&quot;headerlink&quot; title=&quot;Server configuration&quot;&gt;&lt;/a&gt;Server configuration&lt;/h2&gt;&lt;p&gt;Edit configuration file: /etc/ssh/sshd_config&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ClientAliveInterval 20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ClientAliveCountMax 5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>快速搭建vpn</title>
    <link href="https://entimm.com/2016/09/22/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAvpn/"/>
    <id>https://entimm.com/2016/09/22/快速搭建vpn/</id>
    <published>2016-09-22T07:33:41.000Z</published>
    <updated>2017-05-18T15:36:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>VPS端一键安装Shadowsocks (SS Python版一键安装脚本支持CentOS 6，7，Debian所有版本，Ubuntu所有版本)，<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</div><div class="line">chmod +x shadowsocks.sh</div><div class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</div></pre></td></tr></table></figure></p>
<p>中间会提示输入SS SERVER使用的端口和连接密码。不输入则是系统默认.</p>
<p>安装完成后，脚本提示如下(记得记录下来)：<br>Congratulations, shadowsocks install completed!<br>Your Server IP:your_server_ip<br>Your Server Port:your_server_port<br>Your Password:your_password<br>Your Local IP:127.0.0.1<br>Your Local Port:1080<br>Your Encryption Method:aes-256-cfb</p>
<p>看到以上提示后就表明VPS上SS已经安装成功，并且已经设置了开机启动，VPS重启后不用手工启动SS。<br>到此就安装成功可以科学上网了</p>
<p>卸载方法：<br>使用root用户登录，运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./shadowsocks.sh uninstall</div></pre></td></tr></table></figure></p>
<p>单用户配置文件 Sample：<br>配置文件路径：/etc/shadowsocks.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;server_port&quot;:8989,</div><div class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;yourpassword&quot;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>多用户多端口配置文件 Sample：<br>配置文件路径：/etc/shadowsocks.json<br>```<br>{<br>    “server”:”0.0.0.0”,<br>    “local_address”:”127.0.0.1”,<br>    “local_port”:1080,<br>    “port_password”:{<br>         “8989”:”password0”,<br>         “9001”:”password1”,<br>         “9002”:”password2”,<br>         “9003”:”password3”,<br>         “9004”:”password4”<br>    },<br>    “timeout”:300,<br>    “method”:”aes-256-cfb”,<br>    “fast_open”: false<br>}</p>
<p>使用命令：<br>启动：/etc/init.d/shadowsocks start<br>停止：/etc/init.d/shadowsocks stop<br>重启：/etc/init.d/shadowsocks restart<br>状态：/etc/init.d/shadowsocks status</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VPS端一键安装Shadowsocks (SS Python版一键安装脚本支持CentOS 6，7，Debian所有版本，Ubuntu所有版本)，&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;chmod +x shadowsocks.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./shadowsocks.sh 2&amp;gt;&amp;amp;1 | tee shadowsocks.log&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;中间会提示输入SS SERVER使用的端口和连接密码。不输入则是系统默认.&lt;/p&gt;
&lt;p&gt;安装完成后，脚本提示如下(记得记录下来)：&lt;br&gt;Congratulations, shadowsocks install completed!&lt;br&gt;Your Server IP:your_server_ip&lt;br&gt;Your Server Port:your_server_port&lt;br&gt;Your Password:your_password&lt;br&gt;Your Local IP:127.0.0.1&lt;br&gt;Your Local Port:1080&lt;br&gt;Your Encryption Method:aes-256-cfb&lt;/p&gt;
&lt;p&gt;看到以上提示后就表明VPS上SS已经安装成功，并且已经设置了开机启动，VPS重启后不用手工启动SS。&lt;br&gt;到此就安装成功可以科学上网了&lt;/p&gt;
&lt;p&gt;卸载方法：&lt;br&gt;使用root用户登录，运行以下命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;./shadowsocks.sh uninstall&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;单用户配置文件 Sample：&lt;br&gt;配置文件路径：/etc/shadowsocks.json&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;server&amp;quot;:&amp;quot;0.0.0.0&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;server_port&amp;quot;:8989,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;local_address&amp;quot;:&amp;quot;127.0.0.1&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;local_port&amp;quot;:1080,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;password&amp;quot;:&amp;quot;yourpassword&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;timeout&amp;quot;:300,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;fast_open&amp;quot;: false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;多用户多端口配置文件 Sample：&lt;br&gt;配置文件路径：/etc/shadowsocks.json&lt;br&gt;```&lt;br&gt;{&lt;br&gt;    “server”:”0.0.0.0”,&lt;br&gt;    “local_address”:”127.0.0.1”,&lt;br&gt;    “local_port”:1080,&lt;br&gt;    “port_password”:{&lt;br&gt;         “8989”:”password0”,&lt;br&gt;         “9001”:”password1”,&lt;br&gt;         “9002”:”password2”,&lt;br&gt;         “9003”:”password3”,&lt;br&gt;         “9004”:”password4”&lt;br&gt;    },&lt;br&gt;    “timeout”:300,&lt;br&gt;    “method”:”aes-256-cfb”,&lt;br&gt;    “fast_open”: false&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;使用命令：&lt;br&gt;启动：/etc/init.d/shadowsocks start&lt;br&gt;停止：/etc/init.d/shadowsocks stop&lt;br&gt;重启：/etc/init.d/shadowsocks restart&lt;br&gt;状态：/etc/init.d/shadowsocks status&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>那些配置</title>
    <link href="https://entimm.com/2016/09/22/%E9%82%A3%E4%BA%9B%E9%85%8D%E7%BD%AE/"/>
    <id>https://entimm.com/2016/09/22/那些配置/</id>
    <published>2016-09-22T02:34:46.000Z</published>
    <updated>2017-05-18T16:37:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="phpstorm-外部工具"><a href="#phpstorm-外部工具" class="headerlink" title="phpstorm 外部工具"></a>phpstorm 外部工具</h3><p>Open Project With Subline<br>subl<br>$ProjectFileDir$<br>$ProjectFileDir$</p>
<p>Open File With Sublime<br>subl<br>$FilePath$:$LineNumber$<br>$ProjectFileDir$</p>
<p>PHP CS Fixer<br>/usr/local/bin/php-cs-fixer<br>–level=psr2 –verbose fix $FileDir$/$FileName$<br>$ProjectFileDir$</p>
<h3 id="从连接中使用subl打开所连接文件"><a href="#从连接中使用subl打开所连接文件" class="headerlink" title="从连接中使用subl打开所连接文件"></a>从连接中使用subl打开所连接文件</h3><p><a href="https://github.com/dhoulb/subl.git" target="_blank" rel="external">https://github.com/dhoulb/subl.git</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;phpstorm-外部工具&quot;&gt;&lt;a href=&quot;#phpstorm-外部工具&quot; class=&quot;headerlink&quot; title=&quot;phpstorm 外部工具&quot;&gt;&lt;/a&gt;phpstorm 外部工具&lt;/h3&gt;&lt;p&gt;Open Project With Subline&lt;br&gt;subl&lt;br&gt;$ProjectFileDir$&lt;br&gt;$ProjectFileDir$&lt;/p&gt;
&lt;p&gt;Open File With Sublime&lt;br&gt;subl&lt;br&gt;$FilePath$:$LineNumber$&lt;br&gt;$ProjectFileDir$&lt;/p&gt;
&lt;p&gt;PHP CS Fixer&lt;br&gt;/usr/local/bin/php-cs-fixer&lt;br&gt;–level=psr2 –verbose fix $FileDir$/$FileName$&lt;br&gt;$ProjectFileDir$&lt;/p&gt;
&lt;h3 id=&quot;从连接中使用subl打开所连接文件&quot;&gt;&lt;a href=&quot;#从连接中使用subl打开所连接文件&quot; class=&quot;headerlink&quot; title=&quot;从连接中使用subl打开所连接文件&quot;&gt;&lt;/a&gt;从连接中使用subl打开所连接文件&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dhoulb/subl.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/dhoulb/subl.git&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>接替app端的请求</title>
    <link href="https://entimm.com/2016/09/22/%E6%8E%A5%E6%9B%BFapp%E7%AB%AF%E7%9A%84%E8%AF%B7%E6%B1%82/"/>
    <id>https://entimm.com/2016/09/22/接替app端的请求/</id>
    <published>2016-09-22T02:17:18.000Z</published>
    <updated>2017-05-18T16:28:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="电脑安装抓包工具-使用charles-fiddler"><a href="#电脑安装抓包工具-使用charles-fiddler" class="headerlink" title="电脑安装抓包工具(使用charles/fiddler)"></a>电脑安装抓包工具(使用charles/fiddler)</h3><h3 id="同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑"><a href="#同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑" class="headerlink" title="同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑"></a>同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑</h3><h3 id="改电脑的hosts"><a href="#改电脑的hosts" class="headerlink" title="改电脑的hosts"></a>改电脑的hosts</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.0.100 test.api.entimm.com</div><div class="line"># 反向代理用的</div><div class="line">127.0.0.1 api.entimm.com</div></pre></td></tr></table></figure>
<h3 id="最后上nginx的反向代理"><a href="#最后上nginx的反向代理" class="headerlink" title="最后上nginx的反向代理"></a>最后上nginx的反向代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line"></div><div class="line">    listen 80;</div><div class="line">    listen [::]:80;</div><div class="line"></div><div class="line">    server_name api.entimm.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://test.api.entimm.com;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="搞定！"><a href="#搞定！" class="headerlink" title="搞定！"></a>搞定！</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;电脑安装抓包工具-使用charles-fiddler&quot;&gt;&lt;a href=&quot;#电脑安装抓包工具-使用charles-fiddler&quot; class=&quot;headerlink&quot; title=&quot;电脑安装抓包工具(使用charles/fiddler)&quot;&gt;&lt;/a&gt;电脑安装抓包工具(使用charles/fiddler)&lt;/h3&gt;&lt;h3 id=&quot;同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑&quot;&gt;&lt;a href=&quot;#同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑&quot; class=&quot;headerlink&quot; title=&quot;同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑&quot;&gt;&lt;/a&gt;同个局域网内，配手机代理，让手机的请求统统都要经过你的电脑&lt;/h3&gt;&lt;h3 id=&quot;改电脑的hosts&quot;&gt;&lt;a href=&quot;#改电脑的hosts&quot; class=&quot;headerlink&quot; title=&quot;改电脑的hosts&quot;&gt;&lt;/a&gt;改电脑的hosts&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;192.168.0.100 test.api.entimm.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 反向代理用的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127.0.0.1 api.entimm.com&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;最后上nginx的反向代理&quot;&gt;&lt;a href=&quot;#最后上nginx的反向代理&quot; class=&quot;headerlink&quot; title=&quot;最后上nginx的反向代理&quot;&gt;&lt;/a&gt;最后上nginx的反向代理&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;server &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    listen 80;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    listen [::]:80;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    server_name api.entimm.com;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    location / &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        proxy_pass http://test.api.entimm.com;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;搞定！&quot;&gt;&lt;a href=&quot;#搞定！&quot; class=&quot;headerlink&quot; title=&quot;搞定！&quot;&gt;&lt;/a&gt;搞定！&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>快速搭建服务器</title>
    <link href="https://entimm.com/2016/09/22/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://entimm.com/2016/09/22/快速搭建服务器/</id>
    <published>2016-09-22T01:45:00.000Z</published>
    <updated>2017-05-18T15:54:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载-deploy-sh-脚本"><a href="#下载-deploy-sh-脚本" class="headerlink" title="下载 deploy.sh 脚本"></a>下载 deploy.sh 脚本</h3><p>14.04安装脚本<br>wget <a href="https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy.sh" target="_blank" rel="external">https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy.sh</a></p>
<p>16.04安装脚本<br>wget <a href="https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy-16.sh" target="_blank" rel="external">https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy-16.sh</a></p>
<h3 id="设置-MYSQL-密码"><a href="#设置-MYSQL-密码" class="headerlink" title="设置 MYSQL 密码"></a>设置 MYSQL 密码</h3><p>vi deploy.sh:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Configure</div><div class="line">MYSQL_ROOT_PASSWORD=&quot;&quot;</div><div class="line">MYSQL_NORMAL_USER=&quot;estuser&quot;</div><div class="line">MYSQL_NORMAL_USER_PASSWORD=&quot;&quot;</div></pre></td></tr></table></figure></p>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>有需要的话可以使用网易镜像加速：<br>wget <a href="http://mirrors.163.com/.help/sources.list.trusty" target="_blank" rel="external">http://mirrors.163.com/.help/sources.list.trusty</a> -O /etc/apt/sources.list</p>
<p>运行脚本:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod +x deploy.sh</div><div class="line">./deploy.sh</div></pre></td></tr></table></figure></p>
<p>注：请使用 root 运行。</p>
<h3 id="安装完以后的配置和注意事项"><a href="#安装完以后的配置和注意事项" class="headerlink" title="安装完以后的配置和注意事项"></a>安装完以后的配置和注意事项</h3><h4 id="修改站点目录权限"><a href="#修改站点目录权限" class="headerlink" title="修改站点目录权限"></a>修改站点目录权限</h4><p>通过此脚本配置的 Nginx 将使用 www 用户权限，因此需要在你的站点根目录下运行以下命令更新权限。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /var/www/</div><div class="line">chown www:www -R ./</div></pre></td></tr></table></figure></p>
<h4 id="添加站点的-Nginx-配置"><a href="#添加站点的-Nginx-配置" class="headerlink" title="添加站点的 Nginx 配置"></a>添加站点的 Nginx 配置</h4><p>下面是站点的 Nginx 配置模板，写入按照域名命名的文件中，并放入到 /etc/nginx/sites-enabled 目录下。<br>如：/etc/nginx/sites-enabled/phphub.org<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name YOU-DOMAIN-NAME;</div><div class="line">    root YOU-PROJECT-FOLDER;</div><div class="line"></div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    charset utf-8;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        try_files $uri $uri/ /index.php?$query_string;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location = /favicon.ico &#123; access_log off; log_not_found off; &#125;</div><div class="line">    location = /robots.txt  &#123; access_log off; log_not_found off; &#125;</div><div class="line"></div><div class="line">    access_log /data/log/nginx/YOU-PROJECT-NAME-access.log;</div><div class="line">    error_log  /data/log/nginx/YOU-PROJECT-NAME-error.log error;</div><div class="line"></div><div class="line">    sendfile off;</div><div class="line"></div><div class="line">    client_max_body_size 100m;</div><div class="line"></div><div class="line">    include fastcgi.conf;</div><div class="line"></div><div class="line">    location ~ /\.ht &#123;</div><div class="line">        deny all;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        fastcgi_pass   127.0.0.1:9000;</div><div class="line">        #fastcgi_pass /run/php/php7.0-fpm.sock;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">        include        fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者直接修改default<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line">##</div><div class="line"># You should look at the following URL&apos;s in order to grasp a solid understanding</div><div class="line"># of Nginx configuration files in order to fully unleash the power of Nginx.</div><div class="line"># http://wiki.nginx.org/Pitfalls</div><div class="line"># http://wiki.nginx.org/QuickStart</div><div class="line"># http://wiki.nginx.org/Configuration</div><div class="line">#</div><div class="line"># Generally, you will want to move this file somewhere, and start with a clean</div><div class="line"># file but keep this around for reference. Or just disable in sites-enabled.</div><div class="line">#</div><div class="line"># Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.</div><div class="line">##</div><div class="line"></div><div class="line"># Default server configuration</div><div class="line">#</div><div class="line">server &#123;</div><div class="line">    listen 80 default_server;</div><div class="line">    listen [::]:80 default_server;</div><div class="line"></div><div class="line">    # SSL configuration</div><div class="line">    #</div><div class="line">    # listen 443 ssl default_server;</div><div class="line">    # listen [::]:443 ssl default_server;</div><div class="line">    #</div><div class="line">    # Note: You should disable gzip for SSL traffic.</div><div class="line">    # See: https://bugs.debian.org/773332</div><div class="line">    #</div><div class="line">    # Read up on ssl_ciphers to ensure a secure configuration.</div><div class="line">    # See: https://bugs.debian.org/765782</div><div class="line">    #</div><div class="line">    # Self signed certs generated by the ssl-cert package</div><div class="line">    # Don&apos;t use them in a production server!</div><div class="line">    #</div><div class="line">    # include snippets/snakeoil.conf;</div><div class="line"></div><div class="line">    root /var/www/html;</div><div class="line"></div><div class="line">    # Add index.php to the list if you are using PHP</div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    server_name _;</div><div class="line"></div><div class="line">    charset utf-8;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        # First attempt to serve request as file, then</div><div class="line">        # as directory, then fall back to displaying a 404.</div><div class="line">        try_files $uri $uri/ =404;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location = /favicon.ico &#123; access_log off; log_not_found off; &#125;</div><div class="line">    location = /robots.txt  &#123; access_log off; log_not_found off; &#125;</div><div class="line"></div><div class="line">    access_log /var/log/nginx/default.access.log;</div><div class="line">    error_log  /var/log/nginx/default.error.log error;</div><div class="line"></div><div class="line">    sendfile off;</div><div class="line"></div><div class="line">    client_max_body_size 100m;</div><div class="line"></div><div class="line">    include fastcgi.conf;</div><div class="line"></div><div class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">    #</div><div class="line">    location ~ \.php$ &#123;</div><div class="line">    #   include snippets/fastcgi-php.conf;</div><div class="line">    #</div><div class="line">    #   # With php7.0-cgi alone:</div><div class="line">        fastcgi_pass 127.0.0.1:9000;</div><div class="line">    #   # With php7.0-fpm:</div><div class="line">    #   fastcgi_pass unix:/var/run/php7.0-fpm.sock;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">        include        fastcgi_params;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # deny access to .htaccess files, if Apache&apos;s document root</div><div class="line">    # concurs with nginx&apos;s one</div><div class="line">    #</div><div class="line">    location ~ /\.ht &#123;</div><div class="line">        deny all;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"># Virtual Host configuration for example.com</div><div class="line">#</div><div class="line"># You can move that to a different file under sites-available/ and symlink that</div><div class="line"># to sites-enabled/ to enable it.</div><div class="line">#</div><div class="line">#server &#123;</div><div class="line">#   listen 80;</div><div class="line">#   listen [::]:80;</div><div class="line">#</div><div class="line">#   server_name example.com;</div><div class="line">#</div><div class="line">#   root /var/www/example.com;</div><div class="line">#   index index.html;</div><div class="line">#</div><div class="line">#   location / &#123;</div><div class="line">#       try_files $uri $uri/ =404;</div><div class="line">#   &#125;</div><div class="line">#&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载-deploy-sh-脚本&quot;&gt;&lt;a href=&quot;#下载-deploy-sh-脚本&quot; class=&quot;headerlink&quot; title=&quot;下载 deploy.sh 脚本&quot;&gt;&lt;/a&gt;下载 deploy.sh 脚本&lt;/h3&gt;&lt;p&gt;14.04安装脚本&lt;br&gt;wget &lt;a href=&quot;https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy.sh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;16.04安装脚本&lt;br&gt;wget &lt;a href=&quot;https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy-16.sh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://raw.githubusercontent.com/summerblue/laravel-ubuntu-init/master/deploy-16.sh&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;设置-MYSQL-密码&quot;&gt;&lt;a href=&quot;#设置-MYSQL-密码&quot; class=&quot;headerlink&quot; title=&quot;设置 MYSQL 密码&quot;&gt;&lt;/a&gt;设置 MYSQL 密码&lt;/h3&gt;&lt;p&gt;vi deploy.sh:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Configure&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MYSQL_ROOT_PASSWORD=&amp;quot;&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MYSQL_NORMAL_USER=&amp;quot;estuser&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MYSQL_NORMAL_USER_PASSWORD=&amp;quot;&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;开始安装&quot;&gt;&lt;a href=&quot;#开始安装&quot; class=&quot;headerlink&quot; title=&quot;开始安装&quot;&gt;&lt;/a&gt;开始安装&lt;/h3&gt;&lt;p&gt;有需要的话可以使用网易镜像加速：&lt;br&gt;wget &lt;a href=&quot;http://mirrors.163.com/.help/sources.list.trusty&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mirrors.163.com/.help/sources.list.trusty&lt;/a&gt; -O /etc/apt/sources.list&lt;/p&gt;
&lt;p&gt;运行脚本:&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;chmod +x deploy.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./deploy.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注：请使用 root 运行。&lt;/p&gt;
&lt;h3 id=&quot;安装完以后的配置和注意事项&quot;&gt;&lt;a href=&quot;#安装完以后的配置和注意事项&quot; class=&quot;headerlink&quot; title=&quot;安装完以后的配置和注意事项&quot;&gt;&lt;/a&gt;安装完以后的配置和注意事项&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php tips</title>
    <link href="https://entimm.com/2016/09/19/php-tip/"/>
    <id>https://entimm.com/2016/09/19/php-tip/</id>
    <published>2016-09-18T23:44:51.000Z</published>
    <updated>2017-05-18T16:13:12.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>explode 分割字符可以不是单字符</p>
</li>
<li><p>强制类型转换的值不论是否有定义，转换后都会有值</p>
</li>
<li><p>E_ALL ^ E_NOTICE 和 E_ALL &amp; ~E_NOTICE 是等效的</p>
</li>
<li><p>无论是函数调用还是文件包含，像 <strong>FILE</strong> 这种变量，他写在哪个文件，那么他的值就在哪个文件，而不受调用者影响</p>
</li>
<li><p>静态变量是在编译时解析的，不能跟表达式，比如：static $int = sqrt(121)</p>
</li>
<li><p>子类重载父类的属性和方法时，可见性不能比父类小</p>
</li>
<li><p>自 PHP 5.4 起可用 callable 类型指定回调类型 callback</p>
<ol>
<li><p>一个 PHP 的函数以 string 类型传递其名称。可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()</p>
</li>
<li><p>一个已实例化的对象的方法被作为数组传递，下标 0 包含该对象，下标 1 包含方法名</p>
</li>
<li><p>静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’</p>
</li>
<li><p>也可传递 closure 给回调参数</p>
</li>
</ol>
</li>
<li><p>对浮点数，数字字符串，纯字母都能进行自增/减运算，对其他类型的值进行自增/减运算不会产生什么效果</p>
</li>
<li><p>call_user_func_array 如果回调函数默认设置需要接受的参数是引用传递的时候，按值传递，结果将会输出一个警告, 这时数组参数中的参数需要按引用传递</p>
</li>
<li><p>call_user_func 如果回调函数默认设置需要接受的参数是引用传递的时候,无论怎样传参都无法满足</p>
</li>
<li><p>常量<strong>NAMESPACE</strong>的值是包含当前命名空间名称的字符串。在全局的，不包括在任何命名空间中的代码，它包含一个空的字符串</p>
</li>
<li>关键字 namespace 可用来显式访问当前命名空间或子命名空间中的元素。它等价于类中的 self 操作符</li>
<li><p>命名空间不会因为被包含而影响其在包含文件中的使用方式</p>
</li>
<li><p>mysqli::real_escape_string 相比 addslashes 会针对真实数据库环境的字符集做出更好的处理，但是必须在建立数据库链接的基础上</p>
</li>
<li><p>字符串类型变量可以直接当做一个数组，通过数字下面来访问字符串中的字符或者是通过 str_split 函数把字符串分割成单字符数组</p>
</li>
</ul>
<h3 id="那些有趣的代码片段"><a href="#那些有趣的代码片段" class="headerlink" title="那些有趣的代码片段"></a>那些有趣的代码片段</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multi</span> <span class="params">($a, $b)</span> </span>&#123;</div><div class="line">    $b = is_array($b) ? $b : array_slice(func_get_args(), <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">incr</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> $count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    $count++;</div><div class="line">    <span class="keyword">echo</span> $count;</div><div class="line">    <span class="keyword">if</span> ($count &lt; <span class="number">10</span>) &#123;</div><div class="line">        incr();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">echo</span> $count;</div><div class="line">    $count--;</div><div class="line">&#125;</div><div class="line">incr();</div><div class="line"><span class="comment">// 结果输出：1234567891010987654321</span></div></pre></td></tr></table></figure>
<p>不使用临时变量，交换2数的数值<br>下面三种方法不能对自身进行交换<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不仅对数字有效，对字符串也是有效的</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span><span class="params">(&amp;$x, &amp;$y)</span></span></div><div class="line">&#123;</div><div class="line">    $x = $x ^ $y;</div><div class="line">    $y = $x ^ $y;</div><div class="line">    $x = $x ^ $y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当心越界</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap2</span><span class="params">(&amp;$x, &amp;$y)</span></span></div><div class="line">&#123;</div><div class="line">    $x = $x + $y;</div><div class="line">    $y = $x - $y;</div><div class="line">    $x = $x - $y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当心越界、第二个数不能为0</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap3</span><span class="params">(&amp;$x, &amp;$y)</span></span></div><div class="line">&#123;</div><div class="line">    $x = $x * $y;</div><div class="line">    $y = $x / $y;</div><div class="line">    $x = $x / $y;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>命名空间<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">Myns</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ok</span></div><div class="line"><span class="keyword">new</span> <span class="keyword">namespace</span>\<span class="title">Test</span>;</div><div class="line"></div><div class="line"><span class="comment">// ok</span></div><div class="line"><span class="keyword">new</span> Test;</div><div class="line"></div><div class="line"><span class="comment">// ok</span></div><div class="line">$a =  <span class="keyword">__NAMESPACE__</span> . <span class="string">'\Test'</span>;</div><div class="line"><span class="keyword">new</span> $a;</div><div class="line"></div><div class="line"><span class="comment">// ok</span></div><div class="line">$a =  <span class="string">'Myns\Test'</span>;</div><div class="line"><span class="keyword">new</span> $a;</div><div class="line"></div><div class="line"><span class="comment">// failed,  Class 'Myns\Myns\Test' not found</span></div><div class="line"><span class="keyword">new</span> Myns\Test;</div></pre></td></tr></table></figure></p>
<p>这样的自增运算<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$i1 = <span class="number">0</span>;</div><div class="line">$i2 = <span class="number">0</span>;</div><div class="line">$a= ++$i1 + ++$i1 + ++$i1;</div><div class="line">$b= $i2++ + $i2++ + $i2++;</div><div class="line"><span class="keyword">echo</span> $a;</div><div class="line"><span class="keyword">echo</span> PHP_EOL;</div><div class="line"><span class="keyword">echo</span> $b;</div><div class="line"><span class="comment">// result:</span></div><div class="line"><span class="comment">// 6</span></div><div class="line"><span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<h3 id="安全两个原则"><a href="#安全两个原则" class="headerlink" title="安全两个原则"></a>安全两个原则</h3><ol>
<li>永远不要相信用户输入的东西。</li>
<li>将自己需要输出的数据进行转义。</li>
</ol>
<h3 id="对象的另一种理解"><a href="#对象的另一种理解" class="headerlink" title="对象的另一种理解"></a>对象的另一种理解</h3><p>对象”是一个容器，封装了“属性”（property）和“方法”（method）</p>
<p>所谓“属性”，就是对象的状态；所谓“方法”，就是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，“属性”记录具体是那一种动物，“方法”表示动物的某种行为（奔跑、捕猎、休息等等）</p>
<h3 id="isset-vs-array-key-exist"><a href="#isset-vs-array-key-exist" class="headerlink" title="isset vs array_key_exist"></a>isset vs array_key_exist</h3><p>最准确的array_key_exists的效率确是最差，而empty和isset的效率相差无几</p>
<p>如果数组不可能出现值为NULL的情况，建议使用isset<br>如果数组中经常出现值为NULL的情况，建议使用array_key_exists<br>如果数组中可能出现值为NULL，但是较少的情况，建议结合isset与array_key_exists使用，如“if (isset($arr[‘key’]) || array_key_exists(‘key’, $arr)){/<em>do somthing</em>/}”。此方法兼顾了性能和准确性，但是代码变长了。</p>
<h3 id="is-null"><a href="#is-null" class="headerlink" title="is_null"></a>is_null</h3><p>null不区分大小写：$a = null; $a = NULL 没有任何区别<br>仅在变量的值为“null”时，检测结果才为true，0、空字符串、false、空数组都检测为false<br>变量未初始化时，程序将会报错</p>
<p>isset 主要用来判断变量是否被初始化过<br>empty 可以将值为 “假”、“空”、“0”、“NULL”、“未初始化” 的变量都判断为TRUE<br>is_null 仅把值为 “NULL” 的变量判断为TRUE</p>
<h3 id="print-vs-echo"><a href="#print-vs-echo" class="headerlink" title="print vs echo"></a>print vs echo</h3><p>echo和print的区别php中echo和print的功能基本相同（输出），但是两者之间还是有细微差别的。echo输出后没有返回值，但print有返回值，当其执行失败时返回flase。因此可以作为一个普通函数来使用<br>例如执行下面的代码后变量$r的值将为1。<br>代码：</p>
<p>$r = print “Hello World”;</p>
<p>这意味着print可用在一些复杂的表达式中，而echo则不行。但是，因为echo语句不要求返回任何数值，所已在代码中echo语句的运行效率要略微快于print语句。</p>
<h3 id="include-vs-require"><a href="#include-vs-require" class="headerlink" title="include vs require"></a>include vs require</h3><p>include()与require()的功能也基本相同（包含），但在用法上也有一些不同，include()是有条件包含函数，而require()则是无条件包含函数。例如在下面代码中，如果变量$a为真，则将包含文件a.php：<br>代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($a) &#123; </div><div class="line">    <span class="keyword">include</span>(<span class="string">"a.php"</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而require()则和include()不同，不管$a取何值，下面的代码将把文件a.php包含进文件里：<br>代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($a) &#123; </div><div class="line">    <span class="keyword">require</span>(<span class="string">"a.php"</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="if-args-与-if-empty-args-的区别"><a href="#if-args-与-if-empty-args-的区别" class="headerlink" title="if($args) 与 if(!empty($args)) 的区别"></a>if($args) 与 if(!empty($args)) 的区别</h3><p>第一种方法在$args未定义的情况下会出现警告，在PHP中出现任何Error都会造成不小的性能损失，这主要是因PHP存在错误处理机制造成的。</p>
<p>第二种方法下empty能够处理未定义的参数，可以避免警告。另外empty是指令而非函数，运行效率并不会比第一种慢太多。</p>
<p>简而言之，如果你能保证$args已经定义，大可使用第一种。如果不行，则建议使用第二种。</p>
<h3 id="关于垃圾回收及composer"><a href="#关于垃圾回收及composer" class="headerlink" title="关于垃圾回收及composer"></a>关于垃圾回收及composer</h3><p>(重要资料)[<a href="http://cn2.php.net/manual/zh/features.gc.php" target="_blank" rel="external">http://cn2.php.net/manual/zh/features.gc.php</a>]</p>
<p>gc_disable() 不是完全关闭 gc ，而是关闭检查循环引用计数。</p>
<p>检查循环引用计数是因为 php 的 gc 是基于引用计数，在 php 5.2 及以前循环引用会导致内存泄漏。</p>
<p>composer 的这个地方是在进行依赖包检查，对于安装了大量包的项目来说，这是比较耗时、耗内存的操作，并且这部分代码（依据设计/依据提交者的看法）无需考虑循环引用计数问题。</p>
<p>composer在运行的时候会创建大量的对象，这些对象会触发GC机制，而这些对象需要被使用，所以GC无法清除，因此，使用gc_disable禁用GC之后，会节省cpu时间，效率更高。因为占用内存太大，并且频繁触发 gc ，导致效率降低。</p>
<p>由于PHP的GC是基于引用计数的，为了能够回收循环引用的对象，会在ref count减少但不到0的时候，试图检测并回收循环引用的孤岛对象，但当有效对象的数量及互相引用较大（比如composer中代表包、版本和互相的依赖关系）的时候，这种搜索的开销就会变得非常巨大，造成大量的CPU计算</p>
<h2 id="关于引用传递"><a href="#关于引用传递" class="headerlink" title="关于引用传递"></a>关于引用传递</h2><p>一般在输出参数有多个的时候可以考虑使用引用</p>
<h2 id="php中的’0’和javascript中的’0’"><a href="#php中的’0’和javascript中的’0’" class="headerlink" title="php中的’0’和javascript中的’0’"></a>php中的’0’和javascript中的’0’</h2><p>在php和js中转化布尔类型,php中被转换为false,而js中却是true</p>
<h2 id="strrev"><a href="#strrev" class="headerlink" title="strrev"></a>strrev</h2><p>只能翻转英文</p>
<h2 id="strlen-与mb-strlen"><a href="#strlen-与mb-strlen" class="headerlink" title="strlen()与mb_strlen()"></a>strlen()与mb_strlen()</h2><p>strlen 计算字符串的字节长度<br>mb_strlen 根据编码计算字符串字符的长度</p>
<p>gbk 中  一个中文字符2个字节<br>utf8中  一个中文字符3个字节</p>
<h2 id="变量的8种类型"><a href="#变量的8种类型" class="headerlink" title="变量的8种类型"></a>变量的8种类型</h2><p>整型 浮点型 字符串 布尔型 数组 对象 资源 null</p>
<h2 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h2><p>PHP的时间复杂度还得算上php的自身函数所占用的时间复杂度</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;explode 分割字符可以不是单字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;强制类型转换的值不论是否有定义，转换后都会有值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;E_ALL ^ E_NOTICE 和 E_ALL &amp;amp; ~E_NOTICE 是等效的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无论是函数调用还是文件包含，像 &lt;strong&gt;FILE&lt;/strong&gt; 这种变量，他写在哪个文件，那么他的值就在哪个文件，而不受调用者影响&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态变量是在编译时解析的，不能跟表达式，比如：static $int = sqrt(121)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子类重载父类的属性和方法时，可见性不能比父类小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自 PHP 5.4 起可用 callable 类型指定回调类型 callback&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一个 PHP 的函数以 string 类型传递其名称。可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个已实例化的对象的方法被作为数组传递，下标 0 包含该对象，下标 1 包含方法名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也可传递 closure 给回调参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对浮点数，数字字符串，纯字母都能进行自增/减运算，对其他类型的值进行自增/减运算不会产生什么效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;call_user_func_array 如果回调函数默认设置需要接受的参数是引用传递的时候，按值传递，结果将会输出一个警告, 这时数组参数中的参数需要按引用传递&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;call_user_func 如果回调函数默认设置需要接受的参数是引用传递的时候,无论怎样传参都无法满足&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常量&lt;strong&gt;NAMESPACE&lt;/strong&gt;的值是包含当前命名空间名称的字符串。在全局的，不包括在任何命名空间中的代码，它包含一个空的字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;关键字 namespace 可用来显式访问当前命名空间或子命名空间中的元素。它等价于类中的 self 操作符&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命名空间不会因为被包含而影响其在包含文件中的使用方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mysqli::real_escape_string 相比 addslashes 会针对真实数据库环境的字符集做出更好的处理，但是必须在建立数据库链接的基础上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串类型变量可以直接当做一个数组，通过数字下面来访问字符串中的字符或者是通过 str_split 函数把字符串分割成单字符数组&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;那些有趣的代码片段&quot;&gt;&lt;a href=&quot;#那些有趣的代码片段&quot; class=&quot;headerlink&quot; title=&quot;那些有趣的代码片段&quot;&gt;&lt;/a&gt;那些有趣的代码片段&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;($a, $b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $b = is_array($b) ? $b : array_slice(func_get_args(), &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;incr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; $count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $count++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $count;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($count &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        incr();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $count;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $count--;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;incr();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 结果输出：1234567891010987654321&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不使用临时变量，交换2数的数值&lt;br&gt;下面三种方法不能对自身进行交换&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不仅对数字有效，对字符串也是有效的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&amp;amp;$x, &amp;amp;$y)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $x = $x ^ $y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $y = $x ^ $y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $x = $x ^ $y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 当心越界&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&amp;amp;$x, &amp;amp;$y)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $x = $x + $y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $y = $x - $y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $x = $x - $y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 当心越界、第二个数不能为0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&amp;amp;$x, &amp;amp;$y)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $x = $x * $y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $y = $x / $y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $x = $x / $y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;命名空间&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Myns&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ok&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ok&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Test;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ok&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$a =  &lt;span class=&quot;keyword&quot;&gt;__NAMESPACE__&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&#39;\Test&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; $a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ok&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$a =  &lt;span class=&quot;string&quot;&gt;&#39;Myns\Test&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; $a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// failed,  Class &#39;Myns\Myns\Test&#39; not found&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Myns\Test;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样的自增运算&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$i1 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$i2 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$a= ++$i1 + ++$i1 + ++$i1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$b= $i2++ + $i2++ + $i2++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; PHP_EOL;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $b;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// result:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 6&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;安全两个原则&quot;&gt;&lt;a href=&quot;#安全两个原则&quot; class=&quot;headerlink&quot; title=&quot;安全两个原则&quot;&gt;&lt;/a&gt;安全两个原则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;永远不要相信用户输入的东西。&lt;/li&gt;
&lt;li&gt;将自己需要输出的数据进行转义。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;对象的另一种理解&quot;&gt;&lt;a href=&quot;#对象的另一种理解&quot; class=&quot;headerlink&quot; title=&quot;对象的另一种理解&quot;&gt;&lt;/a&gt;对象的另一种理解&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>tmux使用</title>
    <link href="https://entimm.com/2016/09/19/tmux/"/>
    <id>https://entimm.com/2016/09/19/tmux/</id>
    <published>2016-09-18T23:41:25.000Z</published>
    <updated>2017-05-18T16:22:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><code>&lt;prefix&gt;$</code>可以重命名当前Session<br><code>&lt;prefix&gt;c</code>可以创建新的窗口（Window）<br><code>&lt;prefix&gt;%</code>水平分割窗口（形成两个Pane）<br><code>&lt;prefix&gt;&quot;</code>垂直分割窗口。退出当前Session的快捷键是<code>&lt;prefix&gt;d</code></p>
<p>在Bash中可以查看当前的tmux服务中有哪些Session：<code>tmux ls</code><br>根据Session的名字可以再回去：<code>tmux a -t myname  (or at, or attach)</code></p>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>默认的<code>&lt;prefix&gt;</code>是<code>Ctrl+b</code>，如果觉得不好按可以调整为<code>Ctrl+a</code>，只需要在配置文件~/.tmux.conf中加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">unbind ^b</div><div class="line">set -g prefix &apos;C-a&apos;</div></pre></td></tr></table></figure></p>
<p>为了能让Tmux动态载入配置而不是重启，我们设一个快捷键<prefix>r来重新载入配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind r source-file ~/.tmux.conf \; display-message &quot;Config reloaded&quot;</div></pre></td></tr></table></figure></prefix></p>
<p>当前tmux的设置，可通过tmux show -g</p>
<h3 id="窗格切换"><a href="#窗格切换" class="headerlink" title="窗格切换"></a>窗格切换</h3><p>可以把hjkl设置为切换窗格的快捷键：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bind h select-pane -L</div><div class="line">bind j select-pane -D</div><div class="line">bind k select-pane -U</div><div class="line">bind l select-pane -R</div></pre></td></tr></table></figure></p>
<p>再给调整窗格大小设置快捷键：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bind L resize-pane -L 10  # 向左扩展</div><div class="line">bind R resize-pane -R 10  # 向右扩展</div><div class="line">bind K resize-pane -U 5   # 向上扩展</div><div class="line">bind J resize-pane -D 5   # 向下扩展</div></pre></td></tr></table></figure></p>
<p>我们发现当打开新窗格时Shell仍然在Home目录，可以设置为当前目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bind &apos;&quot;&apos; split-window -c &apos;#&#123;pane_current_path&#125;&apos;</div><div class="line">bind &apos;%&apos; split-window -h -c &apos;#&#123;pane_current_path&#125;&apos;</div></pre></td></tr></table></figure></p>
<h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><p>在Tmux中通过[进入拷贝模式，按下<code>&lt;space&gt;</code>开始拷贝。然后用Vim/Emacs快捷键选择文本，按下<enter>拷贝所选内容。然后通过]进行粘贴</enter></p>
<p>上述所有快捷键中，只有[和]需要先按下<code>&lt;prefix&gt;</code>。<br>我们可以让上述拷贝快捷键符合Vi风格：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bind Escape copy-mode</div><div class="line">bind -t vi-copy v begin-selection</div><div class="line">bind -t vi-copy y copy-selection</div><div class="line">unbind p</div><div class="line">bind p pasteb</div><div class="line">setw -g mode-keys vi      # Vi风格选择文本</div></pre></td></tr></table></figure></p>
<p>这样，按下<code>&lt;Escape&gt;</code>进入拷贝模式，v进行选择，y拷贝所选内容，p进行粘贴。</p>
<h3 id="鼠标切换窗格"><a href="#鼠标切换窗格" class="headerlink" title="鼠标切换窗格"></a>鼠标切换窗格</h3><p>Tmux和Vim风格非常像，也可以设置鼠标模式。下面的设置开启了所有鼠标功能： 通过点击选择窗格，通过拖动更改窗格大小，通过鼠标选择窗口，还可以通过鼠标选择复制区域。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setw -g mode-mouse on</div><div class="line">set -g mouse-select-pane on</div><div class="line">set -g mouse-resize-pane on</div><div class="line">set -g mouse-select-window on</div></pre></td></tr></table></figure></p>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>Sessions<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:new&lt;CR&gt; new session</div><div class="line">s  list sessions</div><div class="line">$  name session</div></pre></td></tr></table></figure></p>
<p>:new -s <session-name> 可以指定新Session的名字。</session-name></p>
<p>Windows (tabs)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">c  create window</div><div class="line">w  list windows</div><div class="line">n  next window</div><div class="line">p  previous window</div><div class="line">f  find window</div><div class="line">,  name window</div><div class="line">&amp;  kill window</div></pre></td></tr></table></figure></p>
<p>Panes (splits)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">%  vertical split</div><div class="line">&quot;  horizontal split</div><div class="line"></div><div class="line">o  swap panes</div><div class="line">q  show pane numbers</div><div class="line">x  kill pane</div><div class="line">+  break pane into window (e.g. to select text by mouse to copy)</div><div class="line">-  restore pane from window</div><div class="line">⍽  space - toggle between layouts</div><div class="line">&lt;prefix&gt; q (Show pane numbers, when the numbers show up type the key to goto that pane)</div><div class="line">&lt;prefix&gt; &#123; (Move the current pane left)</div><div class="line">&lt;prefix&gt; &#125; (Move the current pane right)</div><div class="line">&lt;prefix&gt; z toggle pane zoom</div></pre></td></tr></table></figure></p>
<p>Misc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">d  detach</div><div class="line">t  big clock</div><div class="line">?  list shortcuts</div><div class="line">:  prompt</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt;$&lt;/code&gt;可以重命名当前Session&lt;br&gt;&lt;code&gt;&amp;lt;prefix&amp;gt;c&lt;/code&gt;可以创建新的窗口（Window）&lt;br&gt;&lt;code&gt;&amp;lt;prefix&amp;gt;%&lt;/code&gt;水平分割窗口（形成两个Pane）&lt;br&gt;&lt;code&gt;&amp;lt;prefix&amp;gt;&amp;quot;&lt;/code&gt;垂直分割窗口。退出当前Session的快捷键是&lt;code&gt;&amp;lt;prefix&amp;gt;d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在Bash中可以查看当前的tmux服务中有哪些Session：&lt;code&gt;tmux ls&lt;/code&gt;&lt;br&gt;根据Session的名字可以再回去：&lt;code&gt;tmux a -t myname  (or at, or attach)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本配置&quot;&gt;&lt;a href=&quot;#基本配置&quot; class=&quot;headerlink&quot; title=&quot;基本配置&quot;&gt;&lt;/a&gt;基本配置&lt;/h3&gt;&lt;p&gt;默认的&lt;code&gt;&amp;lt;prefix&amp;gt;&lt;/code&gt;是&lt;code&gt;Ctrl+b&lt;/code&gt;，如果觉得不好按可以调整为&lt;code&gt;Ctrl+a&lt;/code&gt;，只需要在配置文件~/.tmux.conf中加入：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;unbind ^b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;set -g prefix &amp;apos;C-a&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了能让Tmux动态载入配置而不是重启，我们设一个快捷键&lt;prefix&gt;r来重新载入配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bind r source-file ~/.tmux.conf \; display-message &amp;quot;Config reloaded&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/prefix&gt;&lt;/p&gt;
&lt;p&gt;当前tmux的设置，可通过tmux show -g&lt;/p&gt;
&lt;h3 id=&quot;窗格切换&quot;&gt;&lt;a href=&quot;#窗格切换&quot; class=&quot;headerlink&quot; title=&quot;窗格切换&quot;&gt;&lt;/a&gt;窗格切换&lt;/h3&gt;&lt;p&gt;可以把hjkl设置为切换窗格的快捷键：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bind h select-pane -L&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bind j select-pane -D&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bind k select-pane -U&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bind l select-pane -R&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再给调整窗格大小设置快捷键：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bind L resize-pane -L 10  # 向左扩展&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bind R resize-pane -R 10  # 向右扩展&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bind K resize-pane -U 5   # 向上扩展&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bind J resize-pane -D 5   # 向下扩展&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php中的坑</title>
    <link href="https://entimm.com/2016/09/18/php%E4%B8%AD%E7%9A%84%E5%9D%91/"/>
    <id>https://entimm.com/2016/09/18/php中的坑/</id>
    <published>2016-09-18T15:25:11.000Z</published>
    <updated>2017-05-18T16:23:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="路径的坑"><a href="#路径的坑" class="headerlink" title="路径的坑"></a>路径的坑</h3><p>$path = ‘/a/m/../b’;<br>假如 /a 存在<br>不管 /a/m 目录存不存在, mkdir 都能成功<br>但是如果不存在，那么 is_dir, realpath 等函数都会失败</p>
<h3 id="计算的坑"><a href="#计算的坑" class="headerlink" title="计算的坑"></a>计算的坑</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$a = <span class="number">5.1</span>;</div><div class="line">$b = <span class="number">5.1</span>;</div><div class="line">$size = <span class="number">100</span>;</div><div class="line">$t1 = intval($a = floatval($a) * $size);</div><div class="line">$t2 = intval($b = floatval($b) * $size);</div><div class="line">$t = rand($t1, $t2);</div><div class="line"><span class="keyword">echo</span> $t; <span class="comment">// 计算结果是509，而不是510</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;路径的坑&quot;&gt;&lt;a href=&quot;#路径的坑&quot; class=&quot;headerlink&quot; title=&quot;路径的坑&quot;&gt;&lt;/a&gt;路径的坑&lt;/h3&gt;&lt;p&gt;$path = ‘/a/m/../b’;&lt;br&gt;假如 /a 存在&lt;br&gt;不管 /a/m 目录存不存在, mkdir 都能成功&lt;br&gt;但是如果不存在，那么 is_dir, realpath 等函数都会失败&lt;/p&gt;
&lt;h3 id=&quot;计算的坑&quot;&gt;&lt;a href=&quot;#计算的坑&quot; class=&quot;headerlink&quot; title=&quot;计算的坑&quot;&gt;&lt;/a&gt;计算的坑&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$a = &lt;span class=&quot;number&quot;&gt;5.1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$b = &lt;span class=&quot;number&quot;&gt;5.1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$size = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$t1 = intval($a = floatval($a) * $size);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$t2 = intval($b = floatval($b) * $size);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$t = rand($t1, $t2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $t; &lt;span class=&quot;comment&quot;&gt;// 计算结果是509，而不是510&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图片资源优化</title>
    <link href="https://entimm.com/2016/09/18/%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96/"/>
    <id>https://entimm.com/2016/09/18/图片资源优化/</id>
    <published>2016-09-18T15:23:34.000Z</published>
    <updated>2017-05-18T16:28:06.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>选择合适的图片格式</p>
<p> 原理：对图片格式转换，在画质可以接受的情况下达到更好的压缩比效果<br> 优势：减少图片加载流量，效果比较明显<br> 劣势：服务器和浏览器压力增大，而且服务器需要额外的服务支持，格式转换要考虑浏览器的兼容性</p>
</li>
<li><p>图片大小小于2KB时可使用base64编码代替图片</p>
</li>
<li><p>不同终端对同一个图片需求不一样，可以根据终端加载不同的图片来节省没必要的流量</p>
</li>
<li><p>使用css、svg、canvas或iconfont代替图片</p>
</li>
<li><p>合并图片：</p>
<p> 优势：可以有效的较少请求个数<br> 劣势：生成的图片体积较大，减少请求个数同时也增加了图片大小，不合理拆分将不利于并行加载</p>
</li>
<li><p>图片压缩</p>
<p> 原理：对图片进行无损、有损压缩，转为压缩后图片来实现<br> 优势：减少图片加载流量，效果比较明显<br> 劣势：服务器和浏览器压力增大，而且服务器需要额外的服务支持</p>
</li>
<li><p>使用 CDN</p>
<p> 使用参数自动调节图片质量和大小的，最关键的还是，CDN 的每 G 流量价格普遍比 VPS 按流量付费的价格要低得多！</p>
</li>
<li><p>部署到单独的服务器中</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;选择合适的图片格式&lt;/p&gt;
&lt;p&gt; 原理：对图片格式转换，在画质可以接受的情况下达到更好的压缩比效果&lt;br&gt; 优势：减少图片加载流量，效果比较明显&lt;br&gt; 劣势：服务器和浏览器压力增大，而且服务器需要额外的服务支持，格式转换要考虑浏览器的兼容性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片大小小于2KB时可使用base64编码代替图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不同终端对同一个图片需求不一样，可以根据终端加载不同的图片来节省没必要的流量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用css、svg、canvas或iconfont代替图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合并图片：&lt;/p&gt;
&lt;p&gt; 优势：可以有效的较少请求个数&lt;br&gt; 劣势：生成的图片体积较大，减少请求个数同时也增加了图片大小，不合理拆分将不利于并行加载&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片压缩&lt;/p&gt;
&lt;p&gt; 原理：对图片进行无损、有损压缩，转为压缩后图片来实现&lt;br&gt; 优势：减少图片加载流量，效果比较明显&lt;br&gt; 劣势：服务器和浏览器压力增大，而且服务器需要额外的服务支持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 CDN&lt;/p&gt;
&lt;p&gt; 使用参数自动调节图片质量和大小的，最关键的还是，CDN 的每 G 流量价格普遍比 VPS 按流量付费的价格要低得多！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署到单独的服务器中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://entimm.com/2016/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://entimm.com/2016/09/17/设计模式/</id>
    <published>2016-09-17T08:13:07.000Z</published>
    <updated>2017-05-18T16:29:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3种基本设计模式"><a href="#3种基本设计模式" class="headerlink" title="3种基本设计模式"></a>3种基本设计模式</h3><ol>
<li>工厂模式，工厂方法或者类生成对象，而不是在代码中直接new</li>
<li>单例模式，使某个类的对象仅允许创建一个</li>
<li>注册模式，全局共享和交换对象</li>
</ol>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ol>
<li>在客户端与实体之间建立一个代理对象(proxy),客户端对实体进行操作全部委派给代理对象,隐藏实体的具体实现细节</li>
<li>proxy还可以与业务代码分离,部署到另外的服务器。业务代码中通过RPC来委派任务</li>
</ol>
<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><ol>
<li>在不需要了解内部实现的前提下,遍历一个聚合对象的内部元素</li>
<li>相比于传统的编程模式,迭代器模式可以隐藏遍历元素的所需的操作</li>
</ol>
<h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><ol>
<li>可以动态的添加修改类的功能</li>
<li>一个类提供了一项功能，如果要修改并添加额外的功能，传统的编程模式，需要写一个子类继承它，并重新实现类的方法</li>
<li>使用装饰器模式，仅需在运行时添加一个装饰器对象即可实现，可以实现最大的灵活性</li>
</ol>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ol>
<li>当一个对象状态发生改变时，依赖它的对象全部会受到通知，并自动更新</li>
<li>场景: 一个事件发生后，要执行一连串更新操作。传统的编程方式就是在事件的代码之后直接加入处理逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码</li>
<li>观察者模式实现了低耦合，非侵入的通知和更新机制</li>
</ol>
<h3 id="数据对象映射模式"><a href="#数据对象映射模式" class="headerlink" title="数据对象映射模式"></a>数据对象映射模式</h3><ol>
<li>数据对象映射模式，是将对象和数据存储映射起来，对一个对象的操作会映射为对数据存储的操作</li>
<li>在代码中实现数据对象映射操作模式，我们将实现一个ORM类，将复杂的SQL语句映射成对象属性的操作</li>
<li>结合使用数据对象映射模式、工厂模式、注册模式</li>
</ol>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><ol>
<li>策略模式，将一组特定的行为和算法封装成类，以适应某些特定的上下文环境</li>
<li>实际应用举例，假如一个电商网站系统，针对男性女性用户要各自<br>跳转到不同的商品类目，并且所有广告位展示不同的广告</li>
<li>使用策略模式可以实现IOC，依赖倒置、控制反转</li>
</ol>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><ol>
<li>适配器模式，可以将截然不同的函数接口封装成统一的API</li>
<li>实际应用举例，PHP的数据库操作有mysql,mysqli,pdo，可以用适配器模式统一成一致。类似的场景还有cache适配器，将memcache、redis、file、apc等不同的缓存函数，统一成一致</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;3种基本设计模式&quot;&gt;&lt;a href=&quot;#3种基本设计模式&quot; class=&quot;headerlink&quot; title=&quot;3种基本设计模式&quot;&gt;&lt;/a&gt;3种基本设计模式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;工厂模式，工厂方法或者类生成对象，而不是在代码中直接new&lt;/li&gt;
&lt;li&gt;单例模式，使某个类的对象仅允许创建一个&lt;/li&gt;
&lt;li&gt;注册模式，全局共享和交换对象&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在客户端与实体之间建立一个代理对象(proxy),客户端对实体进行操作全部委派给代理对象,隐藏实体的具体实现细节&lt;/li&gt;
&lt;li&gt;proxy还可以与业务代码分离,部署到另外的服务器。业务代码中通过RPC来委派任务&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;迭代器模式&quot;&gt;&lt;a href=&quot;#迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式&quot;&gt;&lt;/a&gt;迭代器模式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在不需要了解内部实现的前提下,遍历一个聚合对象的内部元素&lt;/li&gt;
&lt;li&gt;相比于传统的编程模式,迭代器模式可以隐藏遍历元素的所需的操作&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;装饰器模式&quot;&gt;&lt;a href=&quot;#装饰器模式&quot; class=&quot;headerlink&quot; title=&quot;装饰器模式&quot;&gt;&lt;/a&gt;装饰器模式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;可以动态的添加修改类的功能&lt;/li&gt;
&lt;li&gt;一个类提供了一项功能，如果要修改并添加额外的功能，传统的编程模式，需要写一个子类继承它，并重新实现类的方法&lt;/li&gt;
&lt;li&gt;使用装饰器模式，仅需在运行时添加一个装饰器对象即可实现，可以实现最大的灵活性&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;当一个对象状态发生改变时，依赖它的对象全部会受到通知，并自动更新&lt;/li&gt;
&lt;li&gt;场景: 一个事件发生后，要执行一连串更新操作。传统的编程方式就是在事件的代码之后直接加入处理逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码&lt;/li&gt;
&lt;li&gt;观察者模式实现了低耦合，非侵入的通知和更新机制&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>高级 PHP</title>
    <link href="https://entimm.com/2016/09/16/%E9%AB%98%E7%BA%A7PHP/"/>
    <id>https://entimm.com/2016/09/16/高级PHP/</id>
    <published>2016-09-16T11:59:33.000Z</published>
    <updated>2017-05-18T16:29:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象5原则"><a href="#面向对象5原则" class="headerlink" title="面向对象5原则"></a>面向对象5原则</h2><h3 id="单一职责原则（single-resposibility-principle）"><a href="#单一职责原则（single-resposibility-principle）" class="headerlink" title="单一职责原则（single-resposibility principle）"></a>单一职责原则（single-resposibility principle）</h3><p>其核心思想为：一个类，最好只做一件事，只有一个引起它的变化的原因</p>
<h3 id="开放-封闭原则（The-Open-Close-principle）"><a href="#开放-封闭原则（The-Open-Close-principle）" class="headerlink" title="开放-封闭原则（The Open-Close principle）"></a>开放-封闭原则（The Open-Close principle）</h3><p>其核心思想为：对扩展开放，对修改封闭<br>软件实体（类、模块、函数）应该是可扩展的，但是不可修改的。也就是说，对于扩展是开放的，对于更改是封闭的。怎样可能在不改动模块源代码的情况下去更改它的行为呢？怎样才能在无需对模块进行改动的情况下改变它的功能呢？关键是抽象！因此在进行面向对象设计时要尽量考虑接口封装机制、抽象机制和多态技术。该原则同样适合于非面向对象的方法，是软件工程设计方法的重要原则之一</p>
<h3 id="Liskov-替换原则（liskov-substitution-principle）"><a href="#Liskov-替换原则（liskov-substitution-principle）" class="headerlink" title="Liskov 替换原则（liskov-substitution principle）"></a>Liskov 替换原则（liskov-substitution principle）</h3><p>其核心思想：子类必须能够替换其基类<br>子类应当可以替换父类出现在父类能够出现的任何地方</p>
<h3 id="依赖倒置原则（dependency-inversion-principle）"><a href="#依赖倒置原则（dependency-inversion-principle）" class="headerlink" title="依赖倒置原则（dependency-inversion principle）"></a>依赖倒置原则（dependency-inversion principle）</h3><p>其核心思想：依赖于抽象<br>一个类不应该强依赖另外一个类，每个类对于另外一个类都是可替换的<br>1、高层模块不应该依赖于低层模块，二者都应该依赖于抽象。<br>2、抽象不应该依赖于细节。细节应该依赖于抽象。在进行业务设计时，于特定业务有关的依赖关系应该尽量依赖接口和抽象类，而不是依赖于具体类。具体类只负责相关业务的实现，修改具体类不影响与特定业务有关的依赖关系。</p>
<h3 id="接口分离原则（interface-segregation-principle）"><a href="#接口分离原则（interface-segregation-principle）" class="headerlink" title="接口分离原则（interface-segregation principle）"></a>接口分离原则（interface-segregation principle）</h3><p>其核心思想：使用多个小的专门的接口，而不要使用一个大的总接口<br>具体而言，接口隔离原则体现在：接口应该是内聚的，应该避免“胖”接口。一个类对另外一个类的依赖应该建立在最小的接口上，不要强迫依赖不用的方法，这是一种接口污染</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常是运行中超出了你程序预期的一个东西。</p>
<p>异常就是一个意外，影响了你的程序正常运行。但是如果你用好异常，会让你的程序便于解耦，结构更加清晰明了。</p>
<p>异常对我们控制程序的流程来说非常重要。解耦了程序出现意想不到结果时信息传递的逻辑。每个业务模块发生异常最终通过 Laravel 的方便的异常处理，和友好的展示，并能根据情况来记录错误，这样让我们的程序更加健壮，方便开发和维护。</p>
<h2 id="异常-vs-if-else"><a href="#异常-vs-if-else" class="headerlink" title="异常 vs if_else"></a>异常 vs if_else</h2><p>把这个大函数分成了若干小函数，在这个小函数里面抛异常，大函数里面扑获异常，不用再一个一个的判断小函数的返回值</p>
<p>任何好的语言都应该提供完善的异常支持服务, 来使程序结构更优美可读行更好可维护,而不是靠一大堆的if else来控制程序的流程.</p>
<p>要有上下层的概念，在上下层逻辑处理中,throw 是 Current Role 反馈给 Upper Role，try/catch 是 Current Role 处理 Lower Role 反馈</p>
<h2 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h2><p>把业务逻辑处理部分抽象出来作为一层，这一层在M之上，C之下，名为 Logic</p>
<p>把可以作为公共的服务抽象出来作为一层，这一层不与任何一层耦合，仅提供自身的服务，名为Service<br>小到文件上传，下载，图片处理，储存<br>大到日志，错误处理，邮件，授权，队列，计划任务，支付，验证，加密，短信都可以做出单独的服务</p>
<p>业务变了，C层和M层都不需要改动，只需要改动中间的 Logic 就好了</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在Controller里面，做外部来的请求数据包的合法性校验和部分用户接口权限校验<br>用户相关逻辑放在logic层,做严格的数据合法性校验、业务逻辑约束校验、用户数据权限校验<br>在Model里面做数据的物理合法性校验</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态性是面向对象设计的重要特性，它展现了动态绑定的功能,多态的功能可以让软件在开发和维护时，达到充分的延伸性<br>通俗理解:让具有继承关系的不同类对象，可以对相同名称的成员函数调用，产生不同的反应结果</p>
<h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><h3 id="RBAC（Role-Based-Access-Control）"><a href="#RBAC（Role-Based-Access-Control）" class="headerlink" title="RBAC（Role-Based Access Control）"></a>RBAC（Role-Based Access Control）</h3><p>基于角色的访问控制系统</p>
<ul>
<li>用户表</li>
<li>权限表</li>
<li>角色表</li>
<li>角色权限表</li>
<li>用户角色表</li>
</ul>
<h3 id="ACL（Access-Control-List）"><a href="#ACL（Access-Control-List）" class="headerlink" title="ACL（Access Control List）"></a>ACL（Access Control List）</h3><p>访问控制列表，是前几年盛行的一种权限设计，它的核心在于用户直接和权限挂钩</p>
<p>RBAC的核心是用户只和角色关联，而角色代表对了权限，这样设计的优势在于使得对用户而言，只需角色即可以，而某角色可以拥有各种各样的权限并可继承<br>ACL和RBAC相比缺点在于由于用户和权限直接挂钩，导致在授予时的复杂性，虽然可以利用组来简化这个复杂性，但仍然会导致系统不好理解，而且在取出判断用户是否有该权限时比较的困难，一定程度上影响了效率</p>
<p>ACL实质上是每一个权限接口维持一个权限列表，然后通过判断是否在列表中这个扁平快的方法，进行基础的权限控制，也有其不足：对于多人控制的某些系统，权限需要分为select，update，insert，delete等，人员需要分为管理员，用户，访客，超级管理员，这种情况下再使用ACL反而是增加工作量，增加后期维护难度，同时增加管理难度</p>
<p>在这种情况下，RBAC应运而生RBAC，基于组的权限控制，ACL的升级版</p>
<p>相比于ACL，RBAC的优势是将角色和角色绑定，将用户与权限之间的关联变为权限与角色之间的关联，从而简化了权限管理。当然普通的RBAC也有自身的缺点，就是权限是以角色为载体，单独用户的特殊的权限需要定制</p>
<h2 id="使用-OpCache-提升-PHP-5-5-程序性能"><a href="#使用-OpCache-提升-PHP-5-5-程序性能" class="headerlink" title="使用 OpCache 提升 PHP 5.5+ 程序性能"></a>使用 OpCache 提升 PHP 5.5+ 程序性能</h2><h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>PHP 5.5 以后内建了 OpCache , OpCache 的加速原理是把编译后的 bytecode 存储在内存里面, 避免重复编译 PHP 所造成的资源浪费.</p>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><p>修改 php.ini 文件,在文件最后面加入:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">; 开关打开</div><div class="line">opcache.enable=1</div><div class="line"></div><div class="line">; 可用内存, 酌情而定, 单位 megabytes</div><div class="line">opcache.memory_consumption=256</div><div class="line"></div><div class="line">; 对多缓存文件限制, 命中率不到 100% 的话, 可以试着提高这个值</div><div class="line">opcache.max_accelerated_files=5000</div><div class="line"></div><div class="line">; Opcache 会在一定时间内去检查文件的修改时间, 这里设置检查的时间周期, 默认为 2, 定位为秒</div><div class="line">opcache.revalidate_freq=240</div></pre></td></tr></table></figure></p>
<h3 id="APC-VS-OpCache"><a href="#APC-VS-OpCache" class="headerlink" title="APC VS OpCache"></a>APC VS OpCache</h3><p>APC 是将要被遗弃的项目, PHP 5.5 都不支持, 而在 PHP 5.5 和 5.6 版本, OpCache 是默认内建的, 并且支持 5.2 到 5.4 的安装.</p>
<h3 id="关于composer-lock"><a href="#关于composer-lock" class="headerlink" title="关于composer.lock"></a>关于composer.lock</h3><h2 id="composer-lock"><a href="#composer-lock" class="headerlink" title="composer.lock"></a>composer.lock</h2><h3 id="什么是-composer-lock-文件"><a href="#什么是-composer-lock-文件" class="headerlink" title="什么是 composer.lock 文件?"></a>什么是 composer.lock 文件?</h3><p>composer.lock 文件是当你第一次使用 composer install 或者 执行 composer update 后生成的文件, 此文件里定义了当前项目的代码依赖, 还有最重要的, 这些代码依赖的对应的版本.</p>
<h3 id="composer-lock-文件作用是什么"><a href="#composer-lock-文件作用是什么" class="headerlink" title="composer.lock 文件作用是什么?"></a>composer.lock 文件作用是什么?</h3><p>默认情况下, 当执行 composer install 的时候, Composer 会检查当前项目是否有 composer.lock 文件, 如果有的话, 就会按照此文件去下载代码依赖和其指定的版本.</p>
<h3 id="把-composer-lock-文件加版本的好处有以下"><a href="#把-composer-lock-文件加版本的好处有以下" class="headerlink" title="把 composer.lock 文件加版本的好处有以下:"></a>把 composer.lock 文件加版本的好处有以下:</h3><p>团队开发的时, clone 下代码后, 使用 composer install 可以确保大家使用的依赖包都是同一个版本的, 避免没必要的混乱;<br>在一个现有的项目上开发的时候, 执行 composer update 后, 偶尔会发现刚刚更新了某个代码包把程序整挂了, 这个时候, 如果 composer.lock 是加入版本控制器的话, 直接一个 git diff 命令, 就可以查看到这次更新了那个包, 快速定位到问题的所在;<br>在线上部署的时候, 可以确保线上生成环境下使用所有代码是和开发时候使用的一致, 因为 composer.lock 会确保你在执行 composer install 命令后, 按照文件里面指定的版本去下载代码依赖包;</p>
<h2 id="php自身的性能优化"><a href="#php自身的性能优化" class="headerlink" title="php自身的性能优化"></a>php自身的性能优化</h2><ul>
<li>OPcache</li>
<li>通过 PHP 扩展代替原 PHP 代码中高频逻辑</li>
<li>Runtime优化:HHVM</li>
</ul>
<h3 id="php周边问题"><a href="#php周边问题" class="headerlink" title="php周边问题"></a>php周边问题</h3><ul>
<li>linux 运行环境</li>
<li>文件存储</li>
<li>数据库</li>
<li>缓存</li>
<li>网络</li>
</ul>
<h3 id="Disk-IO优化"><a href="#Disk-IO优化" class="headerlink" title="Disk IO优化"></a>Disk IO优化</h3><p>RAID0: 也称为条带，就是把多个磁盘链接成一个硬盘使用，这个级别IO最好<br>RAID1: 也称为镜像，要求至少有两个磁盘，每组磁盘存储的数据相同<br>RAID5: 也是把多个（最少3个）硬盘合并成1个逻辑盘使用，数据读写时建立就效验信息，并且奇偶效验信息和相对应的数据分别存储于不同的磁盘上。当RAID5的一个磁盘数据发生损坏后，利用剩下的数据和响应的奇偶效验信息去恢复被损坏的数据<br>RAID1+0: 就是RAID1和RAID0的结合。同时具备两个级别的优缺点。一般建议数据库使用这个级别</p>
<h3 id="PHP文件执行阶段"><a href="#PHP文件执行阶段" class="headerlink" title="PHP文件执行阶段"></a>PHP文件执行阶段</h3><p>语法分析-&gt;编译-&gt;运行</p>
<h3 id="配置与设计模式"><a href="#配置与设计模式" class="headerlink" title="配置与设计模式"></a>配置与设计模式</h3><ol>
<li>PHP中使用<code>ArrayAccess</code>实现配置文件的加载</li>
<li>在工厂方法中读取配置，生成可配置化的对象</li>
<li>使用装饰器模式实现权限验证，模板渲染，JSON串化</li>
<li>使用观察者模式实现数据更新事件的一系列更新操作</li>
<li>使用代理模式实现数据库的主从自动切换</li>
</ol>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ul>
<li>模型: 数据和存储的封装</li>
<li>视图: 展示层的封装，如Web系统中的模板文件</li>
<li>控制器: 逻辑层的封装</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面向对象5原则&quot;&gt;&lt;a href=&quot;#面向对象5原则&quot; class=&quot;headerlink&quot; title=&quot;面向对象5原则&quot;&gt;&lt;/a&gt;面向对象5原则&lt;/h2&gt;&lt;h3 id=&quot;单一职责原则（single-resposibility-principle）&quot;&gt;&lt;a href=&quot;#单一职责原则（single-resposibility-principle）&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则（single-resposibility principle）&quot;&gt;&lt;/a&gt;单一职责原则（single-resposibility principle）&lt;/h3&gt;&lt;p&gt;其核心思想为：一个类，最好只做一件事，只有一个引起它的变化的原因&lt;/p&gt;
&lt;h3 id=&quot;开放-封闭原则（The-Open-Close-principle）&quot;&gt;&lt;a href=&quot;#开放-封闭原则（The-Open-Close-principle）&quot; class=&quot;headerlink&quot; title=&quot;开放-封闭原则（The Open-Close principle）&quot;&gt;&lt;/a&gt;开放-封闭原则（The Open-Close principle）&lt;/h3&gt;&lt;p&gt;其核心思想为：对扩展开放，对修改封闭&lt;br&gt;软件实体（类、模块、函数）应该是可扩展的，但是不可修改的。也就是说，对于扩展是开放的，对于更改是封闭的。怎样可能在不改动模块源代码的情况下去更改它的行为呢？怎样才能在无需对模块进行改动的情况下改变它的功能呢？关键是抽象！因此在进行面向对象设计时要尽量考虑接口封装机制、抽象机制和多态技术。该原则同样适合于非面向对象的方法，是软件工程设计方法的重要原则之一&lt;/p&gt;
&lt;h3 id=&quot;Liskov-替换原则（liskov-substitution-principle）&quot;&gt;&lt;a href=&quot;#Liskov-替换原则（liskov-substitution-principle）&quot; class=&quot;headerlink&quot; title=&quot;Liskov 替换原则（liskov-substitution principle）&quot;&gt;&lt;/a&gt;Liskov 替换原则（liskov-substitution principle）&lt;/h3&gt;&lt;p&gt;其核心思想：子类必须能够替换其基类&lt;br&gt;子类应当可以替换父类出现在父类能够出现的任何地方&lt;/p&gt;
&lt;h3 id=&quot;依赖倒置原则（dependency-inversion-principle）&quot;&gt;&lt;a href=&quot;#依赖倒置原则（dependency-inversion-principle）&quot; class=&quot;headerlink&quot; title=&quot;依赖倒置原则（dependency-inversion principle）&quot;&gt;&lt;/a&gt;依赖倒置原则（dependency-inversion principle）&lt;/h3&gt;&lt;p&gt;其核心思想：依赖于抽象&lt;br&gt;一个类不应该强依赖另外一个类，每个类对于另外一个类都是可替换的&lt;br&gt;1、高层模块不应该依赖于低层模块，二者都应该依赖于抽象。&lt;br&gt;2、抽象不应该依赖于细节。细节应该依赖于抽象。在进行业务设计时，于特定业务有关的依赖关系应该尽量依赖接口和抽象类，而不是依赖于具体类。具体类只负责相关业务的实现，修改具体类不影响与特定业务有关的依赖关系。&lt;/p&gt;
&lt;h3 id=&quot;接口分离原则（interface-segregation-principle）&quot;&gt;&lt;a href=&quot;#接口分离原则（interface-segregation-principle）&quot; class=&quot;headerlink&quot; title=&quot;接口分离原则（interface-segregation principle）&quot;&gt;&lt;/a&gt;接口分离原则（interface-segregation principle）&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux相关操作</title>
    <link href="https://entimm.com/2016/09/15/linux/"/>
    <id>https://entimm.com/2016/09/15/linux/</id>
    <published>2016-09-15T10:02:33.000Z</published>
    <updated>2017-05-18T16:31:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>/etc/init.d/iptables stop<br>service iptables stop # 停止服务</p>
<h3 id="查看防火墙信息"><a href="#查看防火墙信息" class="headerlink" title="查看防火墙信息"></a>查看防火墙信息</h3><p>/etc/init.d/iptables status</p>
<h3 id="开放端口-8080"><a href="#开放端口-8080" class="headerlink" title="开放端口:8080"></a>开放端口:8080</h3><p>/sbin/iptables -I INPUT -p tcp –dport 8080 -j ACCEPT</p>
<h3 id="重启防火墙以便改动生效-或者直接重启系统"><a href="#重启防火墙以便改动生效-或者直接重启系统" class="headerlink" title="重启防火墙以便改动生效:(或者直接重启系统)"></a>重启防火墙以便改动生效:(或者直接重启系统)</h3><p>/etc/init.d/iptables restart</p>
<h3 id="将更改进行保存"><a href="#将更改进行保存" class="headerlink" title="将更改进行保存"></a>将更改进行保存</h3><p>/etc/rc.d/init.d/iptables save</p>
<p>另外直接在/etc/sysconfig/iptables中增加一行：<br>-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT</p>
<h2 id="在当前文件夹中查找字串"><a href="#在当前文件夹中查找字串" class="headerlink" title="在当前文件夹中查找字串"></a>在当前文件夹中查找字串</h2><p>grep ‘search_str’ ./ -r</p>
<h2 id="linux-查看系统版本"><a href="#linux-查看系统版本" class="headerlink" title="linux 查看系统版本"></a>linux 查看系统版本</h2><h3 id="RedHat-CentOS"><a href="#RedHat-CentOS" class="headerlink" title="RedHat,CentOS"></a>RedHat,CentOS</h3><p>cat /proc/version<br>cat /etc/redhat-release</p>
<h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><p>cat /etc/issue</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;防火墙&quot;&gt;&lt;a href=&quot;#防火墙&quot; class=&quot;headerlink&quot; title=&quot;防火墙&quot;&gt;&lt;/a&gt;防火墙&lt;/h2&gt;&lt;h3 id=&quot;关闭防火墙&quot;&gt;&lt;a href=&quot;#关闭防火墙&quot; class=&quot;headerlink&quot; title=&quot;关闭防火墙&quot;&gt;&lt;/a&gt;关闭防火墙&lt;/h3&gt;&lt;p&gt;/etc/init.d/iptables stop&lt;br&gt;service iptables stop # 停止服务&lt;/p&gt;
&lt;h3 id=&quot;查看防火墙信息&quot;&gt;&lt;a href=&quot;#查看防火墙信息&quot; class=&quot;headerlink&quot; title=&quot;查看防火墙信息&quot;&gt;&lt;/a&gt;查看防火墙信息&lt;/h3&gt;&lt;p&gt;/etc/init.d/iptables status&lt;/p&gt;
&lt;h3 id=&quot;开放端口-8080&quot;&gt;&lt;a href=&quot;#开放端口-8080&quot; class=&quot;headerlink&quot; title=&quot;开放端口:8080&quot;&gt;&lt;/a&gt;开放端口:8080&lt;/h3&gt;&lt;p&gt;/sbin/iptables -I INPUT -p tcp –dport 8080 -j ACCEPT&lt;/p&gt;
&lt;h3 id=&quot;重启防火墙以便改动生效-或者直接重启系统&quot;&gt;&lt;a href=&quot;#重启防火墙以便改动生效-或者直接重启系统&quot; class=&quot;headerlink&quot; title=&quot;重启防火墙以便改动生效:(或者直接重启系统)&quot;&gt;&lt;/a&gt;重启防火墙以便改动生效:(或者直接重启系统)&lt;/h3&gt;&lt;p&gt;/etc/init.d/iptables restart&lt;/p&gt;
&lt;h3 id=&quot;将更改进行保存&quot;&gt;&lt;a href=&quot;#将更改进行保存&quot; class=&quot;headerlink&quot; title=&quot;将更改进行保存&quot;&gt;&lt;/a&gt;将更改进行保存&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过网址自动部署web</title>
    <link href="https://entimm.com/2016/09/15/%E9%80%9A%E8%BF%87%E7%BD%91%E5%9D%80%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2web/"/>
    <id>https://entimm.com/2016/09/15/通过网址自动部署web/</id>
    <published>2016-09-15T09:36:20.000Z</published>
    <updated>2017-05-18T15:37:02.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>部署代码至单独的web站点<br> <a href="https://github.com/markomarkovic/simple-php-git-deploy.git" target="_blank" rel="external">https://github.com/markomarkovic/simple-php-git-deploy.git</a></li>
<li>配置<code>www-data</code>用户<br> 改<code>/usr/sbin/nologin</code>=&gt;<code>/bin/bash</code>,且可找到<code>www-data</code>用户的目录:<code>/var/www</code></li>
<li>设置www-data登录密码<br> sudo passwd www-data</li>
<li>设置<code>/var/www</code>归属<br>sudo chown -R www-data:www-data /var/www/</li>
<li>切换到<code>www-data</code>用户<br> su /var/www</li>
<li>在<code>/var/www/.ssh</code>目录中生成ssh key<br> sudo -Hu www-data ssh-keygen -t rsa -C “entimm@gmail.com”</li>
<li>登录git托管网址，把<code>id_rsa.pub</code>公约贴上去</li>
<li>设置webhook</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;部署代码至单独的web站点&lt;br&gt; &lt;a href=&quot;https://github.com/markomarkovic/simple-php-git-deploy.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/markomarkovic/simple-php-git-deploy.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;配置&lt;code&gt;www-data&lt;/code&gt;用户&lt;br&gt; 改&lt;code&gt;/usr/sbin/nologin&lt;/code&gt;=&amp;gt;&lt;code&gt;/bin/bash&lt;/code&gt;,且可找到&lt;code&gt;www-data&lt;/code&gt;用户的目录:&lt;code&gt;/var/www&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置www-data登录密码&lt;br&gt; sudo passwd www-data&lt;/li&gt;
&lt;li&gt;设置&lt;code&gt;/var/www&lt;/code&gt;归属&lt;br&gt;sudo chown -R www-data:www-data /var/www/&lt;/li&gt;
&lt;li&gt;切换到&lt;code&gt;www-data&lt;/code&gt;用户&lt;br&gt; su /var/www&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;/var/www/.ssh&lt;/code&gt;目录中生成ssh key&lt;br&gt; sudo -Hu www-data ssh-keygen -t rsa -C “entimm@gmail.com”&lt;/li&gt;
&lt;li&gt;登录git托管网址，把&lt;code&gt;id_rsa.pub&lt;/code&gt;公约贴上去&lt;/li&gt;
&lt;li&gt;设置webhook&lt;/li&gt;
&lt;/ol&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>很有用的一些技巧</title>
    <link href="https://entimm.com/2016/09/12/%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
    <id>https://entimm.com/2016/09/12/很有用的一些技巧/</id>
    <published>2016-09-12T11:31:55.000Z</published>
    <updated>2017-05-18T16:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在利用-xdebug-和-phpstorm-调试通过终端执行的-PHP-脚本时，在终端执行先语句，即可对该脚本进行调试"><a href="#在利用-xdebug-和-phpstorm-调试通过终端执行的-PHP-脚本时，在终端执行先语句，即可对该脚本进行调试" class="headerlink" title="在利用 xdebug 和 phpstorm 调试通过终端执行的 PHP 脚本时，在终端执行先语句，即可对该脚本进行调试"></a>在利用 xdebug 和 phpstorm 调试通过终端执行的 PHP 脚本时，在终端执行先语句，即可对该脚本进行调试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export XDEBUG_CONFIG = "idekey=PHPSTORM"</div></pre></td></tr></table></figure>
<h3 id="通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码"><a href="#通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码" class="headerlink" title="通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码"></a>通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 先在本机生成 authentication keys，注意不能输入 passphrase</div><div class="line"><span class="meta">#</span> 这里假设 A 是本机，B是远端</div><div class="line">a@A:~&gt; ssh-keygen -t rsa</div><div class="line"><span class="meta"></span></div><div class="line"># 然后登录 B，并建立一个目录 ~/.ssh</div><div class="line">a@A:~&gt; ssh b@B mkdir -p .ssh</div><div class="line"><span class="meta"></span></div><div class="line"># 最后把 A 的 id_rsa.pub 追加到 B 的 ~/.ssh/authorized_keys 中去</div><div class="line">a@A:~&gt; cat ~/.ssh/id_rsa.pub | ssh b@B 'cat &gt;&gt; ~/.ssh/authorized_keys'</div><div class="line"><span class="meta"></span></div><div class="line"># 然后就成功了</div><div class="line">a@A:~&gt; ssh b@B</div></pre></td></tr></table></figure>
<h3 id="使用的-PHP-的内建服务器"><a href="#使用的-PHP-的内建服务器" class="headerlink" title="使用的 PHP 的内建服务器"></a>使用的 PHP 的内建服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -S 主机名或地址@端口号 -t 目录</div></pre></td></tr></table></figure>
<h3 id="svn-检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用"><a href="#svn-检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用" class="headerlink" title="svn 检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用"></a>svn 检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn update --set-depth immediates</div></pre></td></tr></table></figure>
<h3 id="git-新建一个全新的空白分支"><a href="#git-新建一个全新的空白分支" class="headerlink" title="git 新建一个全新的空白分支"></a>git 新建一个全新的空白分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout --orphan 分支名</div><div class="line">git clean -f</div></pre></td></tr></table></figure>
<h3 id="针对手机端-google-chrome-的样式优化（很好看）"><a href="#针对手机端-google-chrome-的样式优化（很好看）" class="headerlink" title="针对手机端 google chrome 的样式优化（很好看）"></a>针对手机端 google chrome 的样式优化（很好看）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"这里是你的 web 主题颜色"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注释技巧"><a href="#注释技巧" class="headerlink" title="注释技巧"></a>注释技巧</h3><ul>
<li><p>TODO<br>说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明。</p>
</li>
<li><p>FIXME<br>说明标识处代码需要修正，甚至代码是错误的，不能工作，需要修复，如何修正会在说明中简略说明。</p>
</li>
<li><p>XXX<br>说明标识处代码虽然实现了功能，但是实现的方法有待商榷，希望将来能改进，要改进的地方会在说明中简略说明。</p>
</li>
</ul>
<h3 id="正则匹配中文"><a href="#正则匹配中文" class="headerlink" title="正则匹配中文"></a>正则匹配中文</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!preg_match(<span class="string">"/^["</span>.chr(<span class="number">0xa1</span>).<span class="string">"-"</span>.chr(<span class="number">0xff</span>).<span class="string">"A-Za-z0-9_]+$/"</span>,$str)) <span class="comment">//GB2312汉字字母数字下划线正则表达式</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(!preg_match(<span class="string">"/^[\x&#123;4e00&#125;-\x&#123;9fa5&#125;A-Za-z0-9_]+$/u"</span>,$str)) <span class="comment">//UTF-8汉字字母数字下划线正则表达式</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在利用-xdebug-和-phpstorm-调试通过终端执行的-PHP-脚本时，在终端执行先语句，即可对该脚本进行调试&quot;&gt;&lt;a href=&quot;#在利用-xdebug-和-phpstorm-调试通过终端执行的-PHP-脚本时，在终端执行先语句，即可对该脚本进行调试&quot; class=&quot;headerlink&quot; title=&quot;在利用 xdebug 和 phpstorm 调试通过终端执行的 PHP 脚本时，在终端执行先语句，即可对该脚本进行调试&quot;&gt;&lt;/a&gt;在利用 xdebug 和 phpstorm 调试通过终端执行的 PHP 脚本时，在终端执行先语句，即可对该脚本进行调试&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;export XDEBUG_CONFIG = &quot;idekey=PHPSTORM&quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码&quot;&gt;&lt;a href=&quot;#通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码&quot; class=&quot;headerlink&quot; title=&quot;通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码&quot;&gt;&lt;/a&gt;通过SSH方式登录远程服务器时，通过下面方式免除每次都要输入密码&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 先在本机生成 authentication keys，注意不能输入 passphrase&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 这里假设 A 是本机，B是远端&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a@A:~&amp;gt; ssh-keygen -t rsa&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 然后登录 B，并建立一个目录 ~/.ssh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a@A:~&amp;gt; ssh b@B mkdir -p .ssh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 最后把 A 的 id_rsa.pub 追加到 B 的 ~/.ssh/authorized_keys 中去&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a@A:~&amp;gt; cat ~/.ssh/id_rsa.pub | ssh b@B &#39;cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 然后就成功了&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a@A:~&amp;gt; ssh b@B&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用的-PHP-的内建服务器&quot;&gt;&lt;a href=&quot;#使用的-PHP-的内建服务器&quot; class=&quot;headerlink&quot; title=&quot;使用的 PHP 的内建服务器&quot;&gt;&lt;/a&gt;使用的 PHP 的内建服务器&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;php -S 主机名或地址@端口号 -t 目录&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;svn-检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用&quot;&gt;&lt;a href=&quot;#svn-检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用&quot; class=&quot;headerlink&quot; title=&quot;svn 检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用&quot;&gt;&lt;/a&gt;svn 检出当前目前下的文件或文件名，这在开发过程中不想检出全部数据时很有用&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;svn update --set-depth immediates&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;git-新建一个全新的空白分支&quot;&gt;&lt;a href=&quot;#git-新建一个全新的空白分支&quot; class=&quot;headerlink&quot; title=&quot;git 新建一个全新的空白分支&quot;&gt;&lt;/a&gt;git 新建一个全新的空白分支&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git checkout --orphan 分支名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git clean -f&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试问题总结</title>
    <link href="https://entimm.com/2016/09/08/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://entimm.com/2016/09/08/面试问题总结/</id>
    <published>2016-09-08T15:52:47.000Z</published>
    <updated>2017-05-18T16:26:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="php魔术方法-14项"><a href="#php魔术方法-14项" class="headerlink" title="php魔术方法(14项)"></a>php魔术方法(14项)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">__construct() 实例化类时自动调用.</div><div class="line">__destruct() 类对象使用结束时自动调用.</div><div class="line">__set() 在给未定义的属性赋值的时候调用.</div><div class="line">__get() 调用未定义的属性时候调用.</div><div class="line">__isset() 使用isset()或empty()函数时候会调用.</div><div class="line">__unset() 使用unset()时候会调用.</div><div class="line">__sleep() 使用serialize序列化时候调用.</div><div class="line">__wakeup() 使用unserialize反序列化的时候调用.</div><div class="line">__call() 调用一个不存在的方法的时候调用.</div><div class="line">__callStatic()调用一个不存在的静态方法是调用.</div><div class="line">__toString() 把对象转换成字符串的时候会调用.比如 echo.</div><div class="line">__invoke() 当尝试把对象当方法调用时调用.</div><div class="line">__set_state() 当使用var_export()函数时候调用.接受一个数组参数.</div><div class="line">__clone() 当使用clone复制一个对象时候调用.</div></pre></td></tr></table></figure>
<h2 id="HTTP协议中几个状态码的含义"><a href="#HTTP协议中几个状态码的含义" class="headerlink" title="HTTP协议中几个状态码的含义."></a>HTTP协议中几个状态码的含义.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">100 Continue  继续,一般在发送post请求时,已发送了http header之后服务端将返回此信息,表示确认,之后发送具体参数信息</div><div class="line">200 OK   正常返回信息</div><div class="line">201 Created  请求成功并且服务器创建了新的资源</div><div class="line">202 Accepted  服务器已接受请求,但尚未处理</div><div class="line">301 Moved Permanently  请求的网页已永久移动到新位置.</div><div class="line">302 Found  临时性重定向.</div><div class="line">303 See Other  临时性重定向,且总是使用 GET 请求新的 URI.</div><div class="line">304 Not Modified  自从上次请求后,请求的网页未修改过.</div><div class="line">400 Bad Request  服务器无法理解请求的格式,客户端不应当尝试再次使用相同的内容发起请求.</div><div class="line">401 Unauthorized  请求未授权.</div><div class="line">403 Forbidden  禁止访问.</div><div class="line">404 Not Found  找不到如何与 URI 相匹配的资源.</div><div class="line">500 Internal Server Error  最常见的服务器端错误.</div><div class="line">503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）.</div><div class="line"></div><div class="line">100 Continue</div><div class="line">101 Switching Protocols</div><div class="line">200 OK</div><div class="line">201 Created</div><div class="line">202 Accepted</div><div class="line">203 Non-Authoritative Information</div><div class="line">204 No Content</div><div class="line">205 Reset Content</div><div class="line">206 Partial Content</div><div class="line">300 Multiple Choices</div><div class="line">301 Moved Permanently</div><div class="line">302 Found</div><div class="line">303 See Other</div><div class="line">304 Not Modified</div><div class="line">305 Use Proxy</div><div class="line">307 Temporary Redirect</div><div class="line">400 Bad Request</div><div class="line">401 Unauthorized</div><div class="line">402 Payment Required</div><div class="line">403 Forbidden</div><div class="line">404 Not Found</div><div class="line">405 Method Not Allowed</div><div class="line">406 Not Acceptable</div><div class="line">407 Proxy Authentication Required</div><div class="line">408 Request Time-out</div><div class="line">409 Conflict</div><div class="line">410 Gone</div><div class="line">411 Length Required</div><div class="line">412 Precondition Failed</div><div class="line">413 Request Entity Too Large</div><div class="line">414 Request-URI Too Large</div><div class="line">415 Unsupported Media Type</div><div class="line">416 Requested range not satisfiable</div><div class="line">417 Expectation Failed</div><div class="line">500 Internal Server Error</div><div class="line">501 Not Implemented</div><div class="line">502 Bad Gateway</div><div class="line">503 Service Unavailable</div><div class="line">504 Gateway Time-out</div><div class="line">505 HTTP Version not supported</div></pre></td></tr></table></figure>
<h2 id="语句include和require的区别"><a href="#语句include和require的区别" class="headerlink" title="语句include和require的区别"></a>语句include和require的区别</h2><p>在失败的时候：<br><code>include</code> 产生一个 <code>warning</code> ,而 <code>require</code> 直接产生错误中断;</p>
<p><code>require</code> 在运行前载入;<br><code>include</code> 在运行时载入;</p>
<p><code>require_once</code> 和 <code>include_once</code> 可以避免重复包含同一文件.</p>
<p>如果网站框架的设计能避免重复引用的话,推荐用include/require,<br>因为他们比_once速度稍快. </p>
<h2 id="事务的特征-ACID"><a href="#事务的特征-ACID" class="headerlink" title="事务的特征(ACID)"></a>事务的特征(ACID)</h2><ul>
<li>原子性(Atomicity) 构成事务的所有事件要么都完成要么都当什么也没发生过</li>
<li>一致性(Consistency) 事务的结果应该符合预期，不应当超出预期之外导致不合理的结果</li>
<li>隔离性(Isolation) 未完成的事务应当对其它事务不构成影响</li>
<li>持久性(Durability) 事务的结果应当被永久保存下来</li>
</ul>
<h2 id="TCP传输的三次握手"><a href="#TCP传输的三次握手" class="headerlink" title="TCP传输的三次握手"></a>TCP传输的三次握手</h2><p>发送端首先发送一个带<code>SYN</code>标志的数据包给对方。接收端收到后，回传一个带有<code>SYN/ACK</code>标志的数据包以示确认。<br>最后，发送端再回传一个带<code>ACK</code>标志的数据包，代表“握手”结束。<br>若在握手过程中某个阶段莫名中断，<code>TCP</code>协议会再次以相同的顺序发送相同的数据包。</p>
<h2 id="断开一个TCP连接则需要”四次握手”"><a href="#断开一个TCP连接则需要”四次握手”" class="headerlink" title="断开一个TCP连接则需要”四次握手”"></a>断开一个TCP连接则需要”四次握手”</h2><ul>
<li><p>第一次握手：主动关闭方发送一个<code>FIN</code>，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了<br>(当然，在fin包之前发送出去的数据，如果没有收到对应的<code>ack</code>确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。</p>
</li>
<li><p>第二次握手：被动关闭方收到<code>FIN</code>包后，发送一个<code>ACK</code>给对方，确认序号为收到序号<code>+1</code>（与<code>SYN</code>相同，一个<code>FIN</code>占用一个序号）。</p>
</li>
<li><p>第三次握手：被动关闭方发送一个<code>FIN</code>，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</p>
</li>
<li><p>第四次握手：主动关闭方收到<code>FIN</code>后，发送一个<code>ACK</code>给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</p>
</li>
</ul>
<h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><p><code>TCP</code>（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个<code>TCP</code>连接必须要经过三次“对话”才能建立起来</p>
<p><code>UDP</code>（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！<br>UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。</p>
<h2 id="redis支持的数据类型"><a href="#redis支持的数据类型" class="headerlink" title="redis支持的数据类型"></a>redis支持的数据类型</h2><ul>
<li>string</li>
<li>list</li>
<li>set</li>
<li>order set</li>
<li>hash</li>
</ul>
<h2 id="asp-php-jsp的优缺点"><a href="#asp-php-jsp的优缺点" class="headerlink" title="asp,php,jsp的优缺点"></a>asp,php,jsp的优缺点</h2><p>asp: 闭源且不跨平台<br>php: 开源且跨平台，简单快速，作为网站初期的首选<br>jsp: </p>
<h3 id="这个题"><a href="#这个题" class="headerlink" title="这个题"></a>这个题</h3><p>如果 uid 值为 10,2,5,6,3 的记录存在，那么 select uid from user where uid in (10,2,5,6,3);<br>结果顺序为按 uid 升序排列</p>
<h2 id="php之multicurl"><a href="#php之multicurl" class="headerlink" title="php之multicurl"></a>php之multicurl</h2><p>multicurl所有的多线程就是异步、网络io支持并发，http请求支持并发<br>pthread是真正正宗的多线程，也是php唯一的多线程</p>
<h2 id="php优化"><a href="#php优化" class="headerlink" title="php优化"></a>php优化</h2><ul>
<li>CPU 密集部分用 C++ 或者 C 写 PHP 的扩展模块。</li>
<li>OPcache 通过将PHP脚本预编译的字节码存储到共享内存中来提升PHP的性能,省去了每次加载和解析PHP脚本的开销。</li>
</ul>
<h2 id="php版本的差异"><a href="#php版本的差异" class="headerlink" title="php版本的差异"></a>php版本的差异</h2><ul>
<li>在 PHP 5.5 之前，empty() 仅支持变量；5.5以后支持表达式了</li>
</ul>
<h2 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">错误的写法</div><div class="line"><span class="keyword">select</span> uid <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> uid <span class="keyword">where</span> <span class="keyword">count</span>(*) &gt; <span class="number">60</span>;</div><div class="line">`where` 子句后面不能跟聚合条件</div><div class="line">`group by` 应该写在 `where` 子句后面</div><div class="line">这种情况应该用 `having`</div><div class="line"></div><div class="line">正确的写法</div><div class="line"><span class="keyword">select</span> uid <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> uid <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">60</span>;</div></pre></td></tr></table></figure>
<h2 id="get-vs-post"><a href="#get-vs-post" class="headerlink" title="get vs post"></a>get vs post</h2><ul>
<li>get 数据量长度受限制，这主要是受 url 长度限制</li>
<li>安全</li>
<li>get限制表单中数据集的范围为asc2码，而post可以支持整个iso10646字符集</li>
</ul>
<h2 id="echo-print-print-r-的区别"><a href="#echo-print-print-r-的区别" class="headerlink" title="echo(),print(),print_r()的区别"></a>echo(),print(),print_r()的区别</h2><p>echo是语言结构，没有返回值<br>print是函数，有返回值<br>print_r是函数，递归调用，用于输出数组对象</p>
<h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><p>方法一：php函数跳转,缺点，header头之前不能有输出，跳转后的程序继续执行，可用exit中断执行后面的程序。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Header(<span class="string">"Location: 网址"</span>);     <span class="comment">//直接跳转</span></div><div class="line">header(<span class="string">"refresh:3;url=网址"</span>); <span class="comment">//三秒后跳转</span></div></pre></td></tr></table></figure></p>
<p>方法二：利用meta<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;meta http-equiv=refresh content='0; url=网址'&gt;"</span>;</div></pre></td></tr></table></figure></p>
<h2 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loaddir1</span><span class="params">($dirname)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>($handle=opendir($dirname))&#123;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">false</span>!==($files=readdir($handle)))&#123;</div><div class="line">            <span class="keyword">if</span>($files!=<span class="string">"."</span>&amp;&amp;$files!=<span class="string">".."</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(is_file($dirname.<span class="string">'/'</span>.$files))&#123;</div><div class="line">                    <span class="keyword">echo</span> $dirname.<span class="string">'/'</span>.$files.<span class="string">'&lt;br&gt;'</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(is_dir($dirname.<span class="string">"/"</span>.$files))&#123;</div><div class="line">                    loaddir($dirname.<span class="string">"/"</span>.$files);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loaddir2</span><span class="params">($path)</span></span></div><div class="line">&#123;</div><div class="line">    $files = <span class="keyword">array</span>();</div><div class="line">    <span class="keyword">if</span>($handle = opendir($path))&#123;</div><div class="line">        <span class="keyword">while</span>(($f = readdir($handle)) !== <span class="keyword">false</span>)&#123;</div><div class="line">            $p = $path .<span class="string">'/'</span>. $f;</div><div class="line">            <span class="keyword">if</span>($f == <span class="string">'..'</span> || $f == <span class="string">'.'</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(is_file($p))&#123;</div><div class="line">                $files[] = $f;</div><div class="line">            &#125;<span class="keyword">elseif</span>(is_dir($p))&#123;</div><div class="line">                $files[$f] = loaddir2($p);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        closedir($handle);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $files;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="限制上传文件大小"><a href="#限制上传文件大小" class="headerlink" title="限制上传文件大小"></a>限制上传文件大小</h2><ul>
<li>客户端的隐藏域MAX_FILE_SIZE的数值（可以被绕开）。</li>
<li>服务器端的upload_max_filesize，post_max_size和memory_limit。这几项不能够用脚本来设置。</li>
</ul>
<h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>a.删除没有任何订单客户:DELETE FROM customerinfo WHERE customerid NOT in (SELECT customerid FROM orderinfo)<br>b.提取所有没有订单客户:SELECT <em> FROM customerinfo WHERE customerid NOT in (SELECT customerid FROM orderinfo)<br>c.提高b的速度优化:SELECT </em> FROM customerinfo LEFT JOIN orderid ON customerinfo.customerid=orderinfo.customerid<br>WHERE orderinfo.customerid IS NULL</p>
<h2 id="fopen打开文件"><a href="#fopen打开文件" class="headerlink" title="fopen打开文件"></a>fopen打开文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$readcontents = fopen(<span class="string">'http://www.phpres.com/index.html'</span>, <span class="string">'rb'</span>);</div><div class="line">$contents = stream_get_contents($readcontents);</div><div class="line">fclose($readcontents);</div><div class="line"><span class="keyword">echo</span> $contents;</div></pre></td></tr></table></figure>
<h2 id="char-vs-varchar"><a href="#char-vs-varchar" class="headerlink" title="char vs varchar"></a>char vs varchar</h2><p>Varchar是变长，节省存储空间，char是固定长度。查找效率要char型快，因为varchar是非定长，必须先查找长度，然后进行数据的提取，比char定长类型多了一个步骤，所以效率低一些</p>
<h2 id="这些这些协议的全称和中文解释（都是工作在应用层）"><a href="#这些这些协议的全称和中文解释（都是工作在应用层）" class="headerlink" title="这些这些协议的全称和中文解释（都是工作在应用层）"></a>这些这些协议的全称和中文解释（都是工作在应用层）</h2><p>SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议<br>POP3 (Post Office Protocol 3) 邮局协议第3版<br>HTTP (Hypertext Transfer Protocol) 超文本传输协议<br>FTP   (File Transfer Protocol）文件传输协议<br>DNS   (Domain Name System and Domain Name Service protocol) 域名系统（服务）协议</p>
<h2 id="OSI七层网络模型的名称，由下到上"><a href="#OSI七层网络模型的名称，由下到上" class="headerlink" title="OSI七层网络模型的名称，由下到上"></a>OSI七层网络模型的名称，由下到上</h2><p>物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p>
<h2 id="find命令和grep命令的区别"><a href="#find命令和grep命令的区别" class="headerlink" title="find命令和grep命令的区别"></a>find命令和grep命令的区别</h2><p>find：按照文件名查找<br>grep：按照文件内容查找</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;php魔术方法-14项&quot;&gt;&lt;a href=&quot;#php魔术方法-14项&quot; class=&quot;headerlink&quot; title=&quot;php魔术方法(14项)&quot;&gt;&lt;/a&gt;php魔术方法(14项)&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;__construct() 实例化类时自动调用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__destruct() 类对象使用结束时自动调用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__set() 在给未定义的属性赋值的时候调用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__get() 调用未定义的属性时候调用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__isset() 使用isset()或empty()函数时候会调用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__unset() 使用unset()时候会调用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__sleep() 使用serialize序列化时候调用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__wakeup() 使用unserialize反序列化的时候调用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__call() 调用一个不存在的方法的时候调用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__callStatic()调用一个不存在的静态方法是调用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__toString() 把对象转换成字符串的时候会调用.比如 echo.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__invoke() 当尝试把对象当方法调用时调用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__set_state() 当使用var_export()函数时候调用.接受一个数组参数.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__clone() 当使用clone复制一个对象时候调用.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;HTTP协议中几个状态码的含义&quot;&gt;&lt;a href=&quot;#HTTP协议中几个状态码的含义&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议中几个状态码的含义.&quot;&gt;&lt;/a&gt;HTTP协议中几个状态码的含义.&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;100 Continue  继续,一般在发送post请求时,已发送了http header之后服务端将返回此信息,表示确认,之后发送具体参数信息&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;200 OK   正常返回信息&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;201 Created  请求成功并且服务器创建了新的资源&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;202 Accepted  服务器已接受请求,但尚未处理&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;301 Moved Permanently  请求的网页已永久移动到新位置.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;302 Found  临时性重定向.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;303 See Other  临时性重定向,且总是使用 GET 请求新的 URI.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;304 Not Modified  自从上次请求后,请求的网页未修改过.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;400 Bad Request  服务器无法理解请求的格式,客户端不应当尝试再次使用相同的内容发起请求.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;401 Unauthorized  请求未授权.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;403 Forbidden  禁止访问.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;404 Not Found  找不到如何与 URI 相匹配的资源.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;500 Internal Server Error  最常见的服务器端错误.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100 Continue&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101 Switching Protocols&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;200 OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;201 Created&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;202 Accepted&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;203 Non-Authoritative Information&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;204 No Content&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;205 Reset Content&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;206 Partial Content&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;300 Multiple Choices&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;301 Moved Permanently&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;302 Found&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;303 See Other&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;304 Not Modified&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;305 Use Proxy&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;307 Temporary Redirect&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;400 Bad Request&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;401 Unauthorized&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;402 Payment Required&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;403 Forbidden&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;404 Not Found&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;405 Method Not Allowed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;406 Not Acceptable&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;407 Proxy Authentication Required&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;408 Request Time-out&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;409 Conflict&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;410 Gone&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;411 Length Required&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;412 Precondition Failed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;413 Request Entity Too Large&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;414 Request-URI Too Large&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;415 Unsupported Media Type&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;416 Requested range not satisfiable&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;417 Expectation Failed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;500 Internal Server Error&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;501 Not Implemented&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;502 Bad Gateway&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;503 Service Unavailable&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;504 Gateway Time-out&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;505 HTTP Version not supported&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;语句include和require的区别&quot;&gt;&lt;a href=&quot;#语句include和require的区别&quot; class=&quot;headerlink&quot; title=&quot;语句include和require的区别&quot;&gt;&lt;/a&gt;语句include和require的区别&lt;/h2&gt;&lt;p&gt;在失败的时候：&lt;br&gt;&lt;code&gt;include&lt;/code&gt; 产生一个 &lt;code&gt;warning&lt;/code&gt; ,而 &lt;code&gt;require&lt;/code&gt; 直接产生错误中断;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;require&lt;/code&gt; 在运行前载入;&lt;br&gt;&lt;code&gt;include&lt;/code&gt; 在运行时载入;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;require_once&lt;/code&gt; 和 &lt;code&gt;include_once&lt;/code&gt; 可以避免重复包含同一文件.&lt;/p&gt;
&lt;p&gt;如果网站框架的设计能避免重复引用的话,推荐用include/require,&lt;br&gt;因为他们比_once速度稍快. &lt;/p&gt;
&lt;h2 id=&quot;事务的特征-ACID&quot;&gt;&lt;a href=&quot;#事务的特征-ACID&quot; class=&quot;headerlink&quot; title=&quot;事务的特征(ACID)&quot;&gt;&lt;/a&gt;事务的特征(ACID)&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
